{"version":3,"file":"bugsnag-performance.min.js","sources":["../packages/core/dist/validation.js","../packages/core/dist/attributes.js","../packages/core/dist/clock.js","../packages/core/dist/config.js","../packages/core/dist/batch-processor.js","../packages/core/dist/events.js","../packages/core/dist/span.js","../packages/core/dist/trace-id-to-sampling-rate.js","../packages/core/dist/delivery.js","../packages/core/dist/fixed-probability-manager.js","../packages/core/dist/probability-fetcher.js","../packages/core/dist/probability-manager.js","../packages/core/dist/processor.js","../packages/core/dist/sampler.js","../packages/core/dist/span-context.js","../packages/core/dist/time.js","../packages/core/dist/span-factory.js","../packages/core/dist/core.js","../node_modules/@bugsnag/cuid/lib/pad.js","../node_modules/@bugsnag/cuid/lib/fingerprint.browser.js","../node_modules/@bugsnag/cuid/index.js","../node_modules/@bugsnag/cuid/lib/is-cuid.js","../packages/core/dist/persistence.js","../packages/core/dist/retry-queue.js","../packages/delivery-fetch/dist/delivery.js","../packages/request-tracker/dist/network-request-callback.js","../packages/request-tracker/dist/request-tracker.js","../packages/request-tracker/dist/url-helpers.js","../packages/request-tracker/dist/request-tracker-fetch.js","../packages/platforms/browser/lib/send-page-attributes.ts","../packages/platforms/browser/lib/auto-instrumentation/page-load-phase-spans.ts","../packages/platforms/browser/lib/default-routing-provider.ts","../packages/platforms/browser/lib/auto-instrumentation/full-page-load-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/network-request-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/resource-load-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/route-change-plugin.ts","../packages/platforms/browser/lib/clock.ts","../packages/platforms/browser/lib/routing-provider.ts","../packages/platforms/browser/lib/id-generator.ts","../packages/platforms/browser/lib/on-settle/settler.ts","../packages/platforms/browser/lib/on-settle/dom-mutation-settler.ts","../packages/platforms/browser/lib/on-settle/load-event-end-settler.ts","../packages/platforms/browser/lib/on-settle/request-settler.ts","../packages/platforms/browser/lib/on-settle/settler-aggregate.ts","../packages/platforms/browser/lib/persistence.ts","../packages/platforms/browser/lib/web-vitals.ts","../packages/platforms/browser/lib/browser.ts","../packages/platforms/browser/lib/on-settle/index.ts","../packages/platforms/browser/lib/backgrounding-listener.ts","../packages/platforms/browser/lib/span-attributes-source.ts","../packages/platforms/browser/lib/resource-attributes-source.ts","../packages/request-tracker/dist/request-tracker-xhr.js","../packages/platforms/browser/lib/config.ts"],"sourcesContent":["const isBoolean = (value) => value === true || value === false;\nconst isObject = (value) => !!value && typeof value === 'object' && !Array.isArray(value);\nconst isNumber = (value) => typeof value === 'number' && Number.isFinite(value) && !Number.isNaN(value);\nconst isString = (value) => typeof value === 'string';\nconst isStringWithLength = (value) => isString(value) && value.length > 0;\nconst isLogger = (value) => isObject(value) &&\n    typeof value.debug === 'function' &&\n    typeof value.info === 'function' &&\n    typeof value.warn === 'function' &&\n    typeof value.error === 'function';\nconst isStringArray = (value) => Array.isArray(value) && value.every(isStringWithLength);\nconst isStringOrRegExpArray = (value) => Array.isArray(value) && value.every(item => isStringWithLength(item) || item instanceof RegExp);\nfunction isPersistedProbability(value) {\n    return isObject(value) &&\n        isNumber(value.value) &&\n        isNumber(value.time);\n}\nconst isSpanContext = (value) => isObject(value) &&\n    typeof value.id === 'string' &&\n    typeof value.traceId === 'string' &&\n    typeof value.isValid === 'function';\nconst isParentContext = (value) => isObject(value) &&\n    typeof value.id === 'string' &&\n    typeof value.traceId === 'string';\nfunction isTime(value) {\n    return isNumber(value) || value instanceof Date;\n}\nfunction isPlugin(value) {\n    return isObject(value) && typeof value.configure === 'function';\n}\nfunction isPluginArray(value) {\n    return Array.isArray(value) && value.every(plugin => isPlugin(plugin));\n}\n\nexport { isBoolean, isLogger, isNumber, isObject, isParentContext, isPersistedProbability, isPlugin, isPluginArray, isSpanContext, isString, isStringArray, isStringOrRegExpArray, isStringWithLength, isTime };\n","import { isNumber } from './validation.js';\n\nclass SpanAttributes {\n    constructor(initialValues) {\n        this.attributes = initialValues;\n    }\n    set(name, value) {\n        if (typeof value === 'string' || typeof value === 'boolean' || isNumber(value)) {\n            this.attributes.set(name, value);\n        }\n    }\n    remove(name) {\n        this.attributes.delete(name);\n    }\n    toJson() {\n        return Array.from(this.attributes).map(([key, value]) => attributeToJson(key, value));\n    }\n}\nclass ResourceAttributes extends SpanAttributes {\n    constructor(releaseStage, appVersion, serviceName, sdkName, sdkVersion) {\n        const initialValues = new Map([\n            ['deployment.environment', releaseStage],\n            ['telemetry.sdk.name', sdkName],\n            ['telemetry.sdk.version', sdkVersion],\n            ['service.name', serviceName]\n        ]);\n        if (appVersion.length > 0) {\n            initialValues.set('service.version', appVersion);\n        }\n        super(initialValues);\n    }\n}\nfunction attributeToJson(key, attribute) {\n    switch (typeof attribute) {\n        case 'number':\n            if (Number.isNaN(attribute) || !Number.isFinite(attribute)) {\n                return undefined;\n            }\n            // 'bugsnag.sampling.p' must always be sent as a doubleValue\n            if (key !== 'bugsnag.sampling.p' && Number.isInteger(attribute)) {\n                return { key, value: { intValue: `${attribute}` } };\n            }\n            return { key, value: { doubleValue: attribute } };\n        case 'boolean':\n            return { key, value: { boolValue: attribute } };\n        case 'string':\n            return { key, value: { stringValue: attribute } };\n        default:\n            return undefined;\n    }\n}\n\nexport { ResourceAttributes, SpanAttributes, attributeToJson };\n","const NANOSECONDS_IN_MILLISECONDS = 1000000;\nfunction millisecondsToNanoseconds(milliseconds) {\n    return Math.round(milliseconds * NANOSECONDS_IN_MILLISECONDS);\n}\n\nexport { millisecondsToNanoseconds };\n","import { isStringWithLength, isString, isLogger, isStringArray, isPluginArray, isObject, isNumber } from './validation.js';\n\nconst schema = {\n    appVersion: {\n        defaultValue: '',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    endpoint: {\n        defaultValue: 'https://otlp.bugsnag.com/v1/traces',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    apiKey: {\n        defaultValue: '',\n        message: 'should be a 32 character hexadecimal string',\n        validate: (value) => isString(value) && /^[a-f0-9]{32}$/.test(value)\n    },\n    logger: {\n        defaultValue: {\n            debug(message) { console.debug(message); },\n            info(message) { console.info(message); },\n            warn(message) { console.warn(message); },\n            error(message) { console.error(message); }\n        },\n        message: 'should be a Logger object',\n        validate: isLogger\n    },\n    releaseStage: {\n        defaultValue: 'production',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    enabledReleaseStages: {\n        defaultValue: null,\n        message: 'should be an array of strings',\n        validate: (value) => value === null || isStringArray(value)\n    },\n    plugins: {\n        defaultValue: [],\n        message: 'should be an array of plugin objects',\n        validate: isPluginArray\n    },\n    bugsnag: {\n        defaultValue: undefined,\n        message: 'should be an instance of Bugsnag',\n        validate: (value) => isObject(value) && typeof value.addOnError === 'function'\n    },\n    samplingProbability: {\n        defaultValue: undefined,\n        message: 'should be a number between 0 and 1',\n        validate: (value) => value === undefined || (isNumber(value) && value >= 0 && value <= 1)\n    }\n};\nfunction validateConfig(config, schema) {\n    if (typeof config === 'string') {\n        config = { apiKey: config };\n    }\n    if (!isObject(config) || !isString(config.apiKey) || config.apiKey.length === 0) {\n        throw new Error('No Bugsnag API Key set');\n    }\n    let warnings = '';\n    const cleanConfiguration = {};\n    for (const option of Object.keys(schema)) {\n        if (Object.prototype.hasOwnProperty.call(config, option)) {\n            if (schema[option].validate(config[option])) {\n                cleanConfiguration[option] = config[option];\n            }\n            else {\n                warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof config[option]}`;\n                cleanConfiguration[option] = schema[option].defaultValue;\n            }\n        }\n        else {\n            cleanConfiguration[option] = schema[option].defaultValue;\n        }\n    }\n    // If apiKey is set but not valid we should still use it, despite the validation warning.\n    cleanConfiguration.apiKey = config.apiKey;\n    cleanConfiguration.maximumBatchSize = config.maximumBatchSize || 100;\n    cleanConfiguration.batchInactivityTimeoutMs = config.batchInactivityTimeoutMs || 30 * 1000;\n    if (warnings.length > 0) {\n        cleanConfiguration.logger.warn(`Invalid configuration${warnings}`);\n    }\n    return cleanConfiguration;\n}\n\nexport { schema, validateConfig };\n","class BatchProcessor {\n    constructor(delivery, configuration, retryQueue, sampler, probabilityManager, encoder) {\n        this.spans = [];\n        this.timeout = null;\n        this.flushQueue = Promise.resolve();\n        this.delivery = delivery;\n        this.configuration = configuration;\n        this.retryQueue = retryQueue;\n        this.sampler = sampler;\n        this.probabilityManager = probabilityManager;\n        this.encoder = encoder;\n        this.flush = this.flush.bind(this);\n    }\n    stop() {\n        if (this.timeout !== null) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    }\n    start() {\n        this.stop();\n        this.timeout = setTimeout(this.flush, this.configuration.batchInactivityTimeoutMs);\n    }\n    add(span) {\n        if (this.configuration.enabledReleaseStages &&\n            !this.configuration.enabledReleaseStages.includes(this.configuration.releaseStage)) {\n            return;\n        }\n        this.spans.push(span);\n        if (this.spans.length >= this.configuration.maximumBatchSize) {\n            this.flush();\n        }\n        else {\n            this.start();\n        }\n    }\n    async flush() {\n        this.stop();\n        this.flushQueue = this.flushQueue.then(async () => {\n            const batch = await this.prepareBatch();\n            // we either had nothing in the batch originally or all spans were discarded\n            if (!batch) {\n                return;\n            }\n            const payload = await this.encoder.encode(batch);\n            const batchTime = Date.now();\n            try {\n                const response = await this.delivery.send(payload);\n                if (response.samplingProbability !== undefined) {\n                    this.probabilityManager.setProbability(response.samplingProbability);\n                }\n                switch (response.state) {\n                    case 'success':\n                        this.retryQueue.flush();\n                        break;\n                    case 'failure-discard':\n                        this.configuration.logger.warn('delivery failed');\n                        break;\n                    case 'failure-retryable':\n                        this.configuration.logger.info('delivery failed, adding to retry queue');\n                        this.retryQueue.add(payload, batchTime);\n                        break;\n                    default:\n                        response.state;\n                }\n            }\n            catch (err) {\n                this.configuration.logger.warn('delivery failed');\n            }\n        });\n        await this.flushQueue;\n    }\n    async prepareBatch() {\n        if (this.spans.length === 0) {\n            return;\n        }\n        // ensure we have a fresh probability value before building the batch\n        await this.probabilityManager.ensureFreshProbability();\n        // update sampling values if necessary and re-sample\n        const batch = [];\n        const probability = this.sampler.spanProbability;\n        for (const span of this.spans) {\n            if (span.samplingProbability.raw > probability.raw) {\n                span.samplingProbability = probability;\n            }\n            if (this.sampler.sample(span)) {\n                batch.push(span);\n            }\n        }\n        // clear out the current batch so we're ready to start a new one\n        this.spans = [];\n        // if every span was discarded there's nothing to send\n        if (batch.length === 0) {\n            return;\n        }\n        return batch;\n    }\n}\n\nexport { BatchProcessor };\n","class SpanEvents {\n    constructor() {\n        this.events = [];\n    }\n    add(name, time) {\n        this.events.push({ name, time });\n    }\n    toJson(clock) {\n        return this.events.map(({ name, time }) => ({ name, timeUnixNano: clock.toUnixTimestampNanoseconds(time) }));\n    }\n}\n\nexport { SpanEvents };\n","import { SpanEvents } from './events.js';\nimport traceIdToSamplingRate from './trace-id-to-sampling-rate.js';\nimport { isTime, isSpanContext, isBoolean } from './validation.js';\n\nfunction spanToJson(span, clock) {\n    return {\n        name: span.name,\n        kind: span.kind,\n        spanId: span.id,\n        traceId: span.traceId,\n        parentSpanId: span.parentSpanId,\n        startTimeUnixNano: clock.toUnixTimestampNanoseconds(span.startTime),\n        endTimeUnixNano: clock.toUnixTimestampNanoseconds(span.endTime),\n        attributes: span.attributes.toJson(),\n        events: span.events.toJson(clock)\n    };\n}\nclass SpanInternal {\n    constructor(id, traceId, name, startTime, attributes, parentSpanId) {\n        this.kind = 3 /* Kind.Client */; // TODO: How do we define the initial Kind?\n        this.events = new SpanEvents();\n        this.id = id;\n        this.traceId = traceId;\n        this.parentSpanId = parentSpanId;\n        this.name = name;\n        this.startTime = startTime;\n        this.attributes = attributes;\n        this.samplingRate = traceIdToSamplingRate(this.traceId);\n    }\n    addEvent(name, time) {\n        this.events.add(name, time);\n    }\n    setAttribute(name, value) {\n        this.attributes.set(name, value);\n    }\n    end(endTime, samplingProbability) {\n        this.endTime = endTime;\n        let _samplingProbability = samplingProbability;\n        this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n        return {\n            id: this.id,\n            name: this.name,\n            kind: this.kind,\n            traceId: this.traceId,\n            startTime: this.startTime,\n            attributes: this.attributes,\n            events: this.events,\n            samplingRate: this.samplingRate,\n            endTime,\n            get samplingProbability() {\n                return _samplingProbability;\n            },\n            set samplingProbability(samplingProbability) {\n                _samplingProbability = samplingProbability;\n                this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n            },\n            parentSpanId: this.parentSpanId\n        };\n    }\n    isValid() {\n        return this.endTime === undefined;\n    }\n}\nconst coreSpanOptionSchema = {\n    startTime: {\n        message: 'should be a number or Date',\n        getDefaultValue: () => undefined,\n        validate: isTime\n    },\n    parentContext: {\n        message: 'should be a SpanContext',\n        getDefaultValue: () => undefined,\n        validate: (value) => value === null || isSpanContext(value)\n    },\n    makeCurrentContext: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    },\n    isFirstClass: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    }\n};\n\nexport { SpanInternal, coreSpanOptionSchema, spanToJson };\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// taken from OpenTelemetry's TraceIdRatioBasedSampler:\n// https://github.com/open-telemetry/opentelemetry-js/blob/ca700c4eef64c14bb5fef2be6f08ace7973a8881/packages/opentelemetry-sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts#L47-L55\n// with some small modifications to match our naming conventions\nfunction traceIdToSamplingRate(traceId) {\n    let samplingRate = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n        const position = i * 8;\n        const segment = Number.parseInt(traceId.slice(position, position + 8), 16);\n        samplingRate = (samplingRate ^ segment) >>> 0;\n    }\n    return samplingRate;\n}\n\nexport { traceIdToSamplingRate as default };\n","import { spanToJson } from './span.js';\n\nclass TracePayloadEncoder {\n    constructor(clock, configuration, resourceAttributeSource) {\n        this.clock = clock;\n        this.configuration = configuration;\n        this.resourceAttributeSource = resourceAttributeSource;\n    }\n    async encode(spans) {\n        const resourceAttributes = await this.resourceAttributeSource(this.configuration);\n        const jsonSpans = Array(spans.length);\n        for (let i = 0; i < spans.length; ++i) {\n            jsonSpans[i] = spanToJson(spans[i], this.clock);\n        }\n        const deliveryPayload = {\n            resourceSpans: [\n                {\n                    resource: { attributes: resourceAttributes.toJson() },\n                    scopeSpans: [{ spans: jsonSpans }]\n                }\n            ]\n        };\n        return {\n            body: deliveryPayload,\n            headers: Object.assign({ 'Bugsnag-Api-Key': this.configuration.apiKey, 'Content-Type': 'application/json' }, (this.configuration.samplingProbability !== undefined ? {} : { 'Bugsnag-Span-Sampling': this.generateSamplingHeader(spans) }))\n        };\n    }\n    generateSamplingHeader(spans) {\n        if (spans.length === 0) {\n            return '1:0';\n        }\n        const spanCounts = Object.create(null);\n        for (const span of spans) {\n            const existingValue = spanCounts[span.samplingProbability.raw] || 0;\n            spanCounts[span.samplingProbability.raw] = existingValue + 1;\n        }\n        const rawProbabilities = Object.keys(spanCounts);\n        const pairs = Array(rawProbabilities.length);\n        for (let i = 0; i < rawProbabilities.length; ++i) {\n            const rawProbability = rawProbabilities[i];\n            pairs[i] = `${rawProbability}:${spanCounts[rawProbability]}`;\n        }\n        return pairs.join(';');\n    }\n}\nconst retryCodes = new Set([402, 407, 408, 429]);\nfunction responseStateFromStatusCode(statusCode) {\n    if (statusCode >= 200 && statusCode < 300) {\n        return 'success';\n    }\n    if (statusCode >= 400 && statusCode < 500 && !retryCodes.has(statusCode)) {\n        return 'failure-discard';\n    }\n    return 'failure-retryable';\n}\n\nexport { TracePayloadEncoder, responseStateFromStatusCode };\n","class FixedProbabilityManager {\n    static async create(sampler, samplingProbability) {\n        sampler.probability = samplingProbability;\n        return new FixedProbabilityManager(sampler, samplingProbability);\n    }\n    constructor(sampler, samplingProbability) {\n        this.sampler = sampler;\n        this.samplingProbability = samplingProbability;\n    }\n    setProbability(newProbability) {\n        return Promise.resolve();\n    }\n    ensureFreshProbability() {\n        return Promise.resolve();\n    }\n}\n\nexport { FixedProbabilityManager as default };\n","// the time to wait before retrying a failed request\nconst RETRY_MILLISECONDS = 30 * 1000;\nclass ProbabilityFetcher {\n    constructor(delivery, apiKey) {\n        this.delivery = delivery;\n        this.payload = {\n            body: { resourceSpans: [] },\n            headers: {\n                'Bugsnag-Api-Key': apiKey,\n                'Content-Type': 'application/json',\n                'Bugsnag-Span-Sampling': '1.0:0'\n            }\n        };\n    }\n    async getNewProbability() {\n        // keep making requests until we get a new probability value from the server\n        while (true) {\n            const response = await this.delivery.send(this.payload);\n            // in theory this should always be present, but it's possible the request\n            // fails or there's a bug on the server side causing it not to be returned\n            if (response.samplingProbability !== undefined) {\n                return response.samplingProbability;\n            }\n            await this.timeBetweenRetries();\n        }\n    }\n    timeBetweenRetries() {\n        return new Promise(resolve => {\n            setTimeout(resolve, RETRY_MILLISECONDS);\n        });\n    }\n}\n\nexport { ProbabilityFetcher as default };\n","// the time between requests to fetch a new probability value from the server\nconst PROBABILITY_REFRESH_MILLISECONDS = 24 * 60 * 60 * 1000; // 24 hours\nclass ProbabilityManager {\n    static async create(persistence, sampler, probabilityFetcher) {\n        const persistedProbability = await persistence.load('bugsnag-sampling-probability');\n        let initialProbabilityTime;\n        if (persistedProbability === undefined) {\n            // If there is no stored probability:\n            // - Set the initial probability value to the default\n            // - Immediately fetch a new probability value\n            sampler.probability = 1.0;\n            initialProbabilityTime = 0;\n        }\n        else if (persistedProbability.time < Date.now() - PROBABILITY_REFRESH_MILLISECONDS) {\n            // If it is >= 24 hours old:\n            // - Set the initial probability value to the stored value\n            // - Immediately fetch a new probability value\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n        }\n        else {\n            // If it is < 24 hours old:\n            // - Use the stored probability\n            // - Fetch a new probability when this value would be 24 hours old\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n        }\n        return new ProbabilityManager(persistence, sampler, probabilityFetcher, initialProbabilityTime);\n    }\n    constructor(persistence, sampler, probabilityFetcher, initialProbabilityTime) {\n        this.outstandingFreshnessCheck = undefined;\n        this.persistence = persistence;\n        this.sampler = sampler;\n        this.probabilityFetcher = probabilityFetcher;\n        this.lastProbabilityTime = initialProbabilityTime;\n        this.ensureFreshProbability();\n    }\n    setProbability(newProbability) {\n        this.lastProbabilityTime = Date.now();\n        this.sampler.probability = newProbability;\n        // return this promise for convience in unit tests as it allows us to wait\n        // for persistence to finish; in real code we won't ever wait for this but\n        // there's no harm in returning it anyway\n        return this.persistence.save('bugsnag-sampling-probability', {\n            value: newProbability,\n            time: this.lastProbabilityTime\n        });\n    }\n    /**\n     * Ensure that the current probability value is fresh, i.e. it is less than 24\n     * hours old\n     *\n     * If the probability value is stale then this method will fetch a fresh one\n     *\n     * This method is idempotent; calling it while there is already an outstanding\n     * probability request will not create a second request\n     */\n    ensureFreshProbability() {\n        // we're already fetching a new probability\n        if (this.outstandingFreshnessCheck) {\n            return this.outstandingFreshnessCheck;\n        }\n        // if the probability value is >= 24 hours old, fetch a new one\n        if (Date.now() - this.lastProbabilityTime >= PROBABILITY_REFRESH_MILLISECONDS) {\n            this.outstandingFreshnessCheck = this.probabilityFetcher.getNewProbability()\n                .then(probability => {\n                this.setProbability(probability);\n                this.outstandingFreshnessCheck = undefined;\n            });\n            return this.outstandingFreshnessCheck;\n        }\n        return Promise.resolve();\n    }\n}\n\nexport { ProbabilityManager as default };\n","// a processor that buffers spans in memory until the client has started\n// not sure if this would need to be platform specific — will we ever care about\n// persisting spans if 'start' is never called?\nclass BufferingProcessor {\n    constructor() {\n        this.spans = [];\n    }\n    add(span) {\n        this.spans.push(span);\n    }\n}\n\nexport { BufferingProcessor };\n","// sampling rates are stored as a number between 0 and 2^32 - 1 (i.e. they are\n// u32s) so we need to scale the probability value to match this range as they\n// are stored as values between 0 and 1\nfunction scaleProbabilityToMatchSamplingRate(probability) {\n    return Math.floor(probability * 0xffffffff);\n}\nclass Sampler {\n    constructor(initialProbability) {\n        // we could just do 'this.probability = initialProbability' but TypeScript\n        // doesn't like that as it doesn't directly initialise these properties in\n        // the constructor\n        this._probability = initialProbability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(initialProbability);\n    }\n    /**\n     * The global probability value: a number between 0 & 1\n     */\n    get probability() {\n        return this._probability;\n    }\n    set probability(probability) {\n        this._probability = probability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(probability);\n    }\n    /**\n     * The probability value for spans: a number between 0 & 2^32 - 1\n     *\n     * This is necessary because span sampling rates are generated as unsigned 32\n     * bit integers. We scale the global probability value to match that range, so\n     * that we can use a simple calculation in 'sample'\n     *\n     * @see scaleProbabilityToMatchSamplingRate\n     */\n    get spanProbability() {\n        return {\n            raw: this._probability,\n            scaled: this.scaledProbability\n        };\n    }\n    sample(span) {\n        return span.samplingRate <= span.samplingProbability.scaled;\n    }\n    shouldSample(samplingRate) {\n        return samplingRate <= this.spanProbability.scaled;\n    }\n}\n\nexport { Sampler as default };\n","function spanContextEquals(span1, span2) {\n    if (span1 === span2)\n        return true;\n    if (span1 !== undefined && span2 !== undefined) {\n        return span1.id === span2.id && span1.traceId === span2.traceId;\n    }\n    return false;\n}\nclass DefaultSpanContextStorage {\n    constructor(backgroundingListener, contextStack = []) {\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear the context stack regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.contextStack.length = 0;\n        };\n        this.contextStack = contextStack;\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    *[Symbol.iterator]() {\n        for (let i = this.contextStack.length - 1; i >= 0; --i) {\n            yield this.contextStack[i];\n        }\n    }\n    push(context) {\n        if (context.isValid() && this.isInForeground) {\n            this.contextStack.push(context);\n        }\n    }\n    pop(context) {\n        if (spanContextEquals(context, this.current)) {\n            this.contextStack.pop();\n        }\n        this.removeClosedContexts();\n    }\n    get first() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[0]\n            : undefined;\n    }\n    get current() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[this.contextStack.length - 1]\n            : undefined;\n    }\n    removeClosedContexts() {\n        while (this.contextStack.length > 0 &&\n            this.contextStack[this.contextStack.length - 1].isValid() === false) {\n            this.contextStack.pop();\n        }\n    }\n}\n\nexport { DefaultSpanContextStorage, spanContextEquals };\n","import { isNumber } from './validation.js';\n\nfunction timeToNumber(clock, time) {\n    if (isNumber(time)) {\n        // no need to change anything - we want to store numbers anyway\n        // we assume this is nanosecond precision\n        return time;\n    }\n    if (time instanceof Date) {\n        return clock.convert(time);\n    }\n    return clock.now();\n}\n\nexport { timeToNumber };\n","import { SpanAttributes } from './attributes.js';\nimport { SpanInternal, coreSpanOptionSchema } from './span.js';\nimport { timeToNumber } from './time.js';\nimport { isParentContext, isObject } from './validation.js';\n\nconst DISCARD_END_TIME = -1;\nclass SpanFactory {\n    constructor(processor, sampler, idGenerator, spanAttributesSource, clock, backgroundingListener, logger, spanContextStorage) {\n        this.openSpans = new WeakSet();\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear all open spans regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.openSpans = new WeakSet();\n        };\n        this.processor = processor;\n        this.sampler = sampler;\n        this.idGenerator = idGenerator;\n        this.spanAttributesSource = spanAttributesSource;\n        this.clock = clock;\n        this.logger = logger;\n        this.spanContextStorage = spanContextStorage;\n        // this will fire immediately if the app is already backgrounded\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    startSpan(name, options) {\n        const safeStartTime = timeToNumber(this.clock, options.startTime);\n        const spanId = this.idGenerator.generate(64);\n        // if the parentContext option is not set use the current context\n        // if parentContext is explicitly null, or there is no current context,\n        // we are starting a new root span\n        const parentContext = isParentContext(options.parentContext) || options.parentContext === null\n            ? options.parentContext\n            : this.spanContextStorage.current;\n        const parentSpanId = parentContext ? parentContext.id : undefined;\n        const traceId = parentContext ? parentContext.traceId : this.idGenerator.generate(128);\n        const attributes = new SpanAttributes(new Map());\n        if (typeof options.isFirstClass === 'boolean') {\n            attributes.set('bugsnag.span.first_class', options.isFirstClass);\n        }\n        const span = new SpanInternal(spanId, traceId, name, safeStartTime, attributes, parentSpanId);\n        // don't track spans that are started while the app is backgrounded\n        if (this.isInForeground) {\n            this.openSpans.add(span);\n            if (options.makeCurrentContext !== false) {\n                this.spanContextStorage.push(span);\n            }\n        }\n        return span;\n    }\n    startNetworkSpan(options) {\n        const spanName = `[HTTP/${options.method.toUpperCase()}]`;\n        const cleanOptions = this.validateSpanOptions(spanName, options);\n        const spanInternal = this.startSpan(cleanOptions.name, Object.assign(Object.assign({}, cleanOptions.options), { makeCurrentContext: false }));\n        spanInternal.setAttribute('bugsnag.span.category', 'network');\n        spanInternal.setAttribute('http.method', options.method);\n        spanInternal.setAttribute('http.url', options.url);\n        return spanInternal;\n    }\n    configure(processor, logger) {\n        this.processor = processor;\n        this.logger = logger;\n    }\n    endSpan(span, endTime, additionalAttributes) {\n        // if the span doesn't exist here it shouldn't be processed\n        if (!this.openSpans.delete(span)) {\n            // only warn if the span has already been ended explicitly rather than\n            // discarded by us\n            if (!span.isValid()) {\n                this.logger.warn('Attempted to end a Span which has already ended.');\n            }\n            return;\n        }\n        // Discard marked spans\n        if (endTime === DISCARD_END_TIME)\n            return;\n        // Set any additional attributes\n        for (const [key, value] of Object.entries(additionalAttributes || {})) {\n            span.setAttribute(key, value);\n        }\n        this.spanAttributesSource.requestAttributes(span);\n        const spanEnded = span.end(endTime, this.sampler.spanProbability);\n        this.spanContextStorage.pop(span);\n        if (this.sampler.sample(spanEnded)) {\n            this.processor.add(spanEnded);\n        }\n    }\n    toPublicApi(span) {\n        return {\n            get id() {\n                return span.id;\n            },\n            get traceId() {\n                return span.traceId;\n            },\n            get samplingRate() {\n                return span.samplingRate;\n            },\n            isValid: () => span.isValid(),\n            end: (endTime) => {\n                const safeEndTime = timeToNumber(this.clock, endTime);\n                this.endSpan(span, safeEndTime);\n            }\n        };\n    }\n    validateSpanOptions(name, options, schema = coreSpanOptionSchema) {\n        let warnings = '';\n        const cleanOptions = {};\n        if (typeof name !== 'string') {\n            warnings += `\\n  - name should be a string, got ${typeof name}`;\n            name = String(name);\n        }\n        if (options !== undefined && !isObject(options)) {\n            warnings += '\\n  - options is not an object';\n        }\n        else {\n            const spanOptions = options || {};\n            for (const option of Object.keys(schema)) {\n                if (Object.prototype.hasOwnProperty.call(spanOptions, option) && spanOptions[option] !== undefined) {\n                    if (schema[option].validate(spanOptions[option])) {\n                        cleanOptions[option] = spanOptions[option];\n                    }\n                    else {\n                        warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof spanOptions[option]}`;\n                        cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                    }\n                }\n                else {\n                    cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                }\n            }\n        }\n        if (warnings.length > 0) {\n            this.logger.warn(`Invalid span options${warnings}`);\n        }\n        return { name, options: cleanOptions };\n    }\n}\n\nexport { DISCARD_END_TIME, SpanFactory };\n","import { BatchProcessor } from './batch-processor.js';\nimport { validateConfig } from './config.js';\nimport { TracePayloadEncoder } from './delivery.js';\nimport FixedProbabilityManager from './fixed-probability-manager.js';\nimport ProbabilityFetcher from './probability-fetcher.js';\nimport ProbabilityManager from './probability-manager.js';\nimport { BufferingProcessor } from './processor.js';\nimport Sampler from './sampler.js';\nimport { DefaultSpanContextStorage } from './span-context.js';\nimport { SpanFactory } from './span-factory.js';\nimport { timeToNumber } from './time.js';\n\nfunction createClient(options) {\n    const bufferingProcessor = new BufferingProcessor();\n    let processor = bufferingProcessor;\n    const spanContextStorage = options.spanContextStorage || new DefaultSpanContextStorage(options.backgroundingListener);\n    let logger = options.schema.logger.defaultValue;\n    const sampler = new Sampler(1.0);\n    const spanFactory = new SpanFactory(processor, sampler, options.idGenerator, options.spanAttributesSource, options.clock, options.backgroundingListener, logger, spanContextStorage);\n    const plugins = options.plugins(spanFactory, spanContextStorage);\n    return Object.assign({ start: (config) => {\n            const configuration = validateConfig(config, options.schema);\n            // Correlate errors with span by monkey patching _notify on the error client\n            // and utilizing the setTraceCorrelation method on the event\n            if (configuration.bugsnag && typeof configuration.bugsnag.Event.prototype.setTraceCorrelation === 'function' && configuration.bugsnag._client) {\n                const originalNotify = configuration.bugsnag._client._notify;\n                configuration.bugsnag._client._notify = function (...args) {\n                    const currentSpanContext = spanContextStorage.current;\n                    if (currentSpanContext && typeof args[0].setTraceCorrelation === 'function') {\n                        args[0].setTraceCorrelation(currentSpanContext.traceId, currentSpanContext.id);\n                    }\n                    originalNotify.apply(this, args);\n                };\n            }\n            const delivery = options.deliveryFactory(configuration.endpoint);\n            options.spanAttributesSource.configure(configuration);\n            const probabilityManagerPromise = configuration.samplingProbability === undefined\n                ? ProbabilityManager.create(options.persistence, sampler, new ProbabilityFetcher(delivery, configuration.apiKey))\n                : FixedProbabilityManager.create(sampler, configuration.samplingProbability);\n            probabilityManagerPromise.then((manager) => {\n                processor = new BatchProcessor(delivery, configuration, options.retryQueueFactory(delivery, configuration.retryQueueMaxSize), sampler, manager, new TracePayloadEncoder(options.clock, configuration, options.resourceAttributesSource));\n                // ensure all spans started before .start() are added to the batch\n                for (const span of bufferingProcessor.spans) {\n                    processor.add(span);\n                }\n                // register with the backgrounding listener - we do this in 'start' as\n                // there's nothing to do if we're backgrounded before start is called\n                // e.g. we can't trigger delivery until we have the apiKey and endpoint\n                // from configuration\n                options.backgroundingListener.onStateChange(state => {\n                    processor.flush();\n                    // ensure we have a fresh probability value when returning to the\n                    // foreground\n                    if (state === 'in-foreground') {\n                        manager.ensureFreshProbability();\n                    }\n                });\n                logger = configuration.logger;\n                spanFactory.configure(processor, logger);\n            });\n            for (const plugin of configuration.plugins) {\n                plugins.push(plugin);\n            }\n            for (const plugin of plugins) {\n                plugin.configure(configuration, spanFactory);\n            }\n        }, startSpan: (name, spanOptions) => {\n            const cleanOptions = spanFactory.validateSpanOptions(name, spanOptions);\n            const span = spanFactory.startSpan(cleanOptions.name, cleanOptions.options);\n            span.setAttribute('bugsnag.span.category', 'custom');\n            return spanFactory.toPublicApi(span);\n        }, startNetworkSpan: (networkSpanOptions) => {\n            const spanInternal = spanFactory.startNetworkSpan(networkSpanOptions);\n            const span = spanFactory.toPublicApi(spanInternal);\n            // Overwrite end method to set status code attribute\n            // once we release the setAttribute API we can simply return the span\n            const networkSpan = Object.assign(Object.assign({}, span), { end: (endOptions) => {\n                    spanFactory.endSpan(spanInternal, timeToNumber(options.clock, endOptions.endTime), { 'http.status_code': endOptions.status });\n                } });\n            return networkSpan;\n        }, getPlugin: (Constructor) => {\n            for (const plugin of plugins) {\n                if (plugin instanceof Constructor) {\n                    return plugin;\n                }\n            }\n        }, get currentSpanContext() {\n            return spanContextStorage.current;\n        } }, (options.platformExtensions && options.platformExtensions(spanFactory, spanContextStorage)));\n}\nfunction createNoopClient() {\n    const noop = () => { };\n    return {\n        start: noop,\n        startSpan: () => ({ id: '', traceId: '', end: noop, isValid: () => false }),\n        currentSpanContext: undefined\n    };\n}\n\nexport { createClient, createNoopClient };\n","module.exports = function pad (num, size) {\n  var s = '000000000' + num;\n  return s.substr(s.length - size);\n};\n","var pad = require('./pad.js');\n\nvar env = typeof window === 'object' ? window : self;\nvar globalCount = 0;\nfor (var prop in env) {\n  if (Object.hasOwnProperty.call(env, prop)) globalCount++;\n}\nvar mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\nvar clientId = pad((mimeTypesLength +\n  navigator.userAgent.length).toString(36) +\n  globalCount.toString(36), 4);\n\nmodule.exports = function fingerprint () {\n  return clientId;\n};\n","/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\nvar fingerprint = require('./lib/fingerprint.js');\nvar isCuid = require('./lib/is-cuid.js');\nvar pad = require('./lib/pad.js');\n\nvar c = 0,\n  blockSize = 4,\n  base = 36,\n  discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock () {\n  return pad((Math.random() *\n    discreteValues << 0)\n    .toString(base), blockSize);\n}\n\nfunction safeCounter () {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\nfunction cuid () {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c', // hard-coded allows for sequential access\n\n    // timestamp\n    // warning: this exposes the exact date and time\n    // that the uid was created.\n    timestamp = new Date().getTime().toString(base),\n\n    // Prevent same-machine collisions.\n    counter = pad(safeCounter().toString(base), blockSize),\n\n    // A few chars to generate distinct ids for different\n    // clients (so different computers are far less\n    // likely to generate the same id)\n    print = fingerprint(),\n\n    // Grab some more chars from Math.random()\n    random = randomBlock() + randomBlock();\n\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.fingerprint = fingerprint;\ncuid.isCuid = isCuid;\n\nmodule.exports = cuid;\n","/**\n * Check the provided value is a valid device id\n * @param {unknown} value\n * @returns\n */\nmodule.exports = function isCuid (value) {\n    return typeof value === 'string' && (/^c[a-z0-9]{20,32}$/).test(value);\n};\n","import cuid from '@bugsnag/cuid';\nimport { isPersistedProbability } from './validation.js';\n\nconst { isCuid } = cuid;\nclass InMemoryPersistence {\n    constructor() {\n        this.persistedItems = new Map();\n    }\n    async load(key) {\n        return this.persistedItems.get(key);\n    }\n    async save(key, value) {\n        this.persistedItems.set(key, value);\n    }\n}\nfunction toPersistedPayload(key, raw) {\n    switch (key) {\n        case 'bugsnag-sampling-probability': {\n            const json = JSON.parse(raw);\n            return isPersistedProbability(json)\n                ? json\n                : undefined;\n        }\n        case 'bugsnag-anonymous-id':\n            return isCuid(raw)\n                ? raw\n                : undefined;\n    }\n}\n\nexport { InMemoryPersistence, toPersistedPayload };\n","const msInDay = 24 * 60 * 60000;\nclass InMemoryQueue {\n    constructor(delivery, retryQueueMaxSize) {\n        this.delivery = delivery;\n        this.retryQueueMaxSize = retryQueueMaxSize;\n        this.requestQueue = Promise.resolve();\n        this.payloads = [];\n    }\n    add(payload, time) {\n        this.payloads.push({ payload, time });\n        let spanCount = this.payloads.reduce((count, { payload }) => count + countSpansInPayload(payload), 0);\n        while (spanCount > this.retryQueueMaxSize) {\n            const payload = this.payloads.shift();\n            if (!payload) {\n                break;\n            }\n            spanCount -= countSpansInPayload(payload.payload);\n        }\n    }\n    async flush() {\n        if (this.payloads.length === 0)\n            return;\n        const payloads = this.payloads;\n        this.payloads = [];\n        this.requestQueue = this.requestQueue.then(async () => {\n            for (const { payload, time } of payloads) {\n                // discard payloads at least 24 hours old\n                if (Date.now() >= time + msInDay)\n                    continue;\n                try {\n                    const { state } = await this.delivery.send(payload);\n                    switch (state) {\n                        case 'success':\n                        case 'failure-discard':\n                            break;\n                        case 'failure-retryable':\n                            this.add(payload, time);\n                            break;\n                        default:\n                            state;\n                    }\n                }\n                catch (err) { }\n            }\n        });\n        await this.requestQueue;\n    }\n}\nfunction countSpansInPayload(payload) {\n    let count = 0;\n    for (let i = 0; i < payload.body.resourceSpans.length; ++i) {\n        const scopeSpans = payload.body.resourceSpans[i].scopeSpans;\n        for (let j = 0; j < scopeSpans.length; ++j) {\n            count += scopeSpans[j].spans.length;\n        }\n    }\n    return count;\n}\n\nexport { InMemoryQueue };\n","import { responseStateFromStatusCode } from '@bugsnag/core-performance';\n\nfunction samplingProbabilityFromHeaders(headers) {\n    const value = headers.get('Bugsnag-Sampling-Probability');\n    if (typeof value !== 'string') {\n        return undefined;\n    }\n    const asNumber = Number.parseFloat(value);\n    if (Number.isNaN(asNumber) || asNumber < 0 || asNumber > 1) {\n        return undefined;\n    }\n    return asNumber;\n}\nfunction createFetchDeliveryFactory(fetch, clock, backgroundingListener) {\n    // if a backgrounding listener is supplied, set fetch's 'keepalive' flag\n    // when the app is backgrounded/terminated so that we can flush the last batch\n    // this may be required on platforms such as browser where without 'keepalive'\n    // the request may be cancelled (or never start sending) when backgrounded\n    // we don't _always_ set the flag because it imposes a 64k payload limit\n    let keepalive = false;\n    if (backgroundingListener) {\n        backgroundingListener.onStateChange(state => {\n            keepalive = state === 'in-background';\n        });\n    }\n    return function fetchDeliveryFactory(endpoint) {\n        return {\n            async send(payload) {\n                const body = JSON.stringify(payload.body);\n                payload.headers['Bugsnag-Sent-At'] = clock.date().toISOString();\n                try {\n                    const response = await fetch(endpoint, {\n                        method: 'POST',\n                        keepalive,\n                        body,\n                        headers: payload.headers\n                    });\n                    return {\n                        state: responseStateFromStatusCode(response.status),\n                        samplingProbability: samplingProbabilityFromHeaders(response.headers)\n                    };\n                }\n                catch (err) {\n                    if (body.length > 10e5) {\n                        return { state: 'failure-discard' };\n                    }\n                    return { state: 'failure-retryable' };\n                }\n            }\n        };\n    };\n}\n\nexport { createFetchDeliveryFactory as default };\n","function defaultNetworkRequestCallback(networkRequestInfo) {\n    return networkRequestInfo;\n}\nfunction isNetworkRequestCallback(value) {\n    return typeof value === 'function';\n}\n\nexport { defaultNetworkRequestCallback, isNetworkRequestCallback };\n","class RequestTracker {\n    constructor() {\n        this.callbacks = [];\n    }\n    onStart(startCallback) {\n        this.callbacks.push(startCallback);\n    }\n    start(context) {\n        const results = [];\n        for (const startCallback of this.callbacks) {\n            const result = startCallback(context);\n            if (result)\n                results.push(result);\n        }\n        return {\n            onRequestEnd: (endContext) => {\n                for (const result of results) {\n                    if (result && result.onRequestEnd) {\n                        result.onRequestEnd(endContext);\n                    }\n                }\n            },\n            extraRequestHeaders: results.map((result) => {\n                if (result && result.extraRequestHeaders) {\n                    return result.extraRequestHeaders;\n                }\n                return undefined;\n            }).filter(isDefined)\n        };\n    }\n}\nfunction isDefined(argument) {\n    return argument !== undefined;\n}\n\nexport { RequestTracker };\n","function getAbsoluteUrl(url, baseUrl) {\n    // if it looks like an absolute url do nothing\n    if (url.indexOf('https://') === 0 || url.indexOf('http://') === 0)\n        return url;\n    try {\n        const absoluteUrl = new URL(url, baseUrl).href;\n        // if a trailing slash has been added inadvertently remove it\n        if (!url.endsWith('/') && absoluteUrl.endsWith('/')) {\n            return absoluteUrl.slice(0, -1);\n        }\n        return absoluteUrl;\n    }\n    catch (_a) {\n        // not a valid URL for some reason - simply return it\n        return url;\n    }\n}\n\nexport { getAbsoluteUrl as default };\n","import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createStartContext(startTime, input, init, baseUrl) {\n    const inputIsRequest = isRequest(input);\n    const url = inputIsRequest ? input.url : String(input);\n    const method = (!!init && init.method) || (inputIsRequest && input.method) || 'GET';\n    return { url: getAbsoluteUrl(url, baseUrl), method, startTime, type: 'fetch' };\n}\nfunction isRequest(input) {\n    return !!input && typeof input === 'object' && !(input instanceof URL);\n}\nfunction isHeadersInstance(input) {\n    return !!input && typeof input === 'object' && input instanceof Headers;\n}\nfunction createFetchRequestTracker(global, clock) {\n    const requestTracker = new RequestTracker();\n    const originalFetch = global.fetch;\n    global.fetch = function fetch(input, init) {\n        const startContext = createStartContext(clock.now(), input, init, global.document && global.document.baseURI);\n        const { onRequestEnd, extraRequestHeaders } = requestTracker.start(startContext);\n        // Add the headers to the `init` received from the caller\n        const modifiedParams = mergeRequestHeaders(input, init, extraRequestHeaders);\n        return originalFetch.call(this, modifiedParams[0], modifiedParams[1]).then(response => {\n            onRequestEnd({ status: response.status, endTime: clock.now(), state: 'success' });\n            return response;\n        }).catch(error => {\n            onRequestEnd({ error, endTime: clock.now(), state: 'error' });\n            throw error;\n        });\n    };\n    return requestTracker;\n}\nfunction mergeRequestHeaders(input, init, extraRequestHeaders) {\n    if (!extraRequestHeaders)\n        return [input, init];\n    const extraHeaders = extraRequestHeaders.reduce((headers, current) => (Object.assign(Object.assign({}, headers), current)), {});\n    if (isRequest(input) && (!init || !init.headers)) {\n        mergeInputRequestHeaders(extraHeaders, input);\n    }\n    else {\n        init = mergeInitRequestHeaders(extraHeaders, init);\n    }\n    return [input, init];\n}\nfunction mergeInputRequestHeaders(extraRequestHeaders, input) {\n    for (const [name, value] of Object.entries(extraRequestHeaders)) {\n        if (!input.headers.has(name)) {\n            input.headers.set(name, value);\n        }\n    }\n}\nfunction mergeInitRequestHeaders(extraRequestHeaders, init) {\n    if (!init)\n        init = {};\n    if (isHeadersInstance(init.headers)) {\n        for (const [name, value] of Object.entries(extraRequestHeaders)) {\n            if (!init.headers.has(name)) {\n                init.headers.set(name, value);\n            }\n        }\n        return init;\n    }\n    else {\n        return Object.assign(Object.assign({}, init), { headers: Object.assign(Object.assign({}, extraRequestHeaders), init.headers) });\n    }\n}\n\nexport { createFetchRequestTracker as default };\n","import { isObject } from '@bugsnag/core-performance'\n\nexport interface SendPageAttributes {\n  referrer?: boolean\n  title?: boolean\n  url?: boolean\n}\n\nexport const defaultSendPageAttributes = {\n  referrer: true,\n  title: true,\n  url: true\n}\n\nexport function getPermittedAttributes (sendPageAttributes: SendPageAttributes) {\n  return {\n    ...defaultSendPageAttributes,\n    ...sendPageAttributes\n  }\n}\n\nexport function isSendPageAttributes (obj: unknown): obj is SendPageAttributes {\n  const allowedTypes = ['undefined', 'boolean']\n  const keys = Object.keys(defaultSendPageAttributes)\n\n  return isObject(obj) && keys.every(key => allowedTypes.includes(typeof obj[key]))\n}\n","import type { SpanContext, SpanFactory } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\nimport type { PerformanceWithTiming } from '../on-settle/load-event-end-settler'\n\ntype PageLoadPhase = 'Unload'\n| 'Redirect'\n| 'LoadFromCache'\n| 'DNSLookup'\n| 'TCPHandshake'\n| 'TLS'\n| 'HTTPRequest'\n| 'HTTPResponse'\n| 'DomContentLoadedEvent'\n| 'LoadEvent'\n\nfunction shouldOmitSpan (startTime?: number, endTime?: number): boolean {\n  return (startTime === undefined || endTime === undefined) ||\n  (startTime === 0 && endTime === 0)\n}\n\nexport const instrumentPageLoadPhaseSpans = (\n  spanFactory: SpanFactory<BrowserConfiguration>,\n  performance: PerformanceWithTiming,\n  route: string,\n  parentContext: SpanContext\n) => {\n  function createPageLoadPhaseSpan (phase: PageLoadPhase, startTime: number, endTime: number) {\n    if (shouldOmitSpan(startTime, endTime)) return\n    const span = spanFactory.startSpan(`[PageLoadPhase/${phase}]${route}`, {\n      startTime,\n      parentContext,\n      makeCurrentContext: false\n    })\n\n    span.setAttribute('bugsnag.span.category', 'page_load_phase')\n    span.setAttribute('bugsnag.phase', phase)\n    spanFactory.endSpan(span, endTime)\n  }\n\n  const entries = performance.getEntriesByType('navigation') as PerformanceNavigationTiming[]\n  const entry = Array.isArray(entries) && entries[0]\n\n  if (entry) {\n    createPageLoadPhaseSpan('Unload', entry.unloadEventStart, entry.unloadEventEnd)\n    createPageLoadPhaseSpan('Redirect', entry.redirectStart, entry.redirectEnd)\n    createPageLoadPhaseSpan('LoadFromCache', entry.fetchStart, entry.domainLookupStart)\n    createPageLoadPhaseSpan('DNSLookup', entry.domainLookupStart, entry.domainLookupEnd)\n\n    // secureConectionStart will be 0 if no secure connection is used so use connectEnd in that case\n    const TCPHandshakeEnd = entry.secureConnectionStart || entry.connectEnd\n    createPageLoadPhaseSpan('TCPHandshake', entry.connectStart, TCPHandshakeEnd)\n\n    createPageLoadPhaseSpan('TLS', entry.secureConnectionStart, entry.connectEnd)\n    createPageLoadPhaseSpan('HTTPRequest', entry.requestStart, entry.responseStart)\n    createPageLoadPhaseSpan('HTTPResponse', entry.responseStart, entry.responseEnd)\n    createPageLoadPhaseSpan('DomContentLoadedEvent', entry.domContentLoadedEventStart, entry.domContentLoadedEventEnd)\n    createPageLoadPhaseSpan('LoadEvent', entry.loadEventStart, entry.loadEventEnd)\n  }\n}\n","import type { OnSettle } from './on-settle'\nimport { getAbsoluteUrl } from '@bugsnag/request-tracker-performance'\nimport type { RouteResolver, RoutingProvider, StartRouteChangeCallback } from './routing-provider'\n\nexport const defaultRouteResolver: RouteResolver = (url: URL) => url.pathname || '/'\n\nexport const createNoopRoutingProvider = () => {\n  return class NoopRoutingProvider implements RoutingProvider {\n    resolveRoute: RouteResolver\n\n    constructor (resolveRoute = defaultRouteResolver) {\n      this.resolveRoute = resolveRoute\n    }\n\n    listenForRouteChanges (startRouteChangeSpan: StartRouteChangeCallback) {}\n  }\n}\n\nexport const createDefaultRoutingProvider = (onSettle: OnSettle, location: Location) => {\n  return class DefaultRoutingProvider implements RoutingProvider {\n    resolveRoute: RouteResolver\n\n    constructor (resolveRoute = defaultRouteResolver) {\n      this.resolveRoute = resolveRoute\n    }\n\n    listenForRouteChanges (startRouteChangeSpan: StartRouteChangeCallback) {\n      addEventListener('popstate', (ev) => {\n        const url = new URL(location.href)\n        const span = startRouteChangeSpan(url, 'popstate')\n\n        onSettle((endTime) => {\n          span.end(endTime)\n        })\n      })\n\n      const originalPushState = history.pushState\n      history.pushState = function (...args) {\n        const url = args[2]\n\n        if (url) {\n          const absoluteURL = new URL(getAbsoluteUrl(url.toString(), document.baseURI))\n          const span = startRouteChangeSpan(absoluteURL, 'pushState')\n\n          onSettle((endTime) => {\n            span.end(endTime)\n          })\n        }\n\n        originalPushState.apply(this, args)\n      }\n    }\n  }\n}\n","import type { ParentContext, BackgroundingListener, InternalConfiguration, Plugin, SpanFactory } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\nimport type { OnSettle } from '../on-settle'\nimport type { PerformanceWithTiming } from '../on-settle/load-event-end-settler'\nimport { getPermittedAttributes } from '../send-page-attributes'\nimport type { WebVitals } from '../web-vitals'\nimport { instrumentPageLoadPhaseSpans } from './page-load-phase-spans'\nimport { defaultRouteResolver } from '../default-routing-provider'\n\nexport class FullPageLoadPlugin implements Plugin<BrowserConfiguration> {\n  private readonly spanFactory: SpanFactory<BrowserConfiguration>\n  private readonly document: Document\n  private readonly location: Location\n  private readonly onSettle: OnSettle\n  private readonly webVitals: WebVitals\n  private readonly performance: PerformanceWithTiming\n\n  // if the page was backgrounded at any point in the loading process a page\n  // load span is invalidated as the browser will deprioritise the page\n  private wasBackgrounded: boolean = false\n\n  constructor (\n    document: Document,\n    location: Location,\n    spanFactory: SpanFactory<BrowserConfiguration>,\n    webVitals: WebVitals,\n    onSettle: OnSettle,\n    backgroundingListener: BackgroundingListener,\n    performance: PerformanceWithTiming\n  ) {\n    this.document = document\n    this.location = location\n    this.spanFactory = spanFactory\n    this.webVitals = webVitals\n    this.onSettle = onSettle\n    this.performance = performance\n\n    backgroundingListener.onStateChange(state => {\n      if (!this.wasBackgrounded && state === 'in-background') {\n        this.wasBackgrounded = true\n      }\n    })\n  }\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    // don't report a page load span if the option is turned off or the page was\n    // backgrounded at any point in the loading process\n    if (!configuration.autoInstrumentFullPageLoads || this.wasBackgrounded) {\n      return\n    }\n\n    let parentContext: ParentContext | null = null\n\n    const traceparentMetaTag = document.querySelector('meta[name=\"traceparent\"]')\n    if (traceparentMetaTag !== null && traceparentMetaTag.getAttribute('content')) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const traceparent = traceparentMetaTag.getAttribute('content')!\n      const [, traceId, parentSpanId] = traceparent.split('-')\n\n      parentContext = {\n        traceId,\n        id: parentSpanId\n      }\n    }\n\n    const span = this.spanFactory.startSpan('[FullPageLoad]', { startTime: 0, parentContext })\n    const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes)\n    const url = new URL(this.location.href)\n\n    this.onSettle((endTime: number) => {\n      if (this.wasBackgrounded) return\n\n      // ensure there's always a route on this span by falling back to the\n      // default route resolver - the pipeline will ignore page load spans that\n      // don't have a route\n      const route = configuration.routingProvider.resolveRoute(url) || defaultRouteResolver(url)\n      span.name += route\n\n      instrumentPageLoadPhaseSpans(this.spanFactory, this.performance, route, span)\n\n      // Browser attributes\n      span.setAttribute('bugsnag.span.category', 'full_page_load')\n      span.setAttribute('bugsnag.browser.page.route', route)\n      if (permittedAttributes.referrer) span.setAttribute('bugsnag.browser.page.referrer', this.document.referrer)\n      if (permittedAttributes.title) span.setAttribute('bugsnag.browser.page.title', this.document.title)\n      if (permittedAttributes.url) span.setAttribute('bugsnag.browser.page.url', url.toString())\n\n      this.webVitals.attachTo(span)\n      this.spanFactory.endSpan(span, endTime)\n    })\n  }\n}\n","import type { InternalConfiguration, Logger, Plugin, SpanContextStorage, SpanFactory, SpanInternal } from '@bugsnag/core-performance'\nimport {\n  defaultNetworkRequestCallback\n\n} from '@bugsnag/request-tracker-performance'\nimport type { NetworkRequestCallback, NetworkRequestInfo, RequestEndContext, RequestStartCallback, RequestStartContext, RequestTracker } from '@bugsnag/request-tracker-performance'\nimport type { BrowserConfiguration } from '../config'\n\nexport interface BrowserNetworkRequestInfo extends NetworkRequestInfo {\n  readonly type: PerformanceResourceTiming['initiatorType']\n\n  /**\n   * Experimental. Whether to propagate trace context by adding a `traceparent` header to the request.\n   */\n  propagateTraceContext?: boolean\n}\n\nconst permittedPrefixes = ['http://', 'https://', '/', './', '../']\n\nexport class NetworkRequestPlugin implements Plugin<BrowserConfiguration> {\n  private configEndpoint: string = ''\n  private networkRequestCallback: NetworkRequestCallback<BrowserNetworkRequestInfo> = defaultNetworkRequestCallback\n  private logger: Logger = { debug: console.debug, warn: console.warn, info: console.info, error: console.error }\n\n  constructor (\n    private spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly spanContextStorage: SpanContextStorage,\n    private fetchTracker: RequestTracker,\n    private xhrTracker: RequestTracker\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    this.logger = configuration.logger\n\n    if (configuration.autoInstrumentNetworkRequests) {\n      this.configEndpoint = configuration.endpoint\n      this.xhrTracker.onStart(this.trackRequest)\n      this.fetchTracker.onStart(this.trackRequest)\n      this.networkRequestCallback = configuration.networkRequestCallback\n    }\n  }\n\n  private trackRequest: RequestStartCallback = (startContext) => {\n    if (!this.shouldTrackRequest(startContext)) return\n\n    const shouldPropagateTraceContextByDefault = false\n\n    const defaultRequestInfo: BrowserNetworkRequestInfo = {\n      url: startContext.url,\n      type: startContext.type,\n      propagateTraceContext: shouldPropagateTraceContextByDefault\n    }\n\n    const networkRequestInfo = this.networkRequestCallback(defaultRequestInfo)\n\n    // returning null neither creates a span nor propagates trace context\n    if (!networkRequestInfo) {\n      return {\n        onRequestEnd: undefined,\n        extraRequestHeaders: undefined\n      }\n    }\n\n    if (networkRequestInfo.propagateTraceContext === undefined) {\n      networkRequestInfo.propagateTraceContext = shouldPropagateTraceContextByDefault\n    }\n\n    // a span is not created if url is null\n    if (!networkRequestInfo.url) {\n      return {\n        onRequestEnd: undefined,\n        // propagate trace context if requested using span context\n        extraRequestHeaders: networkRequestInfo.propagateTraceContext ? this.getExtraRequestHeaders() : undefined\n      }\n    }\n\n    // otherwise, create a span and propagate trace context if requested\n    if (typeof networkRequestInfo.url !== 'string') {\n      this.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`)\n      return\n    }\n\n    const span = this.spanFactory.startNetworkSpan({\n      method: startContext.method,\n      startTime: startContext.startTime,\n      url: networkRequestInfo.url\n    })\n\n    return {\n      onRequestEnd: (endContext: RequestEndContext) => {\n        if (endContext.state === 'success') {\n          this.spanFactory.endSpan(span, endContext.endTime, { 'http.status_code': endContext.status })\n        }\n      },\n      // propagate trace context using network span\n      extraRequestHeaders: networkRequestInfo.propagateTraceContext\n        ? this.getExtraRequestHeaders(span)\n        : undefined\n    }\n  }\n\n  private shouldTrackRequest (startContext: RequestStartContext): boolean {\n    return startContext.url !== this.configEndpoint && permittedPrefixes.some((prefix) => startContext.url.startsWith(prefix))\n  }\n\n  private getExtraRequestHeaders (span?: SpanInternal): Record<string, string> {\n    const extraRequestHeaders: Record<string, string> = {}\n\n    if (span) {\n      const traceId = span.traceId\n      const parentSpanId = span.id\n      const sampled = this.spanFactory.sampler.shouldSample(span.samplingRate)\n\n      extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled)\n    } else if (this.spanContextStorage.current) {\n      const currentSpanContext = this.spanContextStorage.current\n\n      const traceId = currentSpanContext.traceId\n      const parentSpanId = currentSpanContext.id\n      const sampled = this.spanFactory.sampler.shouldSample(currentSpanContext.samplingRate)\n\n      extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled)\n    }\n\n    return extraRequestHeaders\n  }\n}\n\nfunction buildTraceparentHeader (traceId: string, parentSpanId: string, sampled: boolean): string {\n  return `00-${traceId}-${parentSpanId}-${sampled ? '01' : '00'}`\n}\n","import type { SpanContextStorage, InternalConfiguration, Plugin, SpanFactory } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\n\ninterface ResourceTiming extends PerformanceResourceTiming {\n  responseStatus?: number // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStatus\n}\n\nexport function getHttpVersion (protocol: string) {\n  switch (protocol) {\n    case '':\n      return undefined\n    case 'http/1.0':\n      return '1.0'\n    case 'http/1.1':\n      return '1.1'\n    case 'h2':\n    case 'h2c':\n      return '2.0'\n    case 'h3':\n      return '3.0'\n    case 'spdy/1':\n    case 'spdy/2':\n    case 'spdy/3':\n      return 'SPDY'\n    default:\n      return protocol\n  }\n}\n\nfunction resourceLoadSupported (PerformanceObserverClass: typeof PerformanceObserver) {\n  return PerformanceObserverClass &&\n    Array.isArray(PerformanceObserverClass.supportedEntryTypes) &&\n    PerformanceObserverClass.supportedEntryTypes.includes('resource')\n}\n\nexport class ResourceLoadPlugin implements Plugin<BrowserConfiguration> {\n  constructor (\n    private readonly spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly spanContextStorage: SpanContextStorage,\n    private readonly PerformanceObserverClass: typeof PerformanceObserver\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    if (!resourceLoadSupported(this.PerformanceObserverClass)) return\n\n    const observer = new this.PerformanceObserverClass((list) => {\n      const entries = list.getEntries() as ResourceTiming[]\n\n      for (const entry of entries) {\n        if (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') {\n          continue\n        }\n\n        const parentContext = this.spanContextStorage.first\n\n        if (parentContext) {\n          const networkRequestInfo = configuration.networkRequestCallback({ url: entry.name, type: entry.initiatorType })\n\n          if (!networkRequestInfo) return\n\n          if (typeof networkRequestInfo.url !== 'string') {\n            configuration.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`)\n            return\n          }\n\n          let name = ''\n          try {\n            const url = new URL(networkRequestInfo.url)\n            url.search = ''\n            name = url.href\n          } catch (err) {\n            configuration.logger.warn(`Unable to parse URL returned from networkRequestCallback: ${networkRequestInfo.url}`)\n            return\n          }\n\n          const span = this.spanFactory.startSpan(`[ResourceLoad]${name}`, {\n            parentContext,\n            startTime: entry.startTime,\n            makeCurrentContext: false\n          })\n\n          span.setAttribute('bugsnag.span.category', 'resource_load')\n          span.setAttribute('http.url', networkRequestInfo.url)\n\n          const httpFlavor = getHttpVersion(entry.nextHopProtocol)\n          if (httpFlavor) {\n            span.setAttribute('http.flavor', httpFlavor)\n          }\n\n          if (entry.encodedBodySize && entry.decodedBodySize) {\n            span.setAttribute('http.response_content_length', entry.encodedBodySize)\n            span.setAttribute('http.response_content_length_uncompressed', entry.decodedBodySize)\n          }\n\n          if (entry.responseStatus) {\n            span.setAttribute('http.status_code', entry.responseStatus)\n          }\n\n          this.spanFactory.endSpan(span, entry.responseEnd)\n        }\n      }\n    })\n\n    try {\n      observer.observe({ type: 'resource', buffered: true })\n    } catch (err) {\n      configuration.logger.warn('Unable to get previous resource loads as buffered observer not supported, only showing resource loads from this point on')\n      observer.observe({ entryTypes: ['resource'] })\n    }\n  }\n}\n","import { coreSpanOptionSchema, isString, isObject } from '@bugsnag/core-performance'\nimport type { InternalConfiguration, Plugin, SpanFactory, SpanOptionSchema, Time } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\nimport type { RouteChangeSpanEndOptions, RouteChangeSpanOptions } from '../routing-provider'\nimport { getPermittedAttributes } from '../send-page-attributes'\nimport { defaultRouteResolver } from '../default-routing-provider'\n\n// exclude isFirstClass from the route change option schema\nconst { startTime, parentContext, makeCurrentContext } = coreSpanOptionSchema\nconst routeChangeSpanOptionSchema: SpanOptionSchema = {\n  startTime,\n  parentContext,\n  makeCurrentContext,\n  trigger: {\n    getDefaultValue: (value) => String(value),\n    message: 'should be a string',\n    validate: isString\n  }\n}\n\ninterface InternalRouteChangeSpanOptions extends RouteChangeSpanOptions {\n  url: URL\n  trigger: string\n}\n\nexport class RouteChangePlugin implements Plugin<BrowserConfiguration> {\n  constructor (\n    private readonly spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly location: Location,\n    private readonly document: Document\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    if (!configuration.autoInstrumentRouteChanges) return\n\n    const previousUrl = new URL(this.location.href)\n    let previousRoute = configuration.routingProvider.resolveRoute(previousUrl) || defaultRouteResolver(previousUrl)\n\n    const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes)\n\n    configuration.routingProvider.listenForRouteChanges((url, trigger, options) => {\n      let absoluteUrl\n\n      if (url instanceof URL) {\n        absoluteUrl = url\n      } else {\n        try {\n          const stringUrl = String(url)\n          absoluteUrl = new URL(stringUrl)\n        } catch (err) {\n          configuration.logger.warn('Invalid span options\\n  - url should be a URL')\n\n          return {\n            id: '',\n            traceId: '',\n            samplingRate: 0,\n            isValid: () => false,\n            end: () => {}\n          }\n        }\n      }\n\n      // create internal options for validation\n      const routeChangeSpanOptions = {\n        ...options,\n        trigger\n      }\n\n      const cleanOptions = this.spanFactory.validateSpanOptions<InternalRouteChangeSpanOptions>(\n        '[RouteChange]',\n        routeChangeSpanOptions,\n        routeChangeSpanOptionSchema\n      )\n\n      const route = configuration.routingProvider.resolveRoute(absoluteUrl) || defaultRouteResolver(absoluteUrl)\n\n      // update the span name using the validated route\n      cleanOptions.name += route\n      const span = this.spanFactory.startSpan(cleanOptions.name, cleanOptions.options)\n\n      span.setAttribute('bugsnag.span.category', 'route_change')\n      span.setAttribute('bugsnag.browser.page.route', route)\n      span.setAttribute('bugsnag.browser.page.previous_route', previousRoute)\n      span.setAttribute('bugsnag.browser.page.route_change.trigger', cleanOptions.options.trigger)\n      if (permittedAttributes.url) span.setAttribute('bugsnag.browser.page.url', url.toString())\n\n      previousRoute = route\n\n      return {\n        id: span.id,\n        traceId: span.traceId,\n        isValid: span.isValid,\n        samplingRate: span.samplingRate,\n        end: (endTimeOrOptions?: Time | RouteChangeSpanEndOptions): void => {\n          const options: RouteChangeSpanEndOptions = isObject(endTimeOrOptions) ? endTimeOrOptions : { endTime: endTimeOrOptions }\n\n          if (permittedAttributes.title) {\n            span.setAttribute('bugsnag.browser.page.title', this.document.title)\n          }\n\n          if (options.url) {\n            const urlObject = ensureUrl(options.url) // convert strings to URL if necessary\n            const route = configuration.routingProvider.resolveRoute(urlObject) || defaultRouteResolver(urlObject)\n\n            span.name = `[RouteChange]${route}`\n            span.setAttribute('bugsnag.browser.page.route', route)\n            previousRoute = route\n\n            // update the URL attribute as well\n            if (permittedAttributes.url) {\n              span.setAttribute('bugsnag.browser.page.url', urlObject.toString())\n            }\n          }\n\n          this.spanFactory.toPublicApi(span).end(options.endTime)\n        }\n\n      }\n    })\n  }\n}\n\nfunction ensureUrl (url: string | URL): URL {\n  if (typeof url === 'string') {\n    return new URL(url)\n  }\n  return url\n}\n","import { millisecondsToNanoseconds } from '@bugsnag/core-performance'\nimport type { BackgroundingListener, Clock } from '@bugsnag/core-performance'\n\n// a cut-down PerformanceTiming interface, since we don't care about most of\n// its properties\ninterface PerformanceTiming {\n  navigationStart: number\n}\n\n// the 'Performance' type says 'timeOrigin' is always available, but that's not\n// true on Safari <15 so we mark it as possibly 'undefined'\ninterface PerformanceWithOptionalTimeOrigin {\n  now: () => number\n  timeOrigin?: number\n  timing: PerformanceTiming\n}\n\n// maximum allowed clock divergence in milliseconds\nconst MAX_CLOCK_DRIFT_MS = 300000\n\nfunction recalculateTimeOrigin (timeOrigin: number, performance: PerformanceWithOptionalTimeOrigin): number {\n  // if the machine has been sleeping the monatomic clock used by performance.now() may have been paused,\n  // so we need to check if this has drifted significantly from Date.now()\n  // if the drift is > 5 minutes re-set the clock's origin to bring it back in line with Date.now()\n  if (Math.abs(Date.now() - (timeOrigin + performance.now())) > MAX_CLOCK_DRIFT_MS) {\n    return Date.now() - performance.now()\n  }\n\n  return timeOrigin\n}\n\nfunction createClock (performance: PerformanceWithOptionalTimeOrigin, backgroundingListener: BackgroundingListener): Clock {\n  const initialTimeOrigin = performance.timeOrigin === undefined\n    ? performance.timing.navigationStart\n    : performance.timeOrigin\n\n  // the performance clock could be shared between different tabs running in the same process\n  // so may already have diverged - for this reason we calculate a time origin when we first create the clock\n  // as well as when the app returns to the foreground\n  let calculatedTimeOrigin = recalculateTimeOrigin(initialTimeOrigin, performance)\n  backgroundingListener.onStateChange(state => {\n    if (state === 'in-foreground') {\n      calculatedTimeOrigin = recalculateTimeOrigin(calculatedTimeOrigin, performance)\n    }\n  })\n\n  return {\n    now: () => performance.now(),\n    date: () => new Date(calculatedTimeOrigin + performance.now()),\n    convert: (date) => date.getTime() - calculatedTimeOrigin,\n    // convert milliseconds since timeOrigin to full timestamp\n    toUnixTimestampNanoseconds: (time: number) => millisecondsToNanoseconds(calculatedTimeOrigin + time).toString()\n  }\n}\n\nexport default createClock\n","import { isObject } from '@bugsnag/core-performance'\nimport type { Time, Span, SpanOptions } from '@bugsnag/core-performance'\n\nexport type RouteChangeSpanOptions = Omit<SpanOptions, 'isFirstClass'>\nexport type StartRouteChangeCallback = (url: URL | string, trigger: string, options?: RouteChangeSpanOptions) => RouteChangeSpan\n\nexport interface RouteChangeSpanEndOptions {\n  endTime?: number | Date\n  url?: URL | string\n}\n\nexport interface RouteChangeSpan extends Span {\n  end: ((endTime?: Time) => void) & ((routeChangeSpanEndOptions: RouteChangeSpanEndOptions) => void)\n}\n\nexport interface RoutingProvider {\n  resolveRoute: (url: URL) => string\n  listenForRouteChanges: (startRouteChangeSpan: StartRouteChangeCallback) => void\n}\n\nexport type RouteResolver = (url: URL) => string\n\nexport const isRoutingProvider = (value: unknown): value is RoutingProvider =>\n  isObject(value) &&\n    typeof value.resolveRoute === 'function' &&\n    typeof value.listenForRouteChanges === 'function'\n","import type { BitLength, IdGenerator } from '@bugsnag/core-performance'\n\nfunction toHex (value: number): string {\n  const hex = value.toString(16)\n\n  // pad hex with a leading 0 if it's not already 2 characters\n  if (hex.length === 1) {\n    return '0' + hex\n  }\n\n  return hex\n}\n\nconst idGenerator: IdGenerator = {\n  generate (bits: BitLength): string {\n    const bytes = new Uint8Array(bits / 8)\n\n    // TODO: do we just read window here?\n    //       how can we pass this in given it needs to be valid before 'start' is called?\n    const randomValues = window.crypto.getRandomValues(bytes)\n\n    return Array.from(randomValues, toHex).join('')\n  }\n}\n\nexport default idGenerator\n","import type { Clock } from '@bugsnag/core-performance'\nimport type { OnSettleCallback } from '.'\n\nexport abstract class Settler {\n  protected clock: Clock\n  protected settled: boolean = false\n\n  private readonly callbacks: Set<OnSettleCallback> = new Set<OnSettleCallback>()\n\n  constructor (clock: Clock) {\n    this.clock = clock\n  }\n\n  subscribe (callback: OnSettleCallback): void {\n    this.callbacks.add(callback)\n\n    // if we're already settled, call the callback immediately\n    if (this.isSettled()) {\n      callback(this.clock.now())\n    }\n  }\n\n  unsubscribe (callback: OnSettleCallback): void {\n    this.callbacks.delete(callback)\n  }\n\n  isSettled (): boolean {\n    return this.settled\n  }\n\n  protected settle (settledTime: number): void {\n    this.settled = true\n\n    for (const callback of this.callbacks) {\n      callback(settledTime)\n    }\n  }\n}\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\nclass DomMutationSettler extends Settler {\n  private timeout: ReturnType<typeof setTimeout> | undefined = undefined\n\n  constructor (clock: Clock, target: Node) {\n    super(clock)\n\n    const observer = new MutationObserver(() => { this.restart() })\n\n    observer.observe(target, {\n      subtree: true,\n      childList: true,\n      characterData: true\n      // we don't track attribute changes as they may or may not be user visible\n      // so we assume they won't affect the page appearing settled to the user\n    })\n\n    this.restart()\n  }\n\n  private restart (): void {\n    clearTimeout(this.timeout)\n    this.settled = false\n\n    // we wait 100ms to ensure that DOM mutations have actually stopped but\n    // don't want the settled time to reflect that wait, so we record the time\n    // here and use that when settling\n    const settledTime = this.clock.now()\n\n    this.timeout = setTimeout(() => { this.settle(settledTime) }, 100)\n  }\n}\n\nexport default DomMutationSettler\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\ntype AddEventListener = (event: string, callback: () => void) => void\n\nexport interface PerformanceWithTiming {\n  getEntriesByType: typeof performance.getEntriesByType\n  timing: {\n    loadEventEnd: number\n    navigationStart: number\n  }\n}\n\ninterface DocumentWithReadyState {\n  readyState: DocumentReadyState\n}\n\n// check if a PerformanceEntry is a PerformanceNavigationTiming\nfunction isPerformanceNavigationTiming (entry?: PerformanceEntry): entry is PerformanceNavigationTiming {\n  return !!entry && entry.entryType === 'navigation'\n}\n\nclass LoadEventEndSettler extends Settler {\n  constructor (\n    clock: Clock,\n    addEventListener: AddEventListener,\n    performance: PerformanceWithTiming,\n    document: DocumentWithReadyState\n  ) {\n    super(clock)\n\n    // we delay settling by a macrotask so that the load event has ended\n    // see: https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context/25933985#25933985\n    //      https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n    if (document.readyState === 'complete') {\n      setTimeout(() => { this.settleUsingPerformance(performance) }, 0)\n    } else {\n      addEventListener('load', () => {\n        setTimeout(() => { this.settleUsingPerformance(performance) }, 0)\n      })\n    }\n  }\n\n  private settleUsingPerformance (performance: PerformanceWithTiming) {\n    const now = this.clock.now()\n\n    // there's only ever one navigation entry\n    // PLAT-10204 Prevent snags occuring due to DOM scanning bots like BuiltWith https://builtwith.com/biup\n    const entry = typeof performance.getEntriesByType === 'function' ? performance.getEntriesByType('navigation')[0] : undefined\n\n    let settledTime = 0\n\n    if (isPerformanceNavigationTiming(entry)) {\n      settledTime = entry.loadEventEnd\n    } else if (performance.timing) {\n      settledTime = performance.timing.loadEventEnd - performance.timing.navigationStart\n    }\n\n    // if the settled time is obviously wrong then use the current time instead\n    // this won't be a perfectly accurate value, but it should be close enough\n    // for this purpose\n    if (settledTime <= 0 || settledTime > now) {\n      settledTime = now\n    }\n\n    this.settle(settledTime)\n  }\n}\n\nexport default LoadEventEndSettler\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\nimport type { RequestStartContext, RequestEndContext, RequestTracker } from '@bugsnag/request-tracker-performance'\n\nclass RequestSettler extends Settler {\n  private timeout: ReturnType<typeof setTimeout> | undefined = undefined\n  private urlsToIgnore: RegExp[] = []\n  private outstandingRequests = 0\n\n  constructor (clock: Clock, requestTracker: RequestTracker) {\n    super(clock)\n\n    // unlike most other settlers we start settled as it's possible to not make\n    // any requests at all\n    // TODO: we actually should only be settled if there are no outstanding\n    //       requests when constructed\n    this.settled = true\n\n    requestTracker.onStart(this.onRequestStart.bind(this))\n  }\n\n  setUrlsToIgnore (urlsToIgnore: RegExp[]): void {\n    this.urlsToIgnore = urlsToIgnore\n  }\n\n  private onRequestStart (startContext: RequestStartContext) {\n    // if this is an excluded URL, ignore this request\n    if (this.shouldIgnoreUrl(startContext.url)) return\n\n    clearTimeout(this.timeout)\n    this.settled = false\n    ++this.outstandingRequests\n\n    return {\n      onRequestEnd: (endContext: RequestEndContext): void => {\n        if (--this.outstandingRequests === 0) {\n          // we wait 100ms to ensure that requests have actually stopped but don't\n          // want the settled time to reflect that wait, so we record the time\n          // here and use that when settling\n          const settledTime = this.clock.now()\n\n          this.timeout = setTimeout(() => { this.settle(settledTime) }, 100)\n        }\n      }\n    }\n  }\n\n  private shouldIgnoreUrl (url: string): boolean {\n    return this.urlsToIgnore.some(regexp => regexp.test(url))\n  }\n}\n\nexport default RequestSettler\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\n/**\n * SettlerAggregate is a Settler that is settled when ALL Settlers it is\n * constructed with are settled themselves\n */\nclass SettlerAggregate extends Settler {\n  private readonly settlers: Settler[]\n\n  constructor (clock: Clock, settlers: Settler[]) {\n    super(clock)\n    this.settlers = settlers\n\n    for (const settler of settlers) {\n      settler.subscribe((settledTime: number) => {\n        // we need to check if all of the settlers are settled here as a\n        // previously settled settler could have unsettled in the meantime\n        if (this.settlersAreSettled()) {\n          this.settle(settledTime)\n        } else {\n          this.settled = false\n        }\n      })\n    }\n  }\n\n  isSettled () {\n    // ensure all child settlers are settled as well; it's possible for all of\n    // them to have settled previously only for one to unsettle\n    return super.isSettled() && this.settlersAreSettled()\n  }\n\n  private settlersAreSettled (): boolean {\n    for (const settler of this.settlers) {\n      if (!settler.isSettled()) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nexport default SettlerAggregate\n","import {\n  InMemoryPersistence,\n  toPersistedPayload\n\n} from '@bugsnag/core-performance'\nimport type { Persistence, PersistenceKey, PersistencePayloadMap } from '@bugsnag/core-performance'\n\ninterface LocalStorage {\n  setItem: (key: string, value: string) => void\n  getItem: (key: string) => string | null\n}\n\ninterface WindowWithLocalStorage {\n  localStorage?: LocalStorage\n}\n\nfunction makeBrowserPersistence (window: WindowWithLocalStorage): Persistence {\n  // accessing localStorage can throw on some browsers, so we have to catch\n  // these errors and provide a fallback\n  try {\n    if (window.localStorage) {\n      return new BrowserPersistence(window.localStorage)\n    }\n  } catch {}\n\n  // store items in memory if localStorage isn't available\n  return new InMemoryPersistence()\n}\n\nfunction toString<K extends PersistenceKey> (key: K, value: PersistencePayloadMap[K]): string {\n  switch (key) {\n    case 'bugsnag-sampling-probability':\n      return JSON.stringify(value)\n\n    case 'bugsnag-anonymous-id':\n      return value as string\n\n    default:\n      key satisfies never\n      return key\n  }\n}\n\nclass BrowserPersistence implements Persistence {\n  private readonly storage: LocalStorage\n\n  constructor (localStorage: LocalStorage) {\n    this.storage = localStorage\n  }\n\n  async load<K extends PersistenceKey> (key: K): Promise<PersistencePayloadMap[K] | undefined> {\n    try {\n      const raw = this.storage.getItem(key)\n\n      if (raw) {\n        return toPersistedPayload(key, raw)\n      }\n    } catch {}\n  }\n\n  async save<K extends PersistenceKey> (key: K, value: PersistencePayloadMap[K]): Promise<void> {\n    try {\n      this.storage.setItem(key, toString(key, value))\n    } catch {}\n  }\n}\n\nexport default makeBrowserPersistence\n","import type { Clock, SpanInternal } from '@bugsnag/core-performance'\n\ninterface PerformanceWithNavigationTiming {\n  getEntriesByName: typeof performance.getEntriesByName\n  getEntriesByType: typeof performance.getEntriesByType\n  timing: {\n    responseStart: number\n    navigationStart: number\n  }\n}\n\n// layout shifts are grouped into \"session windows\", which is defined as a set\n// of layout shifts that occur with less than 1 second between each shift and a\n// maximum of 5 seconds total duration\n// see the web vitals definition:\n// https://web.dev/evolving-cls/#why-a-session-window\ninterface LayoutShiftSession {\n  value: number\n  readonly firstStartTime: number\n  previousStartTime: number\n}\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\ninterface LayoutShift extends PerformanceEntry {\n  entryType: 'layout-shift'\n  value: number\n  hadRecentInput: boolean\n  lastInputTime: number\n}\n\nexport class WebVitals {\n  private readonly performance: PerformanceWithNavigationTiming\n  private readonly clock: Clock\n  private readonly observers: PerformanceObserver[]\n\n  private largestContentfulPaint: number | undefined\n  private cumulativeLayoutShift: number | undefined\n\n  constructor (\n    performance: PerformanceWithNavigationTiming,\n    clock: Clock,\n    PerformanceObserverClass?: typeof PerformanceObserver\n  ) {\n    this.performance = performance\n    this.clock = clock\n    this.observers = []\n\n    if (PerformanceObserverClass && Array.isArray(PerformanceObserverClass.supportedEntryTypes)) {\n      const supportedEntryTypes = PerformanceObserverClass.supportedEntryTypes\n\n      if (supportedEntryTypes.includes('largest-contentful-paint')) {\n        this.observeLargestContentfulPaint(PerformanceObserverClass)\n      }\n\n      if (supportedEntryTypes.includes('layout-shift')) {\n        this.observeLayoutShift(PerformanceObserverClass)\n      }\n    }\n  }\n\n  attachTo (span: SpanInternal) {\n    const firstContentfulPaint = this.firstContentfulPaint()\n\n    if (firstContentfulPaint) {\n      span.addEvent('fcp', firstContentfulPaint)\n    }\n\n    const timeToFirstByte = this.timeToFirstByte()\n\n    if (timeToFirstByte) {\n      span.addEvent('ttfb', timeToFirstByte)\n    }\n\n    const firstInputDelay = this.firstInputDelay()\n\n    if (firstInputDelay) {\n      span.addEvent('fid_start', firstInputDelay.start)\n      span.addEvent('fid_end', firstInputDelay.end)\n    }\n\n    if (this.cumulativeLayoutShift) {\n      span.setAttribute('bugsnag.metrics.cls', this.cumulativeLayoutShift)\n    }\n\n    if (this.largestContentfulPaint) {\n      span.addEvent('lcp', this.largestContentfulPaint)\n    }\n\n    // as there is only 1 page load span, we don't need to keep observing\n    // performance events, so can disconnect from any observers we've registered\n    for (const observer of this.observers) {\n      observer.disconnect()\n    }\n  }\n\n  private firstContentfulPaint () {\n    const entries = this.performance.getEntriesByName('first-contentful-paint', 'paint')\n    const entry = Array.isArray(entries) && entries[0]\n\n    if (entry) {\n      return entry.startTime\n    }\n  }\n\n  private timeToFirstByte () {\n    const entries = this.performance.getEntriesByType('navigation') as PerformanceNavigationTiming[]\n    const entry = Array.isArray(entries) && entries[0]\n\n    let responseStart: number\n\n    if (entry) {\n      responseStart = entry.responseStart\n    } else {\n      responseStart = this.performance.timing.responseStart - this.performance.timing.navigationStart\n    }\n\n    // only use responseStart if it's valid (between 0 and the current time)\n    // any other value cannot be valid because it would mean the response\n    // started immediately or hasn't happened yet!\n    if (responseStart > 0 && responseStart <= this.clock.now()) {\n      return responseStart\n    }\n  }\n\n  private firstInputDelay () {\n    const entries = this.performance.getEntriesByType('first-input') as PerformanceEventTiming[]\n    const entry = Array.isArray(entries) && entries[0]\n\n    if (entry) {\n      return {\n        start: entry.startTime,\n        end: entry.processingStart\n      }\n    }\n  }\n\n  private observeLargestContentfulPaint (\n    PerformanceObserverClass: typeof PerformanceObserver\n  ): void {\n    const observer = new PerformanceObserverClass((list) => {\n      const entries = list.getEntries()\n\n      if (entries.length > 0) {\n        // Use the latest LCP candidate\n        this.largestContentfulPaint = entries[entries.length - 1].startTime\n      }\n    })\n\n    observer.observe({ type: 'largest-contentful-paint', buffered: true })\n\n    this.observers.push(observer)\n  }\n\n  private observeLayoutShift (\n    PerformanceObserverClass: typeof PerformanceObserver\n  ): void {\n    let session: LayoutShiftSession | undefined\n\n    const observer = new PerformanceObserverClass((list) => {\n      for (const entry of list.getEntries() as LayoutShift[]) {\n        // ignore entries with recent input as it's likely the layout shifted due\n        // to user input and this metric only cares about unexpected layout\n        // shifts\n        if (entry.hadRecentInput) {\n          continue\n        }\n\n        // include this entry in the current session if we have a current session\n        // and this entry fits into the session window (it occurred less than 1\n        // second after the previous entry and the session duration is less than\n        // 5 seconds), otherwise start a new session\n        if (\n          session &&\n          entry.startTime - session.previousStartTime < 1000 &&\n          entry.startTime - session.firstStartTime < 5000\n        ) {\n          session.value += entry.value\n          session.previousStartTime = entry.startTime\n        } else {\n          session = {\n            value: entry.value,\n            firstStartTime: entry.startTime,\n            previousStartTime: entry.startTime\n          }\n        }\n      }\n\n      if (session &&\n        (this.cumulativeLayoutShift === undefined || session.value > this.cumulativeLayoutShift)\n      ) {\n        this.cumulativeLayoutShift = session.value\n      }\n    })\n\n    observer.observe({ type: 'layout-shift', buffered: true })\n\n    this.observers.push(observer)\n  }\n}\n","import { createClient, createNoopClient, InMemoryQueue } from '@bugsnag/core-performance'\nimport type { Client } from '@bugsnag/core-performance'\nimport createFetchDeliveryFactory from '@bugsnag/delivery-fetch-performance'\nimport { createFetchRequestTracker, createXmlHttpRequestTracker } from '@bugsnag/request-tracker-performance'\nimport { FullPageLoadPlugin, NetworkRequestPlugin, ResourceLoadPlugin, RouteChangePlugin } from './auto-instrumentation'\nimport createBrowserBackgroundingListener from './backgrounding-listener'\nimport createClock from './clock'\nimport { createSchema } from './config'\nimport type { BrowserConfiguration } from './config'\nimport { createDefaultRoutingProvider, createNoopRoutingProvider } from './default-routing-provider'\nimport idGenerator from './id-generator'\nimport createOnSettle, { createNoopOnSettle } from './on-settle'\nimport type { OnSettlePlugin } from './on-settle'\nimport makeBrowserPersistence from './persistence'\nimport createResourceAttributesSource from './resource-attributes-source'\nimport createSpanAttributesSource from './span-attributes-source'\nimport { WebVitals } from './web-vitals'\n\nexport let onSettle: OnSettlePlugin\nexport let DefaultRoutingProvider: ReturnType<typeof createDefaultRoutingProvider>\nlet BugsnagPerformance: Client<BrowserConfiguration>\n\nif (typeof window === 'undefined' || typeof document === 'undefined') {\n  onSettle = createNoopOnSettle()\n  DefaultRoutingProvider = createNoopRoutingProvider()\n  BugsnagPerformance = createNoopClient()\n} else {\n  const backgroundingListener = createBrowserBackgroundingListener(window)\n  const spanAttributesSource = createSpanAttributesSource(document)\n  const clock = createClock(performance, backgroundingListener)\n  const persistence = makeBrowserPersistence(window)\n  const resourceAttributesSource = createResourceAttributesSource(navigator, persistence)\n  const fetchRequestTracker = createFetchRequestTracker(window, clock)\n  const xhrRequestTracker = createXmlHttpRequestTracker(XMLHttpRequest, clock, document)\n  const webVitals = new WebVitals(performance, clock, window.PerformanceObserver)\n  onSettle = createOnSettle(\n    clock,\n    window,\n    fetchRequestTracker,\n    xhrRequestTracker,\n    performance\n  )\n  DefaultRoutingProvider = createDefaultRoutingProvider(onSettle, window.location)\n\n  BugsnagPerformance = createClient({\n    backgroundingListener,\n    clock,\n    resourceAttributesSource,\n    spanAttributesSource,\n    deliveryFactory: createFetchDeliveryFactory(window.fetch, clock, backgroundingListener),\n    idGenerator,\n    schema: createSchema(window.location.hostname, new DefaultRoutingProvider()),\n    plugins: (spanFactory, spanContextStorage) => [\n      onSettle,\n      new FullPageLoadPlugin(\n        document,\n        window.location,\n        spanFactory,\n        webVitals,\n        onSettle,\n        backgroundingListener,\n        performance\n      ),\n      // ResourceLoadPlugin should always come after FullPageLoad plugin, as it should use that\n      // span context as the parent of it's spans\n      new ResourceLoadPlugin(spanFactory, spanContextStorage, window.PerformanceObserver),\n      new NetworkRequestPlugin(spanFactory, spanContextStorage, fetchRequestTracker, xhrRequestTracker),\n      new RouteChangePlugin(spanFactory, window.location, document)\n    ],\n    persistence,\n    retryQueueFactory: (delivery, retryQueueMaxSize) => new InMemoryQueue(delivery, retryQueueMaxSize)\n  })\n}\n\nexport default BugsnagPerformance\n","import DomMutationSettler from './dom-mutation-settler'\nimport LoadEventEndSettler from './load-event-end-settler'\nimport type { PerformanceWithTiming } from './load-event-end-settler'\nimport RequestSettler from './request-settler'\nimport SettlerAggregate from './settler-aggregate'\nimport type { BrowserConfiguration } from '../config'\nimport type { RequestTracker } from '@bugsnag/request-tracker-performance'\nimport type { Clock, InternalConfiguration, Plugin } from '@bugsnag/core-performance'\n\nexport type OnSettle = (callback: OnSettleCallback) => void\nexport type OnSettleCallback = (settledTime: number) => void\nexport type OnSettlePlugin = Plugin<BrowserConfiguration> & OnSettle\n\nconst TIMEOUT_MILLISECONDS = 60 * 1000\n\nexport function createNoopOnSettle (): OnSettlePlugin {\n  const noop = () => {}\n  noop.configure = () => {}\n  return noop as OnSettlePlugin\n}\n\nexport default function createOnSettle (\n  clock: Clock,\n  window: Window,\n  fetchRequestTracker: RequestTracker,\n  xhrRequestTracker: RequestTracker,\n  performance: PerformanceWithTiming\n): OnSettlePlugin {\n  const domMutationSettler = new DomMutationSettler(clock, window.document)\n  const fetchRequestSettler = new RequestSettler(clock, fetchRequestTracker)\n  const xhrRequestSettler = new RequestSettler(clock, xhrRequestTracker)\n  const loadEventEndSettler = new LoadEventEndSettler(\n    clock,\n    window.addEventListener,\n    performance,\n    window.document\n  )\n\n  const settler = new SettlerAggregate(clock, [\n    domMutationSettler,\n    loadEventEndSettler,\n    fetchRequestSettler,\n    xhrRequestSettler\n  ])\n\n  function onSettlePlugin (callback: OnSettleCallback): void {\n    const onSettle: OnSettleCallback = (settledTime: number) => {\n      clearTimeout(timeout)\n\n      // unsubscribe from the settler so we don't call the callback more than\n      // once\n      settler.unsubscribe(onSettle)\n\n      callback(settledTime)\n    }\n\n    const timeout = setTimeout(() => {\n      const settledTime = clock.now()\n\n      settler.unsubscribe(onSettle)\n\n      callback(settledTime)\n    }, TIMEOUT_MILLISECONDS)\n\n    // if we're already settled apply a 100ms \"cooldown\" period in case we\n    // unsettle immediately after this call\n    // if we're not settled then this cooldown is irrelevant - we can just\n    // subscribe to the settler to be notified of when the page settles\n    const cooldown = settler.isSettled() ? 100 : 0\n    const settledTime = clock.now()\n\n    setTimeout(() => {\n      if (settler.isSettled()) {\n        // if we're still settled call the callback via \"onSettle\"\n        onSettle(settledTime)\n      } else {\n        // otherwise wait for the page to settle\n        settler.subscribe(onSettle)\n      }\n    }, cooldown)\n  }\n\n  onSettlePlugin.configure = function (configuration: InternalConfiguration<BrowserConfiguration>): void {\n    const settleIgnoreUrls = configuration.settleIgnoreUrls.map(\n      (url: string | RegExp): RegExp => typeof url === 'string' ? RegExp(url) : url\n    ).concat(RegExp(configuration.endpoint))\n\n    fetchRequestSettler.setUrlsToIgnore(settleIgnoreUrls)\n    xhrRequestSettler.setUrlsToIgnore(settleIgnoreUrls)\n  }\n\n  return onSettlePlugin\n}\n","import type { BackgroundingListener, BackgroundingListenerCallback, BackgroundingListenerState } from '@bugsnag/core-performance'\n\ninterface DocumentForVisibilityState {\n  addEventListener: (event: string, callback: () => void) => void\n  visibilityState: string\n}\n\ninterface WindowWithDocumentForVisibilityState {\n  document: DocumentForVisibilityState\n  addEventListener: (event: string, callback: () => void) => void\n}\n\nexport default function createBrowserBackgroundingListener (window: WindowWithDocumentForVisibilityState) {\n  const callbacks: BackgroundingListenerCallback[] = []\n  let state: BackgroundingListenerState = window.document.visibilityState === 'hidden'\n    ? 'in-background'\n    : 'in-foreground'\n\n  const backgroundingListener: BackgroundingListener = {\n    onStateChange (backgroundingListenerCallback: BackgroundingListenerCallback): void {\n      callbacks.push(backgroundingListenerCallback)\n\n      // trigger the callback immediately if the document is already 'hidden'\n      if (state === 'in-background') {\n        backgroundingListenerCallback(state)\n      }\n    }\n  }\n\n  const backgroundStateChanged = (newState: BackgroundingListenerState) => {\n    if (state === newState) return\n\n    state = newState\n    for (const callback of callbacks) {\n      callback(state)\n    }\n  }\n\n  window.document.addEventListener('visibilitychange', function () {\n    const newState = window.document.visibilityState === 'hidden'\n      ? 'in-background'\n      : 'in-foreground'\n\n    backgroundStateChanged(newState)\n  })\n\n  // some browsers don't fire the visibilitychange event when the page is suspended,\n  // so we also listen for pagehide and pageshow events\n  window.addEventListener('pagehide', function () {\n    backgroundStateChanged('in-background')\n  })\n\n  window.addEventListener('pageshow', function () {\n    backgroundStateChanged('in-foreground')\n  })\n\n  return backgroundingListener\n}\n","import type { InternalConfiguration, SpanAttributesSource, SpanInternal } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from './config'\n\nexport const createSpanAttributesSource = (document: Document): SpanAttributesSource<BrowserConfiguration> => {\n  const defaultAttributes = {\n    url: {\n      name: 'bugsnag.browser.page.url',\n      getValue: () => document.location.href,\n      permitted: false\n    },\n    title: {\n      name: 'bugsnag.browser.page.title',\n      getValue: () => document.title,\n      permitted: false\n    }\n  }\n\n  return {\n    configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n      defaultAttributes.title.permitted = configuration.sendPageAttributes.title || false\n      defaultAttributes.url.permitted = configuration.sendPageAttributes.url || false\n    },\n    requestAttributes (span: SpanInternal) {\n      for (const attribute of Object.values(defaultAttributes)) {\n        if (attribute.permitted) {\n          span.setAttribute(attribute.name, attribute.getValue())\n        }\n      }\n    }\n  }\n}\n\nexport default createSpanAttributesSource\n","import cuid from '@bugsnag/cuid'\nimport { ResourceAttributes } from '@bugsnag/core-performance'\nimport type { Persistence, ResourceAttributeSource } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from './config'\n\nfunction createResourceAttributesSource (\n  navigator: Navigator,\n  persistence: Persistence\n): ResourceAttributeSource<BrowserConfiguration> {\n  let getDeviceId: Promise<string> | undefined\n  let deviceId: string | undefined\n\n  return function resourceAttributesSource (config) {\n    const attributes = new ResourceAttributes(\n      config.releaseStage,\n      config.appVersion,\n      config.serviceName,\n      'bugsnag.performance.browser',\n      '__VERSION__'\n    )\n\n    attributes.set('browser.user_agent', navigator.userAgent)\n\n    // chromium only\n    if (navigator.userAgentData) {\n      attributes.set('browser.platform', navigator.userAgentData.platform)\n      attributes.set('browser.mobile', navigator.userAgentData.mobile)\n    }\n\n    if (config.generateAnonymousId) {\n      // ensure we only load/generate the anonymous ID once no matter how many\n      // times we're called, otherwise we could generate different IDs on\n      // different calls as cuids are partly time based\n      if (!getDeviceId) {\n        getDeviceId = persistence.load('bugsnag-anonymous-id')\n          .then(maybeAnonymousId => {\n            // use the persisted value or generate a new ID\n            const anonymousId = maybeAnonymousId || cuid()\n\n            // if there was no persisted value, save the newly generated ID\n            if (!maybeAnonymousId) {\n              persistence.save('bugsnag-anonymous-id', anonymousId)\n            }\n\n            // store the device ID so we can set it synchronously in future\n            deviceId = anonymousId\n\n            return deviceId\n          })\n      }\n\n      if (deviceId) {\n        // set device ID synchronously if it's already available\n        attributes.set('device.id', deviceId)\n      } else {\n        // otherwise add it when the promise resolves\n        return getDeviceId\n          .then(deviceId => {\n            attributes.set('device.id', deviceId)\n\n            return attributes\n          })\n      }\n    }\n\n    return Promise.resolve(attributes)\n  }\n}\n\nexport default createResourceAttributesSource\n","import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createXmlHttpRequestTracker(xhr, clock, document) {\n    const requestTracker = new RequestTracker();\n    const trackedRequests = new WeakMap();\n    const requestHandlers = new WeakMap();\n    const originalOpen = xhr.prototype.open;\n    xhr.prototype.open = function open(method, url, ...rest) {\n        trackedRequests.set(this, { method, url: getAbsoluteUrl(String(url), document && document.baseURI) });\n        // @ts-expect-error rest\n        originalOpen.call(this, method, url, ...rest);\n    };\n    const originalSend = xhr.prototype.send;\n    xhr.prototype.send = function send(body) {\n        const requestData = trackedRequests.get(this);\n        if (requestData) {\n            // if there is an existing event listener this request instance is being reused,\n            // so we need to remove the listener from the previous send\n            const existingHandler = requestHandlers.get(this);\n            if (existingHandler)\n                this.removeEventListener('readystatechange', existingHandler);\n            const { onRequestEnd, extraRequestHeaders } = requestTracker.start({\n                type: 'xmlhttprequest',\n                method: requestData.method,\n                url: requestData.url,\n                startTime: clock.now()\n            });\n            if (extraRequestHeaders) {\n                for (const extraHeaders of extraRequestHeaders) {\n                    for (const [name, value] of Object.entries(extraHeaders)) {\n                        this.setRequestHeader(name, value);\n                    }\n                }\n            }\n            const onReadyStateChange = (evt) => {\n                if (this.readyState === xhr.DONE && onRequestEnd) {\n                    // If the status is 0 the request did not complete so report this as an error\n                    const endContext = this.status > 0\n                        ? { endTime: clock.now(), status: this.status, state: 'success' }\n                        : { endTime: clock.now(), state: 'error' };\n                    onRequestEnd(endContext);\n                }\n            };\n            this.addEventListener('readystatechange', onReadyStateChange);\n            requestHandlers.set(this, onReadyStateChange);\n        }\n        originalSend.call(this, body);\n    };\n    return requestTracker;\n}\n\nexport { createXmlHttpRequestTracker as default };\n","import {\n  isBoolean,\n  isStringWithLength,\n  isStringOrRegExpArray,\n  schema\n} from '@bugsnag/core-performance'\nimport type { ConfigOption, Configuration, CoreSchema } from '@bugsnag/core-performance'\nimport { defaultNetworkRequestCallback, isNetworkRequestCallback } from '@bugsnag/request-tracker-performance'\nimport type { NetworkRequestCallback } from '@bugsnag/request-tracker-performance'\nimport type { BrowserNetworkRequestInfo } from './auto-instrumentation'\nimport { isRoutingProvider } from './routing-provider'\nimport type { RoutingProvider } from './routing-provider'\nimport { defaultSendPageAttributes, isSendPageAttributes } from './send-page-attributes'\nimport type { SendPageAttributes } from './send-page-attributes'\n\nexport interface BrowserSchema extends CoreSchema {\n  autoInstrumentFullPageLoads: ConfigOption<boolean>\n  autoInstrumentNetworkRequests: ConfigOption<boolean>\n  autoInstrumentRouteChanges: ConfigOption<boolean>\n  generateAnonymousId: ConfigOption<boolean>\n  routingProvider: ConfigOption<RoutingProvider>\n  settleIgnoreUrls: ConfigOption<Array<string | RegExp>>\n  networkRequestCallback: ConfigOption<NetworkRequestCallback<BrowserNetworkRequestInfo>>\n  sendPageAttributes: ConfigOption<SendPageAttributes>\n  serviceName: ConfigOption<string>\n}\n\nexport interface BrowserConfiguration extends Configuration {\n  autoInstrumentFullPageLoads?: boolean\n  autoInstrumentNetworkRequests?: boolean\n  autoInstrumentRouteChanges?: boolean\n  generateAnonymousId?: boolean\n  routingProvider?: RoutingProvider\n  settleIgnoreUrls?: Array<string | RegExp>\n  networkRequestCallback?: NetworkRequestCallback<BrowserNetworkRequestInfo>\n  sendPageAttributes?: SendPageAttributes\n  serviceName?: string\n}\n\nexport function createSchema (hostname: string, defaultRoutingProvider: RoutingProvider): BrowserSchema {\n  return {\n    ...schema,\n    releaseStage: {\n      ...schema.releaseStage,\n      defaultValue: hostname === 'localhost' ? 'development' : 'production'\n    },\n    autoInstrumentFullPageLoads: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    autoInstrumentNetworkRequests: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    autoInstrumentRouteChanges: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    generateAnonymousId: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    routingProvider: {\n      defaultValue: defaultRoutingProvider,\n      message: 'should be a routing provider',\n      validate: isRoutingProvider\n    },\n    settleIgnoreUrls: {\n      defaultValue: [],\n      message: 'should be an array of string|RegExp',\n      validate: isStringOrRegExpArray\n    },\n    networkRequestCallback: {\n      defaultValue: defaultNetworkRequestCallback,\n      message: 'should be a function',\n      validate: isNetworkRequestCallback\n    },\n    sendPageAttributes: {\n      defaultValue: defaultSendPageAttributes,\n      message: 'should be an object',\n      validate: isSendPageAttributes\n    },\n    serviceName: {\n      defaultValue: 'unknown_service',\n      message: 'should be a string',\n      validate: isStringWithLength\n    }\n  }\n}\n"],"names":["isBoolean","value","isObject","Array","isArray","isNumber","Number","isFinite","isNaN","isString","isStringWithLength","length","isStringOrRegExpArray","every","item","RegExp","SpanAttributes","constructor","initialValues","this","attributes","set","name","remove","delete","toJson","from","map","key","attribute","isInteger","intValue","doubleValue","boolValue","stringValue","attributeToJson","ResourceAttributes","releaseStage","appVersion","serviceName","sdkName","sdkVersion","Map","super","NANOSECONDS_IN_MILLISECONDS","schema","defaultValue","message","validate","endpoint","apiKey","test","logger","debug","console","info","warn","error","enabledReleaseStages","isStringArray","plugins","plugin","configure","isPlugin","bugsnag","undefined","addOnError","samplingProbability","BatchProcessor","delivery","configuration","retryQueue","sampler","probabilityManager","encoder","spans","timeout","flushQueue","Promise","resolve","flush","bind","stop","clearTimeout","start","setTimeout","batchInactivityTimeoutMs","add","span","includes","push","maximumBatchSize","then","async","batch","prepareBatch","payload","encode","batchTime","Date","now","response","send","setProbability","state","err","ensureFreshProbability","probability","spanProbability","raw","sample","SpanEvents","events","time","clock","timeUnixNano","toUnixTimestampNanoseconds","SpanInternal","id","traceId","startTime","parentSpanId","kind","samplingRate","i","position","parseInt","slice","traceIdToSamplingRate","addEvent","setAttribute","end","endTime","_samplingProbability","isValid","coreSpanOptionSchema","getDefaultValue","parentContext","isSpanContext","makeCurrentContext","isFirstClass","TracePayloadEncoder","resourceAttributeSource","resourceAttributes","jsonSpans","spanId","startTimeUnixNano","endTimeUnixNano","body","resourceSpans","resource","scopeSpans","headers","Object","assign","generateSamplingHeader","spanCounts","create","existingValue","rawProbabilities","keys","pairs","rawProbability","join","retryCodes","Set","FixedProbabilityManager","newProbability","ProbabilityFetcher","getNewProbability","timeBetweenRetries","PROBABILITY_REFRESH_MILLISECONDS","ProbabilityManager","persistence","probabilityFetcher","persistedProbability","load","initialProbabilityTime","outstandingFreshnessCheck","lastProbabilityTime","save","BufferingProcessor","scaleProbabilityToMatchSamplingRate","Math","floor","Sampler","initialProbability","_probability","scaledProbability","scaled","shouldSample","DefaultSpanContextStorage","backgroundingListener","contextStack","isInForeground","onBackgroundStateChange","onStateChange","Symbol","iterator","context","pop","span1","span2","current","removeClosedContexts","first","timeToNumber","convert","SpanFactory","processor","idGenerator","spanAttributesSource","spanContextStorage","openSpans","WeakSet","startSpan","options","safeStartTime","generate","startNetworkSpan","spanName","method","toUpperCase","cleanOptions","validateSpanOptions","spanInternal","url","endSpan","additionalAttributes","entries","requestAttributes","spanEnded","toPublicApi","safeEndTime","warnings","String","spanOptions","option","prototype","hasOwnProperty","call","getDefaultExportFromCjs","x","pad","num","size","s","substr","require$$0","env","window","self","globalCount","prop","clientId","navigator","mimeTypes","userAgent","toString","fingerprint","isCuid","require$$2","c","blockSize","base","discreteValues","pow","randomBlock","random","cuid","getTime","InMemoryPersistence","persistedItems","get","toPersistedPayload","json","JSON","parse","InMemoryQueue","retryQueueMaxSize","requestQueue","payloads","spanCount","reduce","count","countSpansInPayload","shift","j","samplingProbabilityFromHeaders","asNumber","parseFloat","defaultNetworkRequestCallback","networkRequestInfo","isNetworkRequestCallback","RequestTracker","callbacks","onStart","startCallback","results","result","onRequestEnd","endContext","extraRequestHeaders","filter","isDefined","argument","getAbsoluteUrl","baseUrl","indexOf","absoluteUrl","URL","href","endsWith","_a","isRequest","input","defaultSendPageAttributes","referrer","title","getPermittedAttributes","sendPageAttributes","isSendPageAttributes","obj","allowedTypes","defaultRouteResolver","pathname","createNoopRoutingProvider","resolveRoute","listenForRouteChanges","startRouteChangeSpan","createDefaultRoutingProvider","onSettle","location","addEventListener","ev","originalPushState","history","pushState","args","absoluteURL","document","baseURI","apply","FullPageLoadPlugin","spanFactory","webVitals","performance","wasBackgrounded","autoInstrumentFullPageLoads","traceparentMetaTag","querySelector","getAttribute","traceparent","split","permittedAttributes","route","routingProvider","createPageLoadPhaseSpan","phase","shouldOmitSpan","getEntriesByType","entry","unloadEventStart","unloadEventEnd","redirectStart","redirectEnd","fetchStart","domainLookupStart","domainLookupEnd","TCPHandshakeEnd","secureConnectionStart","connectEnd","connectStart","requestStart","responseStart","responseEnd","domContentLoadedEventStart","domContentLoadedEventEnd","loadEventStart","loadEventEnd","instrumentPageLoadPhaseSpans","attachTo","permittedPrefixes","NetworkRequestPlugin","fetchTracker","xhrTracker","configEndpoint","networkRequestCallback","trackRequest","startContext","shouldTrackRequest","defaultRequestInfo","type","propagateTraceContext","getExtraRequestHeaders","status","autoInstrumentNetworkRequests","some","prefix","startsWith","sampled","buildTraceparentHeader","currentSpanContext","getHttpVersion","protocol","ResourceLoadPlugin","PerformanceObserverClass","supportedEntryTypes","observer","list","getEntries","initiatorType","search","httpFlavor","nextHopProtocol","encodedBodySize","decodedBodySize","responseStatus","observe","buffered","entryTypes","routeChangeSpanOptionSchema","trigger","RouteChangePlugin","autoInstrumentRouteChanges","previousUrl","previousRoute","stringUrl","routeChangeSpanOptions","endTimeOrOptions","urlObject","ensureUrl","MAX_CLOCK_DRIFT_MS","recalculateTimeOrigin","timeOrigin","abs","isRoutingProvider","toHex","hex","bits","bytes","Uint8Array","randomValues","crypto","getRandomValues","Settler","settled","subscribe","callback","isSettled","unsubscribe","settle","settledTime","DomMutationSettler","target","MutationObserver","restart","subtree","childList","characterData","LoadEventEndSettler","readyState","settleUsingPerformance","entryType","isPerformanceNavigationTiming","timing","navigationStart","RequestSettler","requestTracker","urlsToIgnore","outstandingRequests","onRequestStart","setUrlsToIgnore","shouldIgnoreUrl","regexp","SettlerAggregate","settlers","settler","settlersAreSettled","BrowserPersistence","localStorage","storage","getItem","setItem","stringify","WebVitals","observers","observeLargestContentfulPaint","observeLayoutShift","firstContentfulPaint","timeToFirstByte","firstInputDelay","cumulativeLayoutShift","largestContentfulPaint","disconnect","getEntriesByName","processingStart","session","hadRecentInput","previousStartTime","firstStartTime","DefaultRoutingProvider","BugsnagPerformance","noop","createNoopOnSettle","createNoopClient","visibilityState","backgroundingListenerCallback","backgroundStateChanged","newState","createBrowserBackgroundingListener","defaultAttributes","getValue","permitted","values","createSpanAttributesSource","calculatedTimeOrigin","date","millisecondsToNanoseconds","milliseconds","round","createClock","makeBrowserPersistence","resourceAttributesSource","getDeviceId","deviceId","config","userAgentData","platform","mobile","generateAnonymousId","maybeAnonymousId","anonymousId","createResourceAttributesSource","fetchRequestTracker","global","originalFetch","fetch","init","inputIsRequest","createStartContext","modifiedParams","extraHeaders","Headers","isHeadersInstance","has","mergeInitRequestHeaders","mergeInputRequestHeaders","mergeRequestHeaders","catch","createFetchRequestTracker","xhrRequestTracker","xhr","trackedRequests","WeakMap","requestHandlers","originalOpen","open","rest","originalSend","requestData","existingHandler","removeEventListener","setRequestHeader","onReadyStateChange","evt","DONE","createXmlHttpRequestTracker","XMLHttpRequest","PerformanceObserver","domMutationSettler","fetchRequestSettler","xhrRequestSettler","loadEventEndSettler","onSettlePlugin","cooldown","settleIgnoreUrls","concat","createOnSettle","bufferingProcessor","Error","cleanConfiguration","validateConfig","Event","setTraceCorrelation","_client","originalNotify","_notify","deliveryFactory","manager","retryQueueFactory","networkSpanOptions","endOptions","getPlugin","Constructor","platformExtensions","createClient","keepalive","toISOString","statusCode","createFetchDeliveryFactory","hostname","defaultRoutingProvider","BugsnagPerformance$1"],"mappings":"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","x_google_ignoreList":[18,19,20,21]}