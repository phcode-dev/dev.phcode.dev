{"version":3,"file":"bugsnag-performance.min.js","sources":["../packages/core/dist/validation.js","../packages/core/dist/attributes.js","../packages/core/dist/clock.js","../packages/core/dist/config.js","../packages/core/dist/batch-processor.js","../packages/core/dist/events.js","../packages/core/dist/span.js","../packages/core/dist/trace-id-to-sampling-rate.js","../packages/core/dist/delivery.js","../packages/core/dist/probability-fetcher.js","../packages/core/dist/probability-manager.js","../packages/core/dist/processor.js","../packages/core/dist/sampler.js","../packages/core/dist/span-context.js","../packages/core/dist/time.js","../packages/core/dist/span-factory.js","../packages/core/dist/core.js","../node_modules/@bugsnag/cuid/lib/pad.js","../node_modules/@bugsnag/cuid/lib/fingerprint.browser.js","../node_modules/@bugsnag/cuid/index.js","../node_modules/@bugsnag/cuid/lib/is-cuid.js","../packages/core/dist/persistence.js","../packages/core/dist/retry-queue.js","../packages/delivery-fetch/dist/delivery.js","../packages/request-tracker/dist/network-request-callback.js","../packages/request-tracker/dist/request-tracker.js","../packages/request-tracker/dist/url-helpers.js","../packages/request-tracker/dist/request-tracker-fetch.js","../packages/platforms/browser/lib/send-page-attributes.ts","../packages/platforms/browser/lib/auto-instrumentation/page-load-phase-spans.ts","../packages/platforms/browser/lib/default-routing-provider.ts","../packages/platforms/browser/lib/auto-instrumentation/full-page-load-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/network-request-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/resource-load-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/route-change-plugin.ts","../packages/platforms/browser/lib/clock.ts","../packages/platforms/browser/lib/routing-provider.ts","../packages/platforms/browser/lib/id-generator.ts","../packages/platforms/browser/lib/on-settle/settler.ts","../packages/platforms/browser/lib/on-settle/dom-mutation-settler.ts","../packages/platforms/browser/lib/on-settle/load-event-end-settler.ts","../packages/platforms/browser/lib/on-settle/request-settler.ts","../packages/platforms/browser/lib/on-settle/settler-aggregate.ts","../packages/platforms/browser/lib/persistence.ts","../packages/platforms/browser/lib/web-vitals.ts","../packages/platforms/browser/lib/browser.ts","../packages/platforms/browser/lib/on-settle/index.ts","../packages/platforms/browser/lib/backgrounding-listener.ts","../packages/platforms/browser/lib/span-attributes-source.ts","../packages/platforms/browser/lib/resource-attributes-source.ts","../packages/request-tracker/dist/request-tracker-xhr.js","../packages/platforms/browser/lib/config.ts"],"sourcesContent":["const isBoolean = (value) => value === true || value === false;\nconst isObject = (value) => !!value && typeof value === 'object' && !Array.isArray(value);\nconst isNumber = (value) => typeof value === 'number' && Number.isFinite(value) && !Number.isNaN(value);\nconst isString = (value) => typeof value === 'string';\nconst isStringWithLength = (value) => isString(value) && value.length > 0;\nconst isLogger = (value) => isObject(value) &&\n    typeof value.debug === 'function' &&\n    typeof value.info === 'function' &&\n    typeof value.warn === 'function' &&\n    typeof value.error === 'function';\nconst isStringArray = (value) => Array.isArray(value) && value.every(isStringWithLength);\nconst isStringOrRegExpArray = (value) => Array.isArray(value) && value.every(item => isStringWithLength(item) || item instanceof RegExp);\nfunction isPersistedProbability(value) {\n    return isObject(value) &&\n        isNumber(value.value) &&\n        isNumber(value.time);\n}\nconst isSpanContext = (value) => isObject(value) &&\n    typeof value.id === 'string' &&\n    typeof value.traceId === 'string' &&\n    typeof value.isValid === 'function';\nfunction isTime(value) {\n    return isNumber(value) || value instanceof Date;\n}\nfunction isPlugin(value) {\n    return isObject(value) && typeof value.configure === 'function';\n}\nfunction isPluginArray(value) {\n    return Array.isArray(value) && value.every(plugin => isPlugin(plugin));\n}\n\nexport { isBoolean, isLogger, isNumber, isObject, isPersistedProbability, isPlugin, isPluginArray, isSpanContext, isString, isStringArray, isStringOrRegExpArray, isStringWithLength, isTime };\n","import { isNumber } from './validation.js';\n\nclass SpanAttributes {\n    constructor(initialValues) {\n        this.attributes = initialValues;\n    }\n    set(name, value) {\n        if (typeof value === 'string' || typeof value === 'boolean' || isNumber(value)) {\n            this.attributes.set(name, value);\n        }\n    }\n    remove(name) {\n        this.attributes.delete(name);\n    }\n    toJson() {\n        return Array.from(this.attributes).map(([key, value]) => attributeToJson(key, value));\n    }\n}\nclass ResourceAttributes extends SpanAttributes {\n    constructor(releaseStage, appVersion, sdkName, sdkVersion) {\n        const initialValues = new Map([\n            ['deployment.environment', releaseStage],\n            ['telemetry.sdk.name', sdkName],\n            ['telemetry.sdk.version', sdkVersion]\n        ]);\n        if (appVersion.length > 0) {\n            initialValues.set('service.version', appVersion);\n        }\n        super(initialValues);\n    }\n}\nfunction attributeToJson(key, attribute) {\n    switch (typeof attribute) {\n        case 'number':\n            if (Number.isNaN(attribute) || !Number.isFinite(attribute)) {\n                return undefined;\n            }\n            // 'bugsnag.sampling.p' must always be sent as a doubleValue\n            if (key !== 'bugsnag.sampling.p' && Number.isInteger(attribute)) {\n                return { key, value: { intValue: `${attribute}` } };\n            }\n            return { key, value: { doubleValue: attribute } };\n        case 'boolean':\n            return { key, value: { boolValue: attribute } };\n        case 'string':\n            return { key, value: { stringValue: attribute } };\n        default:\n            return undefined;\n    }\n}\n\nexport { ResourceAttributes, SpanAttributes, attributeToJson };\n","const NANOSECONDS_IN_MILLISECONDS = 1000000;\nfunction millisecondsToNanoseconds(milliseconds) {\n    return Math.round(milliseconds * NANOSECONDS_IN_MILLISECONDS);\n}\n\nexport { millisecondsToNanoseconds };\n","import { isStringWithLength, isString, isLogger, isStringArray, isPluginArray, isObject } from './validation.js';\n\nconst schema = {\n    appVersion: {\n        defaultValue: '',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    endpoint: {\n        defaultValue: 'https://otlp.bugsnag.com/v1/traces',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    apiKey: {\n        defaultValue: '',\n        message: 'should be a 32 character hexadecimal string',\n        validate: (value) => isString(value) && /^[a-f0-9]{32}$/.test(value)\n    },\n    logger: {\n        defaultValue: {\n            debug(message) { console.debug(message); },\n            info(message) { console.info(message); },\n            warn(message) { console.warn(message); },\n            error(message) { console.error(message); }\n        },\n        message: 'should be a Logger object',\n        validate: isLogger\n    },\n    releaseStage: {\n        defaultValue: 'production',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    enabledReleaseStages: {\n        defaultValue: null,\n        message: 'should be an array of strings',\n        validate: (value) => value === null || isStringArray(value)\n    },\n    plugins: {\n        defaultValue: [],\n        message: 'should be an array of plugin objects',\n        validate: isPluginArray\n    }\n};\nfunction validateConfig(config, schema) {\n    if (typeof config === 'string') {\n        config = { apiKey: config };\n    }\n    if (!isObject(config) || !isString(config.apiKey) || config.apiKey.length === 0) {\n        throw new Error('No Bugsnag API Key set');\n    }\n    let warnings = '';\n    const cleanConfiguration = {};\n    for (const option of Object.keys(schema)) {\n        if (Object.prototype.hasOwnProperty.call(config, option)) {\n            if (schema[option].validate(config[option])) {\n                cleanConfiguration[option] = config[option];\n            }\n            else {\n                warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof config[option]}`;\n                cleanConfiguration[option] = schema[option].defaultValue;\n            }\n        }\n        else {\n            cleanConfiguration[option] = schema[option].defaultValue;\n        }\n    }\n    // If apiKey is set but not valid we should still use it, despite the validation warning.\n    cleanConfiguration.apiKey = config.apiKey;\n    cleanConfiguration.maximumBatchSize = config.maximumBatchSize || 100;\n    cleanConfiguration.batchInactivityTimeoutMs = config.batchInactivityTimeoutMs || 30 * 1000;\n    if (warnings.length > 0) {\n        cleanConfiguration.logger.warn(`Invalid configuration${warnings}`);\n    }\n    return cleanConfiguration;\n}\n\nexport { schema, validateConfig };\n","class BatchProcessor {\n    constructor(delivery, configuration, retryQueue, sampler, probabilityManager, encoder) {\n        this.spans = [];\n        this.timeout = null;\n        this.flushQueue = Promise.resolve();\n        this.delivery = delivery;\n        this.configuration = configuration;\n        this.retryQueue = retryQueue;\n        this.sampler = sampler;\n        this.probabilityManager = probabilityManager;\n        this.encoder = encoder;\n        this.flush = this.flush.bind(this);\n    }\n    stop() {\n        if (this.timeout !== null) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    }\n    start() {\n        this.stop();\n        this.timeout = setTimeout(this.flush, this.configuration.batchInactivityTimeoutMs);\n    }\n    add(span) {\n        if (this.configuration.enabledReleaseStages &&\n            !this.configuration.enabledReleaseStages.includes(this.configuration.releaseStage)) {\n            return;\n        }\n        this.spans.push(span);\n        if (this.spans.length >= this.configuration.maximumBatchSize) {\n            this.flush();\n        }\n        else {\n            this.start();\n        }\n    }\n    async flush() {\n        this.stop();\n        this.flushQueue = this.flushQueue.then(async () => {\n            if (this.probabilityManager.fetchingInitialProbability) {\n                await this.probabilityManager.fetchingInitialProbability;\n            }\n            const batch = this.prepareBatch();\n            // we either had nothing in the batch originally or all spans were discarded\n            if (!batch) {\n                return;\n            }\n            const payload = await this.encoder.encode(batch);\n            const batchTime = Date.now();\n            try {\n                const response = await this.delivery.send(payload);\n                if (response.samplingProbability !== undefined) {\n                    this.probabilityManager.setProbability(response.samplingProbability);\n                }\n                switch (response.state) {\n                    case 'success':\n                        this.retryQueue.flush();\n                        break;\n                    case 'failure-discard':\n                        this.configuration.logger.warn('delivery failed');\n                        break;\n                    case 'failure-retryable':\n                        this.configuration.logger.info('delivery failed, adding to retry queue');\n                        this.retryQueue.add(payload, batchTime);\n                        break;\n                    default:\n                        response.state;\n                }\n            }\n            catch (err) {\n                this.configuration.logger.warn('delivery failed');\n            }\n        });\n        await this.flushQueue;\n    }\n    prepareBatch() {\n        if (this.spans.length === 0) {\n            return;\n        }\n        // update sampling values if necessary and re-sample\n        const batch = [];\n        const probability = this.sampler.spanProbability;\n        for (const span of this.spans) {\n            if (span.samplingProbability.raw > probability.raw) {\n                span.samplingProbability = probability;\n            }\n            if (this.sampler.sample(span)) {\n                batch.push(span);\n            }\n        }\n        // clear out the current batch so we're ready to start a new one\n        this.spans = [];\n        // if every span was discarded there's nothing to send\n        if (batch.length === 0) {\n            return;\n        }\n        return batch;\n    }\n}\n\nexport { BatchProcessor };\n","class SpanEvents {\n    constructor() {\n        this.events = [];\n    }\n    add(name, time) {\n        this.events.push({ name, time });\n    }\n    toJson(clock) {\n        return this.events.map(({ name, time }) => ({ name, timeUnixNano: clock.toUnixTimestampNanoseconds(time) }));\n    }\n}\n\nexport { SpanEvents };\n","import { SpanEvents } from './events.js';\nimport traceIdToSamplingRate from './trace-id-to-sampling-rate.js';\nimport { isTime, isSpanContext, isBoolean } from './validation.js';\n\nfunction spanToJson(span, clock) {\n    return {\n        name: span.name,\n        kind: span.kind,\n        spanId: span.id,\n        traceId: span.traceId,\n        parentSpanId: span.parentSpanId,\n        startTimeUnixNano: clock.toUnixTimestampNanoseconds(span.startTime),\n        endTimeUnixNano: clock.toUnixTimestampNanoseconds(span.endTime),\n        attributes: span.attributes.toJson(),\n        events: span.events.toJson(clock)\n    };\n}\nclass SpanInternal {\n    constructor(id, traceId, name, startTime, attributes, parentSpanId) {\n        this.kind = 3 /* Kind.Client */; // TODO: How do we define the initial Kind?\n        this.events = new SpanEvents();\n        this.id = id;\n        this.traceId = traceId;\n        this.parentSpanId = parentSpanId;\n        this.name = name;\n        this.startTime = startTime;\n        this.attributes = attributes;\n        this.samplingRate = traceIdToSamplingRate(this.traceId);\n    }\n    addEvent(name, time) {\n        this.events.add(name, time);\n    }\n    setAttribute(name, value) {\n        this.attributes.set(name, value);\n    }\n    end(endTime, samplingProbability) {\n        this.endTime = endTime;\n        let _samplingProbability = samplingProbability;\n        this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n        return {\n            id: this.id,\n            name: this.name,\n            kind: this.kind,\n            traceId: this.traceId,\n            startTime: this.startTime,\n            attributes: this.attributes,\n            events: this.events,\n            samplingRate: this.samplingRate,\n            endTime,\n            get samplingProbability() {\n                return _samplingProbability;\n            },\n            set samplingProbability(samplingProbability) {\n                _samplingProbability = samplingProbability;\n                this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n            },\n            parentSpanId: this.parentSpanId\n        };\n    }\n    isValid() {\n        return this.endTime === undefined;\n    }\n}\nconst coreSpanOptionSchema = {\n    startTime: {\n        message: 'should be a number or Date',\n        getDefaultValue: () => undefined,\n        validate: isTime\n    },\n    parentContext: {\n        message: 'should be a SpanContext',\n        getDefaultValue: () => undefined,\n        validate: (value) => value === null || isSpanContext(value)\n    },\n    makeCurrentContext: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    },\n    isFirstClass: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    }\n};\n\nexport { SpanInternal, coreSpanOptionSchema, spanToJson };\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// taken from OpenTelemetry's TraceIdRatioBasedSampler:\n// https://github.com/open-telemetry/opentelemetry-js/blob/ca700c4eef64c14bb5fef2be6f08ace7973a8881/packages/opentelemetry-sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts#L47-L55\n// with some small modifications to match our naming conventions\nfunction traceIdToSamplingRate(traceId) {\n    let samplingRate = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n        const position = i * 8;\n        const segment = Number.parseInt(traceId.slice(position, position + 8), 16);\n        samplingRate = (samplingRate ^ segment) >>> 0;\n    }\n    return samplingRate;\n}\n\nexport { traceIdToSamplingRate as default };\n","import { spanToJson } from './span.js';\n\nclass TracePayloadEncoder {\n    constructor(clock, configuration, resourceAttributeSource) {\n        this.clock = clock;\n        this.configuration = configuration;\n        this.resourceAttributeSource = resourceAttributeSource;\n    }\n    async encode(spans) {\n        const resourceAttributes = await this.resourceAttributeSource(this.configuration);\n        const jsonSpans = Array(spans.length);\n        for (let i = 0; i < spans.length; ++i) {\n            jsonSpans[i] = spanToJson(spans[i], this.clock);\n        }\n        const deliveryPayload = {\n            resourceSpans: [\n                {\n                    resource: { attributes: resourceAttributes.toJson() },\n                    scopeSpans: [{ spans: jsonSpans }]\n                }\n            ]\n        };\n        return {\n            body: deliveryPayload,\n            headers: {\n                'Bugsnag-Api-Key': this.configuration.apiKey,\n                'Content-Type': 'application/json',\n                'Bugsnag-Span-Sampling': this.generateSamplingHeader(spans)\n            }\n        };\n    }\n    generateSamplingHeader(spans) {\n        if (spans.length === 0) {\n            return '1:0';\n        }\n        const spanCounts = Object.create(null);\n        for (const span of spans) {\n            const existingValue = spanCounts[span.samplingProbability.raw] || 0;\n            spanCounts[span.samplingProbability.raw] = existingValue + 1;\n        }\n        const rawProbabilities = Object.keys(spanCounts);\n        const pairs = Array(rawProbabilities.length);\n        for (let i = 0; i < rawProbabilities.length; ++i) {\n            const rawProbability = rawProbabilities[i];\n            pairs[i] = `${rawProbability}:${spanCounts[rawProbability]}`;\n        }\n        return pairs.join(';');\n    }\n}\nconst retryCodes = new Set([402, 407, 408, 429]);\nfunction responseStateFromStatusCode(statusCode) {\n    if (statusCode >= 200 && statusCode < 300) {\n        return 'success';\n    }\n    if (statusCode >= 400 && statusCode < 500 && !retryCodes.has(statusCode)) {\n        return 'failure-discard';\n    }\n    return 'failure-retryable';\n}\n\nexport { TracePayloadEncoder, responseStateFromStatusCode };\n","// the time to wait before retrying a failed request\nconst RETRY_MILLISECONDS = 30 * 1000;\nclass ProbabilityFetcher {\n    constructor(delivery, apiKey) {\n        this.delivery = delivery;\n        this.payload = {\n            body: { resourceSpans: [] },\n            headers: {\n                'Bugsnag-Api-Key': apiKey,\n                'Content-Type': 'application/json',\n                'Bugsnag-Span-Sampling': '1.0:0'\n            }\n        };\n    }\n    async getNewProbability() {\n        // keep making requests until we get a new probability value from the server\n        while (true) {\n            const response = await this.delivery.send(this.payload);\n            // in theory this should always be present, but it's possible the request\n            // fails or there's a bug on the server side causing it not to be returned\n            if (response.samplingProbability !== undefined) {\n                return response.samplingProbability;\n            }\n            await this.timeBetweenRetries();\n        }\n    }\n    timeBetweenRetries() {\n        return new Promise(resolve => {\n            setTimeout(resolve, RETRY_MILLISECONDS);\n        });\n    }\n}\n\nexport { ProbabilityFetcher as default };\n","// the time between requests to fetch a new probability value from the server\nconst PROBABILITY_REFRESH_MILLISECONDS = 24 * 60 * 60 * 1000; // 24 hours\nclass ProbabilityManager {\n    static async create(persistence, sampler, probabilityFetcher) {\n        const persistedProbability = await persistence.load('bugsnag-sampling-probability');\n        let initialProbabilityTime;\n        let initialTimeoutDuration;\n        if (persistedProbability === undefined) {\n            // If there is no stored probability:\n            // - Set the initial probability value to the default\n            sampler.probability = 1.0;\n            initialProbabilityTime = 0;\n            // - Immediately fetch a new probability value\n            initialTimeoutDuration = 0;\n        }\n        else if (persistedProbability.time < Date.now() - PROBABILITY_REFRESH_MILLISECONDS) {\n            // If it is >= 24 hours old:\n            // - Set the initial probability value to the stored value\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n            // - Immediately fetch a new probability value\n            initialTimeoutDuration = 0;\n        }\n        else {\n            // If it is < 24 hours old:\n            // - Use the stored probability\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n            // - Fetch a new probability when this value would be 24 hours old\n            initialTimeoutDuration = PROBABILITY_REFRESH_MILLISECONDS - (Date.now() - initialProbabilityTime);\n        }\n        return new ProbabilityManager(persistence, sampler, probabilityFetcher, initialTimeoutDuration, initialProbabilityTime);\n    }\n    constructor(persistence, sampler, probabilityFetcher, initialTimeoutDuration, initialProbabilityTime) {\n        this.timeout = undefined;\n        this.persistence = persistence;\n        this.sampler = sampler;\n        this.probabilityFetcher = probabilityFetcher;\n        this.lastProbabilityTime = initialProbabilityTime;\n        if (initialTimeoutDuration === 0) {\n            this.fetchingInitialProbability = new Promise((resolve) => {\n                this.resolveInitialProbability = resolve;\n            });\n        }\n        this.fetchNewProbabilityIn(initialTimeoutDuration);\n    }\n    setProbability(newProbability) {\n        this.lastProbabilityTime = Date.now();\n        this.sampler.probability = newProbability;\n        this.fetchNewProbabilityIn(PROBABILITY_REFRESH_MILLISECONDS);\n        // return this promise for convience in unit tests as it allows us to wait\n        // for persistence to finish; in real code we won't ever wait for this but\n        // there's no harm in returning it anyway\n        return this.persistence.save('bugsnag-sampling-probability', {\n            value: newProbability,\n            time: this.lastProbabilityTime\n        });\n    }\n    fetchNewProbabilityIn(milliseconds) {\n        clearTimeout(this.timeout);\n        const lastProbabilityTimeBeforeTimeout = this.lastProbabilityTime;\n        this.timeout = setTimeout(async () => {\n            const probability = await this.probabilityFetcher.getNewProbability();\n            // only apply the new probability if we haven't received another value\n            // in the meantime, e.g. from a trace request's response\n            if (lastProbabilityTimeBeforeTimeout === this.lastProbabilityTime) {\n                this.setProbability(probability);\n            }\n            // Initial sampling request has been made, and we can unblock batching\n            if (this.resolveInitialProbability) {\n                this.resolveInitialProbability();\n                this.resolveInitialProbability = undefined;\n                this.fetchingInitialProbability = undefined;\n            }\n        }, milliseconds);\n    }\n}\n\nexport { ProbabilityManager as default };\n","// a processor that buffers spans in memory until the client has started\n// not sure if this would need to be platform specific — will we ever care about\n// persisting spans if 'start' is never called?\nclass BufferingProcessor {\n    constructor() {\n        this.spans = [];\n    }\n    add(span) {\n        this.spans.push(span);\n    }\n}\n\nexport { BufferingProcessor };\n","// sampling rates are stored as a number between 0 and 2^32 - 1 (i.e. they are\n// u32s) so we need to scale the probability value to match this range as they\n// are stored as values between 0 and 1\nfunction scaleProbabilityToMatchSamplingRate(probability) {\n    return Math.floor(probability * 0xffffffff);\n}\nclass Sampler {\n    constructor(initialProbability) {\n        // we could just do 'this.probability = initialProbability' but TypeScript\n        // doesn't like that as it doesn't directly initialise these properties in\n        // the constructor\n        this._probability = initialProbability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(initialProbability);\n    }\n    /**\n     * The global probability value: a number between 0 & 1\n     */\n    get probability() {\n        return this._probability;\n    }\n    set probability(probability) {\n        this._probability = probability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(probability);\n    }\n    /**\n     * The probability value for spans: a number between 0 & 2^32 - 1\n     *\n     * This is necessary because span sampling rates are generated as unsigned 32\n     * bit integers. We scale the global probability value to match that range, so\n     * that we can use a simple calculation in 'sample'\n     *\n     * @see scaleProbabilityToMatchSamplingRate\n     */\n    get spanProbability() {\n        return {\n            raw: this._probability,\n            scaled: this.scaledProbability\n        };\n    }\n    sample(span) {\n        return span.samplingRate <= span.samplingProbability.scaled;\n    }\n    shouldSample(samplingRate) {\n        return samplingRate <= this.spanProbability.scaled;\n    }\n}\n\nexport { Sampler as default };\n","function spanContextEquals(span1, span2) {\n    if (span1 === span2)\n        return true;\n    if (span1 !== undefined && span2 !== undefined) {\n        return span1.id === span2.id && span1.traceId === span2.traceId;\n    }\n    return false;\n}\nclass DefaultSpanContextStorage {\n    constructor(backgroundingListener, contextStack = []) {\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear the context stack regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.contextStack.length = 0;\n        };\n        this.contextStack = contextStack;\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    *[Symbol.iterator]() {\n        for (let i = this.contextStack.length - 1; i >= 0; --i) {\n            yield this.contextStack[i];\n        }\n    }\n    push(context) {\n        if (context.isValid() && this.isInForeground) {\n            this.contextStack.push(context);\n        }\n    }\n    pop(context) {\n        if (spanContextEquals(context, this.current)) {\n            this.contextStack.pop();\n        }\n        this.removeClosedContexts();\n    }\n    get first() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[0]\n            : undefined;\n    }\n    get current() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[this.contextStack.length - 1]\n            : undefined;\n    }\n    removeClosedContexts() {\n        while (this.contextStack.length > 0 &&\n            this.contextStack[this.contextStack.length - 1].isValid() === false) {\n            this.contextStack.pop();\n        }\n    }\n}\n\nexport { DefaultSpanContextStorage, spanContextEquals };\n","import { isNumber } from './validation.js';\n\nfunction timeToNumber(clock, time) {\n    if (isNumber(time)) {\n        // no need to change anything - we want to store numbers anyway\n        // we assume this is nanosecond precision\n        return time;\n    }\n    if (time instanceof Date) {\n        return clock.convert(time);\n    }\n    return clock.now();\n}\n\nexport { timeToNumber };\n","import { SpanAttributes } from './attributes.js';\nimport { SpanInternal, coreSpanOptionSchema } from './span.js';\nimport { timeToNumber } from './time.js';\nimport { isSpanContext, isObject } from './validation.js';\n\nconst DISCARD_END_TIME = -1;\nclass SpanFactory {\n    constructor(processor, sampler, idGenerator, spanAttributesSource, clock, backgroundingListener, logger, spanContextStorage) {\n        this.openSpans = new WeakSet();\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear all open spans regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.openSpans = new WeakSet();\n        };\n        this.processor = processor;\n        this.sampler = sampler;\n        this.idGenerator = idGenerator;\n        this.spanAttributesSource = spanAttributesSource;\n        this.clock = clock;\n        this.logger = logger;\n        this.spanContextStorage = spanContextStorage;\n        // this will fire immediately if the app is already backgrounded\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    startSpan(name, options) {\n        const safeStartTime = timeToNumber(this.clock, options.startTime);\n        const spanId = this.idGenerator.generate(64);\n        // if the parentContext option is not set use the current context\n        // if parentContext is explicitly null, or there is no current context,\n        // we are starting a new root span\n        const parentContext = isSpanContext(options.parentContext) || options.parentContext === null\n            ? options.parentContext\n            : this.spanContextStorage.current;\n        const parentSpanId = parentContext ? parentContext.id : undefined;\n        const traceId = parentContext ? parentContext.traceId : this.idGenerator.generate(128);\n        const attributes = new SpanAttributes(new Map());\n        if (typeof options.isFirstClass === 'boolean') {\n            attributes.set('bugsnag.span.first_class', options.isFirstClass);\n        }\n        const span = new SpanInternal(spanId, traceId, name, safeStartTime, attributes, parentSpanId);\n        // don't track spans that are started while the app is backgrounded\n        if (this.isInForeground) {\n            this.openSpans.add(span);\n            if (options.makeCurrentContext !== false) {\n                this.spanContextStorage.push(span);\n            }\n        }\n        return span;\n    }\n    startNetworkSpan(options) {\n        const spanName = `[HTTP/${options.method.toUpperCase()}]`;\n        const cleanOptions = this.validateSpanOptions(spanName, options);\n        const spanInternal = this.startSpan(cleanOptions.name, Object.assign(Object.assign({}, cleanOptions.options), { makeCurrentContext: false }));\n        spanInternal.setAttribute('bugsnag.span.category', 'network');\n        spanInternal.setAttribute('http.method', options.method);\n        spanInternal.setAttribute('http.url', options.url);\n        return spanInternal;\n    }\n    configure(processor, logger) {\n        this.processor = processor;\n        this.logger = logger;\n    }\n    endSpan(span, endTime, additionalAttributes) {\n        // if the span doesn't exist here it shouldn't be processed\n        if (!this.openSpans.delete(span)) {\n            // only warn if the span has already been ended explicitly rather than\n            // discarded by us\n            if (!span.isValid()) {\n                this.logger.warn('Attempted to end a Span which has already ended.');\n            }\n            return;\n        }\n        // Discard marked spans\n        if (endTime === DISCARD_END_TIME)\n            return;\n        // Set any additional attributes\n        for (const [key, value] of Object.entries(additionalAttributes || {})) {\n            span.setAttribute(key, value);\n        }\n        this.spanAttributesSource.requestAttributes(span);\n        const spanEnded = span.end(endTime, this.sampler.spanProbability);\n        this.spanContextStorage.pop(span);\n        if (this.sampler.sample(spanEnded)) {\n            this.processor.add(spanEnded);\n        }\n    }\n    toPublicApi(span) {\n        return {\n            get id() {\n                return span.id;\n            },\n            get traceId() {\n                return span.traceId;\n            },\n            get samplingRate() {\n                return span.samplingRate;\n            },\n            isValid: () => span.isValid(),\n            end: (endTime) => {\n                const safeEndTime = timeToNumber(this.clock, endTime);\n                this.endSpan(span, safeEndTime);\n            }\n        };\n    }\n    validateSpanOptions(name, options, schema = coreSpanOptionSchema) {\n        let warnings = '';\n        const cleanOptions = {};\n        if (typeof name !== 'string') {\n            warnings += `\\n  - name should be a string, got ${typeof name}`;\n            name = String(name);\n        }\n        if (options !== undefined && !isObject(options)) {\n            warnings += '\\n  - options is not an object';\n        }\n        else {\n            const spanOptions = options || {};\n            for (const option of Object.keys(schema)) {\n                if (Object.prototype.hasOwnProperty.call(spanOptions, option) && spanOptions[option] !== undefined) {\n                    if (schema[option].validate(spanOptions[option])) {\n                        cleanOptions[option] = spanOptions[option];\n                    }\n                    else {\n                        warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof spanOptions[option]}`;\n                        cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                    }\n                }\n                else {\n                    cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                }\n            }\n        }\n        if (warnings.length > 0) {\n            this.logger.warn(`Invalid span options${warnings}`);\n        }\n        return { name, options: cleanOptions };\n    }\n}\n\nexport { DISCARD_END_TIME, SpanFactory };\n","import { BatchProcessor } from './batch-processor.js';\nimport { validateConfig } from './config.js';\nimport { TracePayloadEncoder } from './delivery.js';\nimport ProbabilityFetcher from './probability-fetcher.js';\nimport ProbabilityManager from './probability-manager.js';\nimport { BufferingProcessor } from './processor.js';\nimport Sampler from './sampler.js';\nimport { DefaultSpanContextStorage } from './span-context.js';\nimport { SpanFactory } from './span-factory.js';\nimport { timeToNumber } from './time.js';\n\nfunction createClient(options) {\n    const bufferingProcessor = new BufferingProcessor();\n    let processor = bufferingProcessor;\n    const spanContextStorage = options.spanContextStorage || new DefaultSpanContextStorage(options.backgroundingListener);\n    let logger = options.schema.logger.defaultValue;\n    const sampler = new Sampler(1.0);\n    const spanFactory = new SpanFactory(processor, sampler, options.idGenerator, options.spanAttributesSource, options.clock, options.backgroundingListener, logger, spanContextStorage);\n    const plugins = options.plugins(spanFactory, spanContextStorage);\n    return Object.assign({ start: (config) => {\n            const configuration = validateConfig(config, options.schema);\n            const delivery = options.deliveryFactory(configuration.endpoint);\n            options.spanAttributesSource.configure(configuration);\n            ProbabilityManager.create(options.persistence, sampler, new ProbabilityFetcher(delivery, configuration.apiKey)).then((manager) => {\n                processor = new BatchProcessor(delivery, configuration, options.retryQueueFactory(delivery, configuration.retryQueueMaxSize), sampler, manager, new TracePayloadEncoder(options.clock, configuration, options.resourceAttributesSource));\n                // ensure all spans started before .start() are added to the batch\n                for (const span of bufferingProcessor.spans) {\n                    processor.add(span);\n                }\n                // register with the backgrounding listener - we do this in 'start' as\n                // there's nothing to do if we're backgrounded before start is called\n                // e.g. we can't trigger delivery until we have the apiKey and endpoint\n                // from configuration\n                options.backgroundingListener.onStateChange(state => {\n                    processor.flush();\n                });\n                logger = configuration.logger;\n                spanFactory.configure(processor, logger);\n            });\n            for (const plugin of configuration.plugins) {\n                plugins.push(plugin);\n            }\n            for (const plugin of plugins) {\n                plugin.configure(configuration, spanFactory);\n            }\n        }, startSpan: (name, spanOptions) => {\n            const cleanOptions = spanFactory.validateSpanOptions(name, spanOptions);\n            const span = spanFactory.startSpan(cleanOptions.name, cleanOptions.options);\n            span.setAttribute('bugsnag.span.category', 'custom');\n            return spanFactory.toPublicApi(span);\n        }, startNetworkSpan: (networkSpanOptions) => {\n            const spanInternal = spanFactory.startNetworkSpan(networkSpanOptions);\n            const span = spanFactory.toPublicApi(spanInternal);\n            // Overwrite end method to set status code attribute\n            // once we release the setAttribute API we can simply return the span\n            const networkSpan = Object.assign(Object.assign({}, span), { end: (endOptions) => {\n                    spanFactory.endSpan(spanInternal, timeToNumber(options.clock, endOptions.endTime), { 'http.status_code': endOptions.status });\n                } });\n            return networkSpan;\n        }, getPlugin: (Constructor) => {\n            for (const plugin of plugins) {\n                if (plugin instanceof Constructor) {\n                    return plugin;\n                }\n            }\n        }, get currentSpanContext() {\n            return spanContextStorage.current;\n        } }, (options.platformExtensions && options.platformExtensions(spanFactory, spanContextStorage)));\n}\nfunction createNoopClient() {\n    const noop = () => { };\n    return {\n        start: noop,\n        startSpan: () => ({ id: '', traceId: '', end: noop, isValid: () => false }),\n        currentSpanContext: undefined\n    };\n}\n\nexport { createClient, createNoopClient };\n","module.exports = function pad (num, size) {\n  var s = '000000000' + num;\n  return s.substr(s.length - size);\n};\n","var pad = require('./pad.js');\n\nvar env = typeof window === 'object' ? window : self;\nvar globalCount = 0;\nfor (var prop in env) {\n  if (Object.hasOwnProperty.call(env, prop)) globalCount++;\n}\nvar mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\nvar clientId = pad((mimeTypesLength +\n  navigator.userAgent.length).toString(36) +\n  globalCount.toString(36), 4);\n\nmodule.exports = function fingerprint () {\n  return clientId;\n};\n","/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\nvar fingerprint = require('./lib/fingerprint.js');\nvar isCuid = require('./lib/is-cuid.js');\nvar pad = require('./lib/pad.js');\n\nvar c = 0,\n  blockSize = 4,\n  base = 36,\n  discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock () {\n  return pad((Math.random() *\n    discreteValues << 0)\n    .toString(base), blockSize);\n}\n\nfunction safeCounter () {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\nfunction cuid () {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c', // hard-coded allows for sequential access\n\n    // timestamp\n    // warning: this exposes the exact date and time\n    // that the uid was created.\n    timestamp = new Date().getTime().toString(base),\n\n    // Prevent same-machine collisions.\n    counter = pad(safeCounter().toString(base), blockSize),\n\n    // A few chars to generate distinct ids for different\n    // clients (so different computers are far less\n    // likely to generate the same id)\n    print = fingerprint(),\n\n    // Grab some more chars from Math.random()\n    random = randomBlock() + randomBlock();\n\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.fingerprint = fingerprint;\ncuid.isCuid = isCuid;\n\nmodule.exports = cuid;\n","/**\n * Check the provided value is a valid device id\n * @param {unknown} value\n * @returns\n */\nmodule.exports = function isCuid (value) {\n    return typeof value === 'string' && (/^c[a-z0-9]{20,32}$/).test(value);\n};\n","import cuid from '@bugsnag/cuid';\nimport { isPersistedProbability } from './validation.js';\n\nconst { isCuid } = cuid;\nclass InMemoryPersistence {\n    constructor() {\n        this.persistedItems = new Map();\n    }\n    async load(key) {\n        return this.persistedItems.get(key);\n    }\n    async save(key, value) {\n        this.persistedItems.set(key, value);\n    }\n}\nfunction toPersistedPayload(key, raw) {\n    switch (key) {\n        case 'bugsnag-sampling-probability': {\n            const json = JSON.parse(raw);\n            return isPersistedProbability(json)\n                ? json\n                : undefined;\n        }\n        case 'bugsnag-anonymous-id':\n            return isCuid(raw)\n                ? raw\n                : undefined;\n    }\n}\n\nexport { InMemoryPersistence, toPersistedPayload };\n","const msInDay = 24 * 60 * 60000;\nclass InMemoryQueue {\n    constructor(delivery, retryQueueMaxSize) {\n        this.delivery = delivery;\n        this.retryQueueMaxSize = retryQueueMaxSize;\n        this.requestQueue = Promise.resolve();\n        this.payloads = [];\n    }\n    add(payload, time) {\n        this.payloads.push({ payload, time });\n        let spanCount = this.payloads.reduce((count, { payload }) => count + countSpansInPayload(payload), 0);\n        while (spanCount > this.retryQueueMaxSize) {\n            const payload = this.payloads.shift();\n            if (!payload) {\n                break;\n            }\n            spanCount -= countSpansInPayload(payload.payload);\n        }\n    }\n    async flush() {\n        if (this.payloads.length === 0)\n            return;\n        const payloads = this.payloads;\n        this.payloads = [];\n        this.requestQueue = this.requestQueue.then(async () => {\n            for (const { payload, time } of payloads) {\n                // discard payloads at least 24 hours old\n                if (Date.now() >= time + msInDay)\n                    continue;\n                try {\n                    const { state } = await this.delivery.send(payload);\n                    switch (state) {\n                        case 'success':\n                        case 'failure-discard':\n                            break;\n                        case 'failure-retryable':\n                            this.add(payload, time);\n                            break;\n                        default:\n                            state;\n                    }\n                }\n                catch (err) { }\n            }\n        });\n        await this.requestQueue;\n    }\n}\nfunction countSpansInPayload(payload) {\n    let count = 0;\n    for (let i = 0; i < payload.body.resourceSpans.length; ++i) {\n        const scopeSpans = payload.body.resourceSpans[i].scopeSpans;\n        for (let j = 0; j < scopeSpans.length; ++j) {\n            count += scopeSpans[j].spans.length;\n        }\n    }\n    return count;\n}\n\nexport { InMemoryQueue };\n","import { responseStateFromStatusCode } from '@bugsnag/core-performance';\n\nfunction samplingProbabilityFromHeaders(headers) {\n    const value = headers.get('Bugsnag-Sampling-Probability');\n    if (typeof value !== 'string') {\n        return undefined;\n    }\n    const asNumber = Number.parseFloat(value);\n    if (Number.isNaN(asNumber) || asNumber < 0 || asNumber > 1) {\n        return undefined;\n    }\n    return asNumber;\n}\nfunction createFetchDeliveryFactory(fetch, clock, backgroundingListener) {\n    // if a backgrounding listener is supplied, set fetch's 'keepalive' flag\n    // when the app is backgrounded/terminated so that we can flush the last batch\n    // this may be required on platforms such as browser where without 'keepalive'\n    // the request may be cancelled (or never start sending) when backgrounded\n    // we don't _always_ set the flag because it imposes a 64k payload limit\n    let keepalive = false;\n    if (backgroundingListener) {\n        backgroundingListener.onStateChange(state => {\n            keepalive = state === 'in-background';\n        });\n    }\n    return function fetchDeliveryFactory(endpoint) {\n        return {\n            async send(payload) {\n                const body = JSON.stringify(payload.body);\n                payload.headers['Bugsnag-Sent-At'] = clock.date().toISOString();\n                try {\n                    const response = await fetch(endpoint, {\n                        method: 'POST',\n                        keepalive,\n                        body,\n                        headers: payload.headers\n                    });\n                    return {\n                        state: responseStateFromStatusCode(response.status),\n                        samplingProbability: samplingProbabilityFromHeaders(response.headers)\n                    };\n                }\n                catch (err) {\n                    if (body.length > 10e5) {\n                        return { state: 'failure-discard' };\n                    }\n                    return { state: 'failure-retryable' };\n                }\n            }\n        };\n    };\n}\n\nexport { createFetchDeliveryFactory as default };\n","function defaultNetworkRequestCallback(networkRequestInfo) {\n    return networkRequestInfo;\n}\nfunction isNetworkRequestCallback(value) {\n    return typeof value === 'function';\n}\n\nexport { defaultNetworkRequestCallback, isNetworkRequestCallback };\n","class RequestTracker {\n    constructor() {\n        this.callbacks = [];\n    }\n    onStart(startCallback) {\n        this.callbacks.push(startCallback);\n    }\n    start(context) {\n        const results = [];\n        for (const startCallback of this.callbacks) {\n            const result = startCallback(context);\n            if (result)\n                results.push(result);\n        }\n        return {\n            onRequestEnd: (endContext) => {\n                for (const result of results) {\n                    if (result && result.onRequestEnd) {\n                        result.onRequestEnd(endContext);\n                    }\n                }\n            },\n            extraRequestHeaders: results.map((result) => {\n                if (result && result.extraRequestHeaders) {\n                    return result.extraRequestHeaders;\n                }\n                return undefined;\n            }).filter(isDefined)\n        };\n    }\n}\nfunction isDefined(argument) {\n    return argument !== undefined;\n}\n\nexport { RequestTracker };\n","function getAbsoluteUrl(url, baseUrl) {\n    // if it looks like an absolute url do nothing\n    if (url.indexOf('https://') === 0 || url.indexOf('http://') === 0)\n        return url;\n    try {\n        const absoluteUrl = new URL(url, baseUrl).href;\n        // if a trailing slash has been added inadvertently remove it\n        if (!url.endsWith('/') && absoluteUrl.endsWith('/')) {\n            return absoluteUrl.slice(0, -1);\n        }\n        return absoluteUrl;\n    }\n    catch (_a) {\n        // not a valid URL for some reason - simply return it\n        return url;\n    }\n}\n\nexport { getAbsoluteUrl as default };\n","import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createStartContext(startTime, input, init, baseUrl) {\n    const inputIsRequest = isRequest(input);\n    const url = inputIsRequest ? input.url : String(input);\n    const method = (!!init && init.method) || (inputIsRequest && input.method) || 'GET';\n    return { url: getAbsoluteUrl(url, baseUrl), method, startTime, type: 'fetch' };\n}\nfunction isRequest(input) {\n    return !!input && typeof input === 'object' && !(input instanceof URL);\n}\nfunction isHeadersInstance(input) {\n    return !!input && typeof input === 'object' && input instanceof Headers;\n}\nfunction createFetchRequestTracker(global, clock) {\n    const requestTracker = new RequestTracker();\n    const originalFetch = global.fetch;\n    global.fetch = function fetch(input, init) {\n        const startContext = createStartContext(clock.now(), input, init, global.document && global.document.baseURI);\n        const { onRequestEnd, extraRequestHeaders } = requestTracker.start(startContext);\n        // Add the headers to the `init` received from the caller\n        const modifiedParams = mergeRequestHeaders(input, init, extraRequestHeaders);\n        return originalFetch.call(this, modifiedParams[0], modifiedParams[1]).then(response => {\n            onRequestEnd({ status: response.status, endTime: clock.now(), state: 'success' });\n            return response;\n        }).catch(error => {\n            onRequestEnd({ error, endTime: clock.now(), state: 'error' });\n            throw error;\n        });\n    };\n    return requestTracker;\n}\nfunction mergeRequestHeaders(input, init, extraRequestHeaders) {\n    if (!extraRequestHeaders)\n        return [input, init];\n    const extraHeaders = extraRequestHeaders.reduce((headers, current) => (Object.assign(Object.assign({}, headers), current)), {});\n    if (isRequest(input) && (!init || !init.headers)) {\n        mergeInputRequestHeaders(extraHeaders, input);\n    }\n    else {\n        init = mergeInitRequestHeaders(extraHeaders, init);\n    }\n    return [input, init];\n}\nfunction mergeInputRequestHeaders(extraRequestHeaders, input) {\n    for (const [name, value] of Object.entries(extraRequestHeaders)) {\n        if (!input.headers.has(name)) {\n            input.headers.set(name, value);\n        }\n    }\n}\nfunction mergeInitRequestHeaders(extraRequestHeaders, init) {\n    if (!init)\n        init = {};\n    if (isHeadersInstance(init.headers)) {\n        for (const [name, value] of Object.entries(extraRequestHeaders)) {\n            if (!init.headers.has(name)) {\n                init.headers.set(name, value);\n            }\n        }\n        return init;\n    }\n    else {\n        return Object.assign(Object.assign({}, init), { headers: Object.assign(Object.assign({}, extraRequestHeaders), init.headers) });\n    }\n}\n\nexport { createFetchRequestTracker as default };\n","import { isObject } from '@bugsnag/core-performance'\n\nexport interface SendPageAttributes {\n  referrer?: boolean\n  title?: boolean\n  url?: boolean\n}\n\nexport const defaultSendPageAttributes = {\n  referrer: true,\n  title: true,\n  url: true\n}\n\nexport function getPermittedAttributes (sendPageAttributes: SendPageAttributes) {\n  return {\n    ...defaultSendPageAttributes,\n    ...sendPageAttributes\n  }\n}\n\nexport function isSendPageAttributes (obj: unknown): obj is SendPageAttributes {\n  const allowedTypes = ['undefined', 'boolean']\n  const keys = Object.keys(defaultSendPageAttributes)\n\n  return isObject(obj) && keys.every(key => allowedTypes.includes(typeof obj[key]))\n}\n","import type { SpanContext, SpanFactory } from '@bugsnag/core-performance'\nimport { type BrowserConfiguration } from '../config'\nimport { type PerformanceWithTiming } from '../on-settle/load-event-end-settler'\n\ntype PageLoadPhase = 'Unload'\n| 'Redirect'\n| 'LoadFromCache'\n| 'DNSLookup'\n| 'TCPHandshake'\n| 'TLS'\n| 'HTTPRequest'\n| 'HTTPResponse'\n| 'DomContentLoadedEvent'\n| 'LoadEvent'\n\nfunction shouldOmitSpan (startTime?: number, endTime?: number): boolean {\n  return (startTime === undefined || endTime === undefined) ||\n  (startTime === 0 && endTime === 0)\n}\n\nexport const instrumentPageLoadPhaseSpans = (\n  spanFactory: SpanFactory<BrowserConfiguration>,\n  performance: PerformanceWithTiming,\n  route: string,\n  parentContext: SpanContext\n) => {\n  function createPageLoadPhaseSpan (phase: PageLoadPhase, startTime: number, endTime: number) {\n    if (shouldOmitSpan(startTime, endTime)) return\n    const span = spanFactory.startSpan(`[PageLoadPhase/${phase}]${route}`, {\n      startTime,\n      parentContext,\n      makeCurrentContext: false\n    })\n\n    span.setAttribute('bugsnag.span.category', 'page_load_phase')\n    span.setAttribute('bugsnag.phase', phase)\n    spanFactory.endSpan(span, endTime)\n  }\n\n  const entries = performance.getEntriesByType('navigation') as PerformanceNavigationTiming[]\n  const entry = Array.isArray(entries) && entries[0]\n\n  if (entry) {\n    createPageLoadPhaseSpan('Unload', entry.unloadEventStart, entry.unloadEventEnd)\n    createPageLoadPhaseSpan('Redirect', entry.redirectStart, entry.redirectEnd)\n    createPageLoadPhaseSpan('LoadFromCache', entry.fetchStart, entry.domainLookupStart)\n    createPageLoadPhaseSpan('DNSLookup', entry.domainLookupStart, entry.domainLookupEnd)\n\n    // secureConectionStart will be 0 if no secure connection is used so use connectEnd in that case\n    const TCPHandshakeEnd = entry.secureConnectionStart || entry.connectEnd\n    createPageLoadPhaseSpan('TCPHandshake', entry.connectStart, TCPHandshakeEnd)\n\n    createPageLoadPhaseSpan('TLS', entry.secureConnectionStart, entry.connectEnd)\n    createPageLoadPhaseSpan('HTTPRequest', entry.requestStart, entry.responseStart)\n    createPageLoadPhaseSpan('HTTPResponse', entry.responseStart, entry.responseEnd)\n    createPageLoadPhaseSpan('DomContentLoadedEvent', entry.domContentLoadedEventStart, entry.domContentLoadedEventEnd)\n    createPageLoadPhaseSpan('LoadEvent', entry.loadEventStart, entry.loadEventEnd)\n  }\n}\n","import { type OnSettle } from './on-settle'\nimport { getAbsoluteUrl } from '@bugsnag/request-tracker-performance'\nimport { type RouteResolver, type RoutingProvider, type StartRouteChangeCallback } from './routing-provider'\n\nexport const defaultRouteResolver: RouteResolver = (url: URL) => url.pathname || '/'\n\nexport const createNoopRoutingProvider = () => {\n  return class NoopRoutingProvider implements RoutingProvider {\n    resolveRoute: RouteResolver\n\n    constructor (resolveRoute = defaultRouteResolver) {\n      this.resolveRoute = resolveRoute\n    }\n\n    listenForRouteChanges (startRouteChangeSpan: StartRouteChangeCallback) {}\n  }\n}\n\nexport const createDefaultRoutingProvider = (onSettle: OnSettle, location: Location) => {\n  return class DefaultRoutingProvider implements RoutingProvider {\n    resolveRoute: RouteResolver\n\n    constructor (resolveRoute = defaultRouteResolver) {\n      this.resolveRoute = resolveRoute\n    }\n\n    listenForRouteChanges (startRouteChangeSpan: StartRouteChangeCallback) {\n      addEventListener('popstate', (ev) => {\n        const url = new URL(location.href)\n        const span = startRouteChangeSpan(url, 'popstate')\n\n        onSettle((endTime) => {\n          span.end(endTime)\n        })\n      })\n\n      const originalPushState = history.pushState\n      history.pushState = function (...args) {\n        const url = args[2]\n\n        if (url) {\n          const absoluteURL = new URL(getAbsoluteUrl(url.toString(), document.baseURI))\n          const span = startRouteChangeSpan(absoluteURL, 'pushState')\n\n          onSettle((endTime) => {\n            span.end(endTime)\n          })\n        }\n\n        originalPushState.apply(this, args)\n      }\n    }\n  }\n}\n","import {\n  type BackgroundingListener,\n  type InternalConfiguration,\n  type Plugin,\n  type SpanFactory\n} from '@bugsnag/core-performance'\nimport { type BrowserConfiguration } from '../config'\nimport { type OnSettle } from '../on-settle'\nimport { type PerformanceWithTiming } from '../on-settle/load-event-end-settler'\nimport { getPermittedAttributes } from '../send-page-attributes'\nimport { type WebVitals } from '../web-vitals'\nimport { instrumentPageLoadPhaseSpans } from './page-load-phase-spans'\nimport { defaultRouteResolver } from '../default-routing-provider'\n\nexport class FullPageLoadPlugin implements Plugin<BrowserConfiguration> {\n  private readonly spanFactory: SpanFactory<BrowserConfiguration>\n  private readonly document: Document\n  private readonly location: Location\n  private readonly onSettle: OnSettle\n  private readonly webVitals: WebVitals\n  private readonly performance: PerformanceWithTiming\n\n  // if the page was backgrounded at any point in the loading process a page\n  // load span is invalidated as the browser will deprioritise the page\n  private wasBackgrounded: boolean = false\n\n  constructor (\n    document: Document,\n    location: Location,\n    spanFactory: SpanFactory<BrowserConfiguration>,\n    webVitals: WebVitals,\n    onSettle: OnSettle,\n    backgroundingListener: BackgroundingListener,\n    performance: PerformanceWithTiming\n  ) {\n    this.document = document\n    this.location = location\n    this.spanFactory = spanFactory\n    this.webVitals = webVitals\n    this.onSettle = onSettle\n    this.performance = performance\n\n    backgroundingListener.onStateChange(state => {\n      if (!this.wasBackgrounded && state === 'in-background') {\n        this.wasBackgrounded = true\n      }\n    })\n  }\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    // don't report a page load span if the option is turned off or the page was\n    // backgrounded at any point in the loading process\n    if (!configuration.autoInstrumentFullPageLoads || this.wasBackgrounded) {\n      return\n    }\n\n    const span = this.spanFactory.startSpan('[FullPageLoad]', { startTime: 0, parentContext: null })\n    const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes)\n    const url = new URL(this.location.href)\n\n    this.onSettle((endTime: number) => {\n      if (this.wasBackgrounded) return\n\n      // ensure there's always a route on this span by falling back to the\n      // default route resolver - the pipeline will ignore page load spans that\n      // don't have a route\n      const route = configuration.routingProvider.resolveRoute(url) || defaultRouteResolver(url)\n      span.name += route\n\n      instrumentPageLoadPhaseSpans(this.spanFactory, this.performance, route, span)\n\n      // Browser attributes\n      span.setAttribute('bugsnag.span.category', 'full_page_load')\n      span.setAttribute('bugsnag.browser.page.route', route)\n      if (permittedAttributes.referrer) span.setAttribute('bugsnag.browser.page.referrer', this.document.referrer)\n      if (permittedAttributes.title) span.setAttribute('bugsnag.browser.page.title', this.document.title)\n      if (permittedAttributes.url) span.setAttribute('bugsnag.browser.page.url', url.toString())\n\n      this.webVitals.attachTo(span)\n      this.spanFactory.endSpan(span, endTime)\n    })\n  }\n}\n","import type { InternalConfiguration, Logger, Plugin, SpanContextStorage, SpanFactory, SpanInternal } from '@bugsnag/core-performance'\nimport {\n  defaultNetworkRequestCallback,\n  type NetworkRequestCallback,\n  type NetworkRequestInfo,\n  type RequestEndContext,\n  type RequestStartCallback,\n  type RequestStartContext,\n  type RequestTracker\n} from '@bugsnag/request-tracker-performance'\nimport { type BrowserConfiguration } from '../config'\n\nexport interface BrowserNetworkRequestInfo extends NetworkRequestInfo {\n  readonly type: PerformanceResourceTiming['initiatorType']\n\n  /**\n   * Experimental. Whether to propagate trace context by adding a `traceparent` header to the request.\n   */\n  propagateTraceContext?: boolean\n}\n\nconst permittedPrefixes = ['http://', 'https://', '/', './', '../']\n\nexport class NetworkRequestPlugin implements Plugin<BrowserConfiguration> {\n  private configEndpoint: string = ''\n  private networkRequestCallback: NetworkRequestCallback<BrowserNetworkRequestInfo> = defaultNetworkRequestCallback\n  private logger: Logger = { debug: console.debug, warn: console.warn, info: console.info, error: console.error }\n\n  constructor (\n    private spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly spanContextStorage: SpanContextStorage,\n    private fetchTracker: RequestTracker,\n    private xhrTracker: RequestTracker\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    this.logger = configuration.logger\n\n    if (configuration.autoInstrumentNetworkRequests) {\n      this.configEndpoint = configuration.endpoint\n      this.xhrTracker.onStart(this.trackRequest)\n      this.fetchTracker.onStart(this.trackRequest)\n      this.networkRequestCallback = configuration.networkRequestCallback\n    }\n  }\n\n  private trackRequest: RequestStartCallback = (startContext) => {\n    if (!this.shouldTrackRequest(startContext)) return\n\n    const shouldPropagateTraceContextByDefault = false\n\n    const defaultRequestInfo: BrowserNetworkRequestInfo = {\n      url: startContext.url,\n      type: startContext.type,\n      propagateTraceContext: shouldPropagateTraceContextByDefault\n    }\n\n    const networkRequestInfo = this.networkRequestCallback(defaultRequestInfo)\n\n    // returning null neither creates a span nor propagates trace context\n    if (!networkRequestInfo) {\n      return {\n        onRequestEnd: undefined,\n        extraRequestHeaders: undefined\n      }\n    }\n\n    if (networkRequestInfo.propagateTraceContext === undefined) {\n      networkRequestInfo.propagateTraceContext = shouldPropagateTraceContextByDefault\n    }\n\n    // a span is not created if url is null\n    if (!networkRequestInfo.url) {\n      return {\n        onRequestEnd: undefined,\n        // propagate trace context if requested using span context\n        extraRequestHeaders: networkRequestInfo.propagateTraceContext ? this.getExtraRequestHeaders() : undefined\n      }\n    }\n\n    // otherwise, create a span and propagate trace context if requested\n    if (typeof networkRequestInfo.url !== 'string') {\n      this.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`)\n      return\n    }\n\n    const span = this.spanFactory.startNetworkSpan({\n      method: startContext.method,\n      startTime: startContext.startTime,\n      url: networkRequestInfo.url\n    })\n\n    return {\n      onRequestEnd: (endContext: RequestEndContext) => {\n        if (endContext.state === 'success') {\n          this.spanFactory.endSpan(span, endContext.endTime, { 'http.status_code': endContext.status })\n        }\n      },\n      // propagate trace context using network span\n      extraRequestHeaders: networkRequestInfo.propagateTraceContext\n        ? this.getExtraRequestHeaders(span)\n        : undefined\n    }\n  }\n\n  private shouldTrackRequest (startContext: RequestStartContext): boolean {\n    return startContext.url !== this.configEndpoint && permittedPrefixes.some((prefix) => startContext.url.startsWith(prefix))\n  }\n\n  private getExtraRequestHeaders (span?: SpanInternal): Record<string, string> {\n    const extraRequestHeaders: Record<string, string> = {}\n\n    if (span) {\n      const traceId = span.traceId\n      const parentSpanId = span.id\n      const sampled = this.spanFactory.sampler.shouldSample(span.samplingRate)\n\n      extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled)\n    } else if (this.spanContextStorage.current) {\n      const currentSpanContext = this.spanContextStorage.current\n\n      const traceId = currentSpanContext.traceId\n      const parentSpanId = currentSpanContext.id\n      const sampled = this.spanFactory.sampler.shouldSample(currentSpanContext.samplingRate)\n\n      extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled)\n    }\n\n    return extraRequestHeaders\n  }\n}\n\nfunction buildTraceparentHeader (traceId: string, parentSpanId: string, sampled: boolean): string {\n  return `00-${traceId}-${parentSpanId}-${sampled ? '01' : '00'}`\n}\n","import { type SpanContextStorage, type InternalConfiguration, type Plugin, type SpanFactory } from '@bugsnag/core-performance'\nimport { type BrowserConfiguration } from '../config'\n\ninterface ResourceTiming extends PerformanceResourceTiming {\n  responseStatus?: number // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStatus\n}\n\nexport function getHttpVersion (protocol: string) {\n  switch (protocol) {\n    case '':\n      return undefined\n    case 'http/1.0':\n      return '1.0'\n    case 'http/1.1':\n      return '1.1'\n    case 'h2':\n    case 'h2c':\n      return '2.0'\n    case 'h3':\n      return '3.0'\n    case 'spdy/1':\n    case 'spdy/2':\n    case 'spdy/3':\n      return 'SPDY'\n    default:\n      return protocol\n  }\n}\n\nfunction resourceLoadSupported (PerformanceObserverClass: typeof PerformanceObserver) {\n  return PerformanceObserverClass &&\n    Array.isArray(PerformanceObserverClass.supportedEntryTypes) &&\n    PerformanceObserverClass.supportedEntryTypes.includes('resource')\n}\n\nexport class ResourceLoadPlugin implements Plugin<BrowserConfiguration> {\n  constructor (\n    private readonly spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly spanContextStorage: SpanContextStorage,\n    private readonly PerformanceObserverClass: typeof PerformanceObserver\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    if (!resourceLoadSupported(this.PerformanceObserverClass)) return\n\n    const observer = new this.PerformanceObserverClass((list) => {\n      const entries = list.getEntries() as ResourceTiming[]\n\n      for (const entry of entries) {\n        if (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') {\n          continue\n        }\n\n        const parentContext = this.spanContextStorage.first\n\n        if (parentContext) {\n          const networkRequestInfo = configuration.networkRequestCallback({ url: entry.name, type: entry.initiatorType })\n\n          if (!networkRequestInfo) return\n\n          if (typeof networkRequestInfo.url !== 'string') {\n            configuration.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`)\n            return\n          }\n\n          let name = ''\n          try {\n            const url = new URL(networkRequestInfo.url)\n            url.search = ''\n            name = url.href\n          } catch (err) {\n            configuration.logger.warn(`Unable to parse URL returned from networkRequestCallback: ${networkRequestInfo.url}`)\n            return\n          }\n\n          const span = this.spanFactory.startSpan(`[ResourceLoad]${name}`, {\n            parentContext,\n            startTime: entry.startTime,\n            makeCurrentContext: false\n          })\n\n          span.setAttribute('bugsnag.span.category', 'resource_load')\n          span.setAttribute('http.url', networkRequestInfo.url)\n\n          const httpFlavor = getHttpVersion(entry.nextHopProtocol)\n          if (httpFlavor) {\n            span.setAttribute('http.flavor', httpFlavor)\n          }\n\n          if (entry.encodedBodySize && entry.decodedBodySize) {\n            span.setAttribute('http.response_content_length', entry.encodedBodySize)\n            span.setAttribute('http.response_content_length_uncompressed', entry.decodedBodySize)\n          }\n\n          if (entry.responseStatus) {\n            span.setAttribute('http.status_code', entry.responseStatus)\n          }\n\n          this.spanFactory.endSpan(span, entry.responseEnd)\n        }\n      }\n    })\n\n    try {\n      observer.observe({ type: 'resource', buffered: true })\n    } catch (err) {\n      configuration.logger.warn('Unable to get previous resource loads as buffered observer not supported, only showing resource loads from this point on')\n      observer.observe({ entryTypes: ['resource'] })\n    }\n  }\n}\n","import { coreSpanOptionSchema, isString, type InternalConfiguration, type Plugin, type SpanFactory, type SpanOptionSchema, type Time, isObject } from '@bugsnag/core-performance'\nimport { type BrowserConfiguration } from '../config'\nimport { type RouteChangeSpanEndOptions, type RouteChangeSpanOptions } from '../routing-provider'\nimport { getPermittedAttributes } from '../send-page-attributes'\nimport { defaultRouteResolver } from '../default-routing-provider'\n\n// exclude isFirstClass from the route change option schema\nconst { startTime, parentContext, makeCurrentContext } = coreSpanOptionSchema\nconst routeChangeSpanOptionSchema: SpanOptionSchema = {\n  startTime,\n  parentContext,\n  makeCurrentContext,\n  trigger: {\n    getDefaultValue: (value) => String(value),\n    message: 'should be a string',\n    validate: isString\n  }\n}\n\ninterface InternalRouteChangeSpanOptions extends RouteChangeSpanOptions {\n  url: URL\n  trigger: string\n}\n\nexport class RouteChangePlugin implements Plugin<BrowserConfiguration> {\n  constructor (\n    private readonly spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly location: Location,\n    private readonly document: Document\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    if (!configuration.autoInstrumentRouteChanges) return\n\n    const previousUrl = new URL(this.location.href)\n    let previousRoute = configuration.routingProvider.resolveRoute(previousUrl) || defaultRouteResolver(previousUrl)\n\n    const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes)\n\n    configuration.routingProvider.listenForRouteChanges((url, trigger, options) => {\n      let absoluteUrl\n\n      if (url instanceof URL) {\n        absoluteUrl = url\n      } else {\n        try {\n          const stringUrl = String(url)\n          absoluteUrl = new URL(stringUrl)\n        } catch (err) {\n          configuration.logger.warn('Invalid span options\\n  - url should be a URL')\n\n          return {\n            id: '',\n            traceId: '',\n            samplingRate: 0,\n            isValid: () => false,\n            end: () => {}\n          }\n        }\n      }\n\n      // create internal options for validation\n      const routeChangeSpanOptions = {\n        ...options,\n        trigger\n      }\n\n      const cleanOptions = this.spanFactory.validateSpanOptions<InternalRouteChangeSpanOptions>(\n        '[RouteChange]',\n        routeChangeSpanOptions,\n        routeChangeSpanOptionSchema\n      )\n\n      const route = configuration.routingProvider.resolveRoute(absoluteUrl) || defaultRouteResolver(absoluteUrl)\n\n      // update the span name using the validated route\n      cleanOptions.name += route\n      const span = this.spanFactory.startSpan(cleanOptions.name, cleanOptions.options)\n\n      span.setAttribute('bugsnag.span.category', 'route_change')\n      span.setAttribute('bugsnag.browser.page.route', route)\n      span.setAttribute('bugsnag.browser.page.previous_route', previousRoute)\n      span.setAttribute('bugsnag.browser.page.route_change.trigger', cleanOptions.options.trigger)\n      if (permittedAttributes.url) span.setAttribute('bugsnag.browser.page.url', url.toString())\n\n      previousRoute = route\n\n      return {\n        id: span.id,\n        traceId: span.traceId,\n        isValid: span.isValid,\n        samplingRate: span.samplingRate,\n        end: (endTimeOrOptions?: Time | RouteChangeSpanEndOptions): void => {\n          const options: RouteChangeSpanEndOptions = isObject(endTimeOrOptions) ? endTimeOrOptions : { endTime: endTimeOrOptions }\n\n          if (permittedAttributes.title) {\n            span.setAttribute('bugsnag.browser.page.title', this.document.title)\n          }\n\n          if (options.url) {\n            const urlObject = ensureUrl(options.url) // convert strings to URL if necessary\n            const route = configuration.routingProvider.resolveRoute(urlObject) || defaultRouteResolver(urlObject)\n\n            span.name = `[RouteChange]${route}`\n            span.setAttribute('bugsnag.browser.page.route', route)\n            previousRoute = route\n\n            // update the URL attribute as well\n            if (permittedAttributes.url) {\n              span.setAttribute('bugsnag.browser.page.url', urlObject.toString())\n            }\n          }\n\n          this.spanFactory.toPublicApi(span).end(options.endTime)\n        }\n\n      }\n    })\n  }\n}\n\nfunction ensureUrl (url: string | URL): URL {\n  if (typeof url === 'string') {\n    return new URL(url)\n  }\n  return url\n}\n","import { type BackgroundingListener, type Clock, millisecondsToNanoseconds } from '@bugsnag/core-performance'\n\n// a cut-down PerformanceTiming interface, since we don't care about most of\n// its properties\ninterface PerformanceTiming {\n  navigationStart: number\n}\n\n// the 'Performance' type says 'timeOrigin' is always available, but that's not\n// true on Safari <15 so we mark it as possibly 'undefined'\ninterface PerformanceWithOptionalTimeOrigin {\n  now: () => number\n  timeOrigin?: number\n  timing: PerformanceTiming\n}\n\n// maximum allowed clock divergence in milliseconds\nconst MAX_CLOCK_DRIFT_MS = 300000\n\nfunction recalculateTimeOrigin (timeOrigin: number, performance: PerformanceWithOptionalTimeOrigin): number {\n  // if the machine has been sleeping the monatomic clock used by performance.now() may have been paused,\n  // so we need to check if this has drifted significantly from Date.now()\n  // if the drift is > 5 minutes re-set the clock's origin to bring it back in line with Date.now()\n  if (Math.abs(Date.now() - (timeOrigin + performance.now())) > MAX_CLOCK_DRIFT_MS) {\n    return Date.now() - performance.now()\n  }\n\n  return timeOrigin\n}\n\nfunction createClock (performance: PerformanceWithOptionalTimeOrigin, backgroundingListener: BackgroundingListener): Clock {\n  const initialTimeOrigin = performance.timeOrigin === undefined\n    ? performance.timing.navigationStart\n    : performance.timeOrigin\n\n  // the performance clock could be shared between different tabs running in the same process\n  // so may already have diverged - for this reason we calculate a time origin when we first create the clock\n  // as well as when the app returns to the foreground\n  let calculatedTimeOrigin = recalculateTimeOrigin(initialTimeOrigin, performance)\n  backgroundingListener.onStateChange(state => {\n    if (state === 'in-foreground') {\n      calculatedTimeOrigin = recalculateTimeOrigin(calculatedTimeOrigin, performance)\n    }\n  })\n\n  return {\n    now: () => performance.now(),\n    date: () => new Date(calculatedTimeOrigin + performance.now()),\n    convert: (date) => date.getTime() - calculatedTimeOrigin,\n    // convert milliseconds since timeOrigin to full timestamp\n    toUnixTimestampNanoseconds: (time: number) => millisecondsToNanoseconds(calculatedTimeOrigin + time).toString()\n  }\n}\n\nexport default createClock\n","import { isObject, type Time, type Span, type SpanOptions } from '@bugsnag/core-performance'\n\nexport type RouteChangeSpanOptions = Omit<SpanOptions, 'isFirstClass'>\nexport type StartRouteChangeCallback = (url: URL | string, trigger: string, options?: RouteChangeSpanOptions) => RouteChangeSpan\n\nexport interface RouteChangeSpanEndOptions {\n  endTime?: number | Date\n  url?: URL | string\n}\n\nexport interface RouteChangeSpan extends Span {\n  end: ((endTime?: Time) => void) & ((routeChangeSpanEndOptions: RouteChangeSpanEndOptions) => void)\n}\n\nexport interface RoutingProvider {\n  resolveRoute: (url: URL) => string\n  listenForRouteChanges: (startRouteChangeSpan: StartRouteChangeCallback) => void\n}\n\nexport type RouteResolver = (url: URL) => string\n\nexport const isRoutingProvider = (value: unknown): value is RoutingProvider =>\n  isObject(value) &&\n    typeof value.resolveRoute === 'function' &&\n    typeof value.listenForRouteChanges === 'function'\n","import type { BitLength, IdGenerator } from '@bugsnag/core-performance'\n\nfunction toHex (value: number): string {\n  const hex = value.toString(16)\n\n  // pad hex with a leading 0 if it's not already 2 characters\n  if (hex.length === 1) {\n    return '0' + hex\n  }\n\n  return hex\n}\n\nconst idGenerator: IdGenerator = {\n  generate (bits: BitLength): string {\n    const bytes = new Uint8Array(bits / 8)\n\n    // TODO: do we just read window here?\n    //       how can we pass this in given it needs to be valid before 'start' is called?\n    const randomValues = window.crypto.getRandomValues(bytes)\n\n    return Array.from(randomValues, toHex).join('')\n  }\n}\n\nexport default idGenerator\n","import { type Clock } from '@bugsnag/core-performance'\nimport { type OnSettleCallback } from '.'\n\nexport abstract class Settler {\n  protected clock: Clock\n  protected settled: boolean = false\n\n  private readonly callbacks: Set<OnSettleCallback> = new Set<OnSettleCallback>()\n\n  constructor (clock: Clock) {\n    this.clock = clock\n  }\n\n  subscribe (callback: OnSettleCallback): void {\n    this.callbacks.add(callback)\n\n    // if we're already settled, call the callback immediately\n    if (this.isSettled()) {\n      callback(this.clock.now())\n    }\n  }\n\n  unsubscribe (callback: OnSettleCallback): void {\n    this.callbacks.delete(callback)\n  }\n\n  isSettled (): boolean {\n    return this.settled\n  }\n\n  protected settle (settledTime: number): void {\n    this.settled = true\n\n    for (const callback of this.callbacks) {\n      callback(settledTime)\n    }\n  }\n}\n","import { type Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\nclass DomMutationSettler extends Settler {\n  private timeout: ReturnType<typeof setTimeout> | undefined = undefined\n\n  constructor (clock: Clock, target: Node) {\n    super(clock)\n\n    const observer = new MutationObserver(() => { this.restart() })\n\n    observer.observe(target, {\n      subtree: true,\n      childList: true,\n      characterData: true\n      // we don't track attribute changes as they may or may not be user visible\n      // so we assume they won't affect the page appearing settled to the user\n    })\n\n    this.restart()\n  }\n\n  private restart (): void {\n    clearTimeout(this.timeout)\n    this.settled = false\n\n    // we wait 100ms to ensure that DOM mutations have actually stopped but\n    // don't want the settled time to reflect that wait, so we record the time\n    // here and use that when settling\n    const settledTime = this.clock.now()\n\n    this.timeout = setTimeout(() => { this.settle(settledTime) }, 100)\n  }\n}\n\nexport default DomMutationSettler\n","import { type Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\ntype AddEventListener = (event: string, callback: () => void) => void\n\nexport interface PerformanceWithTiming {\n  getEntriesByType: typeof performance.getEntriesByType\n  timing: {\n    loadEventEnd: number\n    navigationStart: number\n  }\n}\n\ninterface DocumentWithReadyState {\n  readyState: DocumentReadyState\n}\n\n// check if a PerformanceEntry is a PerformanceNavigationTiming\nfunction isPerformanceNavigationTiming (entry?: PerformanceEntry): entry is PerformanceNavigationTiming {\n  return !!entry && entry.entryType === 'navigation'\n}\n\nclass LoadEventEndSettler extends Settler {\n  constructor (\n    clock: Clock,\n    addEventListener: AddEventListener,\n    performance: PerformanceWithTiming,\n    document: DocumentWithReadyState\n  ) {\n    super(clock)\n\n    // we delay settling by a macrotask so that the load event has ended\n    // see: https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context/25933985#25933985\n    //      https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n    if (document.readyState === 'complete') {\n      setTimeout(() => { this.settleUsingPerformance(performance) }, 0)\n    } else {\n      addEventListener('load', () => {\n        setTimeout(() => { this.settleUsingPerformance(performance) }, 0)\n      })\n    }\n  }\n\n  private settleUsingPerformance (performance: PerformanceWithTiming) {\n    const now = this.clock.now()\n\n    // there's only ever one navigation entry\n    // PLAT-10204 Prevent snags occuring due to DOM scanning bots like BuiltWith https://builtwith.com/biup\n    const entry = typeof performance.getEntriesByType === 'function' ? performance.getEntriesByType('navigation')[0] : undefined\n\n    let settledTime = 0\n\n    if (isPerformanceNavigationTiming(entry)) {\n      settledTime = entry.loadEventEnd\n    } else if (performance.timing) {\n      settledTime = performance.timing.loadEventEnd - performance.timing.navigationStart\n    }\n\n    // if the settled time is obviously wrong then use the current time instead\n    // this won't be a perfectly accurate value, but it should be close enough\n    // for this purpose\n    if (settledTime <= 0 || settledTime > now) {\n      settledTime = now\n    }\n\n    this.settle(settledTime)\n  }\n}\n\nexport default LoadEventEndSettler\n","import { type Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\nimport {\n  type RequestStartContext,\n  type RequestEndContext,\n  type RequestTracker\n} from '@bugsnag/request-tracker-performance'\n\nclass RequestSettler extends Settler {\n  private timeout: ReturnType<typeof setTimeout> | undefined = undefined\n  private urlsToIgnore: RegExp[] = []\n  private outstandingRequests = 0\n\n  constructor (clock: Clock, requestTracker: RequestTracker) {\n    super(clock)\n\n    // unlike most other settlers we start settled as it's possible to not make\n    // any requests at all\n    // TODO: we actually should only be settled if there are no outstanding\n    //       requests when constructed\n    this.settled = true\n\n    requestTracker.onStart(this.onRequestStart.bind(this))\n  }\n\n  setUrlsToIgnore (urlsToIgnore: RegExp[]): void {\n    this.urlsToIgnore = urlsToIgnore\n  }\n\n  private onRequestStart (startContext: RequestStartContext) {\n    // if this is an excluded URL, ignore this request\n    if (this.shouldIgnoreUrl(startContext.url)) return\n\n    clearTimeout(this.timeout)\n    this.settled = false\n    ++this.outstandingRequests\n\n    return {\n      onRequestEnd: (endContext: RequestEndContext): void => {\n        if (--this.outstandingRequests === 0) {\n          // we wait 100ms to ensure that requests have actually stopped but don't\n          // want the settled time to reflect that wait, so we record the time\n          // here and use that when settling\n          const settledTime = this.clock.now()\n\n          this.timeout = setTimeout(() => { this.settle(settledTime) }, 100)\n        }\n      }\n    }\n  }\n\n  private shouldIgnoreUrl (url: string): boolean {\n    return this.urlsToIgnore.some(regexp => regexp.test(url))\n  }\n}\n\nexport default RequestSettler\n","import { type Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\n/**\n * SettlerAggregate is a Settler that is settled when ALL Settlers it is\n * constructed with are settled themselves\n */\nclass SettlerAggregate extends Settler {\n  private readonly settlers: Settler[]\n\n  constructor (clock: Clock, settlers: Settler[]) {\n    super(clock)\n    this.settlers = settlers\n\n    for (const settler of settlers) {\n      settler.subscribe((settledTime: number) => {\n        // we need to check if all of the settlers are settled here as a\n        // previously settled settler could have unsettled in the meantime\n        if (this.settlersAreSettled()) {\n          this.settle(settledTime)\n        } else {\n          this.settled = false\n        }\n      })\n    }\n  }\n\n  isSettled () {\n    // ensure all child settlers are settled as well; it's possible for all of\n    // them to have settled previously only for one to unsettle\n    return super.isSettled() && this.settlersAreSettled()\n  }\n\n  private settlersAreSettled (): boolean {\n    for (const settler of this.settlers) {\n      if (!settler.isSettled()) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nexport default SettlerAggregate\n","import {\n  InMemoryPersistence,\n  toPersistedPayload,\n  type Persistence,\n  type PersistenceKey,\n  type PersistencePayloadMap\n} from '@bugsnag/core-performance'\n\ninterface LocalStorage {\n  setItem: (key: string, value: string) => void\n  getItem: (key: string) => string | null\n}\n\ninterface WindowWithLocalStorage {\n  localStorage?: LocalStorage\n}\n\nfunction makeBrowserPersistence (window: WindowWithLocalStorage): Persistence {\n  // accessing localStorage can throw on some browsers, so we have to catch\n  // these errors and provide a fallback\n  try {\n    if (window.localStorage) {\n      return new BrowserPersistence(window.localStorage)\n    }\n  } catch {}\n\n  // store items in memory if localStorage isn't available\n  return new InMemoryPersistence()\n}\n\nfunction toString<K extends PersistenceKey> (key: K, value: PersistencePayloadMap[K]): string {\n  switch (key) {\n    case 'bugsnag-sampling-probability':\n      return JSON.stringify(value)\n\n    case 'bugsnag-anonymous-id':\n      return value as string\n\n    default:\n      key satisfies never\n      return key\n  }\n}\n\nclass BrowserPersistence implements Persistence {\n  private readonly storage: LocalStorage\n\n  constructor (localStorage: LocalStorage) {\n    this.storage = localStorage\n  }\n\n  async load<K extends PersistenceKey> (key: K): Promise<PersistencePayloadMap[K] | undefined> {\n    try {\n      const raw = this.storage.getItem(key)\n\n      if (raw) {\n        return toPersistedPayload(key, raw)\n      }\n    } catch {}\n  }\n\n  async save<K extends PersistenceKey> (key: K, value: PersistencePayloadMap[K]): Promise<void> {\n    try {\n      this.storage.setItem(key, toString(key, value))\n    } catch {}\n  }\n}\n\nexport default makeBrowserPersistence\n","import { type Clock, type SpanInternal } from '@bugsnag/core-performance'\n\ninterface PerformanceWithNavigationTiming {\n  getEntriesByName: typeof performance.getEntriesByName\n  getEntriesByType: typeof performance.getEntriesByType\n  timing: {\n    responseStart: number\n    navigationStart: number\n  }\n}\n\n// layout shifts are grouped into \"session windows\", which is defined as a set\n// of layout shifts that occur with less than 1 second between each shift and a\n// maximum of 5 seconds total duration\n// see the web vitals definition:\n// https://web.dev/evolving-cls/#why-a-session-window\ninterface LayoutShiftSession {\n  value: number\n  readonly firstStartTime: number\n  previousStartTime: number\n}\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\ninterface LayoutShift extends PerformanceEntry {\n  entryType: 'layout-shift'\n  value: number\n  hadRecentInput: boolean\n  lastInputTime: number\n}\n\nexport class WebVitals {\n  private readonly performance: PerformanceWithNavigationTiming\n  private readonly clock: Clock\n  private readonly observers: PerformanceObserver[]\n\n  private largestContentfulPaint: number | undefined\n  private cumulativeLayoutShift: number | undefined\n\n  constructor (\n    performance: PerformanceWithNavigationTiming,\n    clock: Clock,\n    PerformanceObserverClass?: typeof PerformanceObserver\n  ) {\n    this.performance = performance\n    this.clock = clock\n    this.observers = []\n\n    if (PerformanceObserverClass && Array.isArray(PerformanceObserverClass.supportedEntryTypes)) {\n      const supportedEntryTypes = PerformanceObserverClass.supportedEntryTypes\n\n      if (supportedEntryTypes.includes('largest-contentful-paint')) {\n        this.observeLargestContentfulPaint(PerformanceObserverClass)\n      }\n\n      if (supportedEntryTypes.includes('layout-shift')) {\n        this.observeLayoutShift(PerformanceObserverClass)\n      }\n    }\n  }\n\n  attachTo (span: SpanInternal) {\n    const firstContentfulPaint = this.firstContentfulPaint()\n\n    if (firstContentfulPaint) {\n      span.addEvent('fcp', firstContentfulPaint)\n    }\n\n    const timeToFirstByte = this.timeToFirstByte()\n\n    if (timeToFirstByte) {\n      span.addEvent('ttfb', timeToFirstByte)\n    }\n\n    const firstInputDelay = this.firstInputDelay()\n\n    if (firstInputDelay) {\n      span.addEvent('fid_start', firstInputDelay.start)\n      span.addEvent('fid_end', firstInputDelay.end)\n    }\n\n    if (this.cumulativeLayoutShift) {\n      span.setAttribute('bugsnag.metrics.cls', this.cumulativeLayoutShift)\n    }\n\n    if (this.largestContentfulPaint) {\n      span.addEvent('lcp', this.largestContentfulPaint)\n    }\n\n    // as there is only 1 page load span, we don't need to keep observing\n    // performance events, so can disconnect from any observers we've registered\n    for (const observer of this.observers) {\n      observer.disconnect()\n    }\n  }\n\n  private firstContentfulPaint () {\n    const entries = this.performance.getEntriesByName('first-contentful-paint', 'paint')\n    const entry = Array.isArray(entries) && entries[0]\n\n    if (entry) {\n      return entry.startTime\n    }\n  }\n\n  private timeToFirstByte () {\n    const entries = this.performance.getEntriesByType('navigation') as PerformanceNavigationTiming[]\n    const entry = Array.isArray(entries) && entries[0]\n\n    let responseStart: number\n\n    if (entry) {\n      responseStart = entry.responseStart\n    } else {\n      responseStart = this.performance.timing.responseStart - this.performance.timing.navigationStart\n    }\n\n    // only use responseStart if it's valid (between 0 and the current time)\n    // any other value cannot be valid because it would mean the response\n    // started immediately or hasn't happened yet!\n    if (responseStart > 0 && responseStart <= this.clock.now()) {\n      return responseStart\n    }\n  }\n\n  private firstInputDelay () {\n    const entries = this.performance.getEntriesByType('first-input') as PerformanceEventTiming[]\n    const entry = Array.isArray(entries) && entries[0]\n\n    if (entry) {\n      return {\n        start: entry.startTime,\n        end: entry.processingStart\n      }\n    }\n  }\n\n  private observeLargestContentfulPaint (\n    PerformanceObserverClass: typeof PerformanceObserver\n  ): void {\n    const observer = new PerformanceObserverClass((list) => {\n      const entries = list.getEntries()\n\n      if (entries.length > 0) {\n        // Use the latest LCP candidate\n        this.largestContentfulPaint = entries[entries.length - 1].startTime\n      }\n    })\n\n    observer.observe({ type: 'largest-contentful-paint', buffered: true })\n\n    this.observers.push(observer)\n  }\n\n  private observeLayoutShift (\n    PerformanceObserverClass: typeof PerformanceObserver\n  ): void {\n    let session: LayoutShiftSession | undefined\n\n    const observer = new PerformanceObserverClass((list) => {\n      for (const entry of list.getEntries() as LayoutShift[]) {\n        // ignore entries with recent input as it's likely the layout shifted due\n        // to user input and this metric only cares about unexpected layout\n        // shifts\n        if (entry.hadRecentInput) {\n          continue\n        }\n\n        // include this entry in the current session if we have a current session\n        // and this entry fits into the session window (it occurred less than 1\n        // second after the previous entry and the session duration is less than\n        // 5 seconds), otherwise start a new session\n        if (\n          session &&\n          entry.startTime - session.previousStartTime < 1000 &&\n          entry.startTime - session.firstStartTime < 5000\n        ) {\n          session.value += entry.value\n          session.previousStartTime = entry.startTime\n        } else {\n          session = {\n            value: entry.value,\n            firstStartTime: entry.startTime,\n            previousStartTime: entry.startTime\n          }\n        }\n      }\n\n      if (session &&\n        (this.cumulativeLayoutShift === undefined || session.value > this.cumulativeLayoutShift)\n      ) {\n        this.cumulativeLayoutShift = session.value\n      }\n    })\n\n    observer.observe({ type: 'layout-shift', buffered: true })\n\n    this.observers.push(observer)\n  }\n}\n","import { type Client, createClient, createNoopClient, InMemoryQueue } from '@bugsnag/core-performance'\nimport createFetchDeliveryFactory from '@bugsnag/delivery-fetch-performance'\nimport { createFetchRequestTracker, createXmlHttpRequestTracker } from '@bugsnag/request-tracker-performance'\nimport { FullPageLoadPlugin, NetworkRequestPlugin, ResourceLoadPlugin, RouteChangePlugin } from './auto-instrumentation'\nimport createBrowserBackgroundingListener from './backgrounding-listener'\nimport createClock from './clock'\nimport { type BrowserConfiguration, createSchema } from './config'\nimport { createDefaultRoutingProvider, createNoopRoutingProvider } from './default-routing-provider'\nimport idGenerator from './id-generator'\nimport createOnSettle, { createNoopOnSettle, type OnSettlePlugin } from './on-settle'\nimport makeBrowserPersistence from './persistence'\nimport createResourceAttributesSource from './resource-attributes-source'\nimport createSpanAttributesSource from './span-attributes-source'\nimport { WebVitals } from './web-vitals'\n\nexport let onSettle: OnSettlePlugin\nexport let DefaultRoutingProvider: ReturnType<typeof createDefaultRoutingProvider>\nlet BugsnagPerformance: Client<BrowserConfiguration>\n\nif (typeof window === 'undefined' || typeof document === 'undefined') {\n  onSettle = createNoopOnSettle()\n  DefaultRoutingProvider = createNoopRoutingProvider()\n  BugsnagPerformance = createNoopClient()\n} else {\n  const backgroundingListener = createBrowserBackgroundingListener(window)\n  const spanAttributesSource = createSpanAttributesSource(document)\n  const clock = createClock(performance, backgroundingListener)\n  const persistence = makeBrowserPersistence(window)\n  const resourceAttributesSource = createResourceAttributesSource(navigator, persistence)\n  const fetchRequestTracker = createFetchRequestTracker(window, clock)\n  const xhrRequestTracker = createXmlHttpRequestTracker(XMLHttpRequest, clock, document)\n  const webVitals = new WebVitals(performance, clock, window.PerformanceObserver)\n  onSettle = createOnSettle(\n    clock,\n    window,\n    fetchRequestTracker,\n    xhrRequestTracker,\n    performance\n  )\n  DefaultRoutingProvider = createDefaultRoutingProvider(onSettle, window.location)\n\n  BugsnagPerformance = createClient({\n    backgroundingListener,\n    clock,\n    resourceAttributesSource,\n    spanAttributesSource,\n    deliveryFactory: createFetchDeliveryFactory(window.fetch, clock, backgroundingListener),\n    idGenerator,\n    schema: createSchema(window.location.hostname, new DefaultRoutingProvider()),\n    plugins: (spanFactory, spanContextStorage) => [\n      onSettle,\n      new FullPageLoadPlugin(\n        document,\n        window.location,\n        spanFactory,\n        webVitals,\n        onSettle,\n        backgroundingListener,\n        performance\n      ),\n      // ResourceLoadPlugin should always come after FullPageLoad plugin, as it should use that\n      // span context as the parent of it's spans\n      new ResourceLoadPlugin(spanFactory, spanContextStorage, window.PerformanceObserver),\n      new NetworkRequestPlugin(spanFactory, spanContextStorage, fetchRequestTracker, xhrRequestTracker),\n      new RouteChangePlugin(spanFactory, window.location, document)\n    ],\n    persistence,\n    retryQueueFactory: (delivery, retryQueueMaxSize) => new InMemoryQueue(delivery, retryQueueMaxSize)\n  })\n}\n\nexport default BugsnagPerformance\n","import DomMutationSettler from './dom-mutation-settler'\nimport LoadEventEndSettler, { type PerformanceWithTiming } from './load-event-end-settler'\nimport RequestSettler from './request-settler'\nimport SettlerAggregate from './settler-aggregate'\nimport { type BrowserConfiguration } from '../config'\nimport { type RequestTracker } from '@bugsnag/request-tracker-performance'\nimport { type Clock, type InternalConfiguration, type Plugin } from '@bugsnag/core-performance'\n\nexport type OnSettle = (callback: OnSettleCallback) => void\nexport type OnSettleCallback = (settledTime: number) => void\nexport type OnSettlePlugin = Plugin<BrowserConfiguration> & OnSettle\n\nconst TIMEOUT_MILLISECONDS = 60 * 1000\n\nexport function createNoopOnSettle (): OnSettlePlugin {\n  const noop = () => {}\n  noop.configure = () => {}\n  return noop as OnSettlePlugin\n}\n\nexport default function createOnSettle (\n  clock: Clock,\n  window: Window,\n  fetchRequestTracker: RequestTracker,\n  xhrRequestTracker: RequestTracker,\n  performance: PerformanceWithTiming\n): OnSettlePlugin {\n  const domMutationSettler = new DomMutationSettler(clock, window.document)\n  const fetchRequestSettler = new RequestSettler(clock, fetchRequestTracker)\n  const xhrRequestSettler = new RequestSettler(clock, xhrRequestTracker)\n  const loadEventEndSettler = new LoadEventEndSettler(\n    clock,\n    window.addEventListener,\n    performance,\n    window.document\n  )\n\n  const settler = new SettlerAggregate(clock, [\n    domMutationSettler,\n    loadEventEndSettler,\n    fetchRequestSettler,\n    xhrRequestSettler\n  ])\n\n  function onSettlePlugin (callback: OnSettleCallback): void {\n    const onSettle: OnSettleCallback = (settledTime: number) => {\n      clearTimeout(timeout)\n\n      // unsubscribe from the settler so we don't call the callback more than\n      // once\n      settler.unsubscribe(onSettle)\n\n      callback(settledTime)\n    }\n\n    const timeout = setTimeout(() => {\n      const settledTime = clock.now()\n\n      settler.unsubscribe(onSettle)\n\n      callback(settledTime)\n    }, TIMEOUT_MILLISECONDS)\n\n    // if we're already settled apply a 100ms \"cooldown\" period in case we\n    // unsettle immediately after this call\n    // if we're not settled then this cooldown is irrelevant - we can just\n    // subscribe to the settler to be notified of when the page settles\n    const cooldown = settler.isSettled() ? 100 : 0\n    const settledTime = clock.now()\n\n    setTimeout(() => {\n      if (settler.isSettled()) {\n        // if we're still settled call the callback via \"onSettle\"\n        onSettle(settledTime)\n      } else {\n        // otherwise wait for the page to settle\n        settler.subscribe(onSettle)\n      }\n    }, cooldown)\n  }\n\n  onSettlePlugin.configure = function (configuration: InternalConfiguration<BrowserConfiguration>): void {\n    const settleIgnoreUrls = configuration.settleIgnoreUrls.map(\n      (url: string | RegExp): RegExp => typeof url === 'string' ? RegExp(url) : url\n    ).concat(RegExp(configuration.endpoint))\n\n    fetchRequestSettler.setUrlsToIgnore(settleIgnoreUrls)\n    xhrRequestSettler.setUrlsToIgnore(settleIgnoreUrls)\n  }\n\n  return onSettlePlugin\n}\n","import {\n  type BackgroundingListener,\n  type BackgroundingListenerCallback,\n  type BackgroundingListenerState\n} from '@bugsnag/core-performance'\n\ninterface DocumentForVisibilityState {\n  addEventListener: (event: string, callback: () => void) => void\n  visibilityState: string\n}\n\ninterface WindowWithDocumentForVisibilityState {\n  document: DocumentForVisibilityState\n  addEventListener: (event: string, callback: () => void) => void\n}\n\nexport default function createBrowserBackgroundingListener (window: WindowWithDocumentForVisibilityState) {\n  const callbacks: BackgroundingListenerCallback[] = []\n  let state: BackgroundingListenerState = window.document.visibilityState === 'hidden'\n    ? 'in-background'\n    : 'in-foreground'\n\n  const backgroundingListener: BackgroundingListener = {\n    onStateChange (backgroundingListenerCallback: BackgroundingListenerCallback): void {\n      callbacks.push(backgroundingListenerCallback)\n\n      // trigger the callback immediately if the document is already 'hidden'\n      if (state === 'in-background') {\n        backgroundingListenerCallback(state)\n      }\n    }\n  }\n\n  const backgroundStateChanged = (newState: BackgroundingListenerState) => {\n    if (state === newState) return\n\n    state = newState\n    for (const callback of callbacks) {\n      callback(state)\n    }\n  }\n\n  window.document.addEventListener('visibilitychange', function () {\n    const newState = window.document.visibilityState === 'hidden'\n      ? 'in-background'\n      : 'in-foreground'\n\n    backgroundStateChanged(newState)\n  })\n\n  // some browsers don't fire the visibilitychange event when the page is suspended,\n  // so we also listen for pagehide and pageshow events\n  window.addEventListener('pagehide', function () {\n    backgroundStateChanged('in-background')\n  })\n\n  window.addEventListener('pageshow', function () {\n    backgroundStateChanged('in-foreground')\n  })\n\n  return backgroundingListener\n}\n","import type { InternalConfiguration, SpanAttributesSource, SpanInternal } from '@bugsnag/core-performance'\nimport { type BrowserConfiguration } from './config'\n\nexport const createSpanAttributesSource = (document: Document): SpanAttributesSource<BrowserConfiguration> => {\n  const defaultAttributes = {\n    url: {\n      name: 'bugsnag.browser.page.url',\n      getValue: () => document.location.href,\n      permitted: false\n    },\n    title: {\n      name: 'bugsnag.browser.page.title',\n      getValue: () => document.title,\n      permitted: false\n    }\n  }\n\n  return {\n    configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n      defaultAttributes.title.permitted = configuration.sendPageAttributes.title || false\n      defaultAttributes.url.permitted = configuration.sendPageAttributes.url || false\n    },\n    requestAttributes (span: SpanInternal) {\n      for (const attribute of Object.values(defaultAttributes)) {\n        if (attribute.permitted) {\n          span.setAttribute(attribute.name, attribute.getValue())\n        }\n      }\n    }\n  }\n}\n\nexport default createSpanAttributesSource\n","import cuid from '@bugsnag/cuid'\nimport { ResourceAttributes, type Persistence, type ResourceAttributeSource } from '@bugsnag/core-performance'\nimport { type BrowserConfiguration } from './config'\n\nfunction createResourceAttributesSource (\n  navigator: Navigator,\n  persistence: Persistence\n): ResourceAttributeSource<BrowserConfiguration> {\n  let getDeviceId: Promise<string> | undefined\n  let deviceId: string | undefined\n\n  return function resourceAttributesSource (config) {\n    const attributes = new ResourceAttributes(\n      config.releaseStage,\n      config.appVersion,\n      'bugsnag.performance.browser',\n      '__VERSION__'\n    )\n\n    attributes.set('browser.user_agent', navigator.userAgent)\n\n    // chromium only\n    if (navigator.userAgentData) {\n      attributes.set('browser.platform', navigator.userAgentData.platform)\n      attributes.set('browser.mobile', navigator.userAgentData.mobile)\n    }\n\n    if (config.generateAnonymousId) {\n      // ensure we only load/generate the anonymous ID once no matter how many\n      // times we're called, otherwise we could generate different IDs on\n      // different calls as cuids are partly time based\n      if (!getDeviceId) {\n        getDeviceId = persistence.load('bugsnag-anonymous-id')\n          .then(maybeAnonymousId => {\n            // use the persisted value or generate a new ID\n            const anonymousId = maybeAnonymousId || cuid()\n\n            // if there was no persisted value, save the newly generated ID\n            if (!maybeAnonymousId) {\n              persistence.save('bugsnag-anonymous-id', anonymousId)\n            }\n\n            // store the device ID so we can set it synchronously in future\n            deviceId = anonymousId\n\n            return deviceId\n          })\n      }\n\n      if (deviceId) {\n        // set device ID synchronously if it's already available\n        attributes.set('device.id', deviceId)\n      } else {\n        // otherwise add it when the promise resolves\n        return getDeviceId\n          .then(deviceId => {\n            attributes.set('device.id', deviceId)\n\n            return attributes\n          })\n      }\n    }\n\n    return Promise.resolve(attributes)\n  }\n}\n\nexport default createResourceAttributesSource\n","import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createXmlHttpRequestTracker(xhr, clock, document) {\n    const requestTracker = new RequestTracker();\n    const trackedRequests = new WeakMap();\n    const requestHandlers = new WeakMap();\n    const originalOpen = xhr.prototype.open;\n    xhr.prototype.open = function open(method, url, ...rest) {\n        trackedRequests.set(this, { method, url: getAbsoluteUrl(String(url), document && document.baseURI) });\n        // @ts-expect-error rest\n        originalOpen.call(this, method, url, ...rest);\n    };\n    const originalSend = xhr.prototype.send;\n    xhr.prototype.send = function send(body) {\n        const requestData = trackedRequests.get(this);\n        if (requestData) {\n            // if there is an existing event listener this request instance is being reused,\n            // so we need to remove the listener from the previous send\n            const existingHandler = requestHandlers.get(this);\n            if (existingHandler)\n                this.removeEventListener('readystatechange', existingHandler);\n            const { onRequestEnd, extraRequestHeaders } = requestTracker.start({\n                type: 'xmlhttprequest',\n                method: requestData.method,\n                url: requestData.url,\n                startTime: clock.now()\n            });\n            if (extraRequestHeaders) {\n                for (const extraHeaders of extraRequestHeaders) {\n                    for (const [name, value] of Object.entries(extraHeaders)) {\n                        this.setRequestHeader(name, value);\n                    }\n                }\n            }\n            const onReadyStateChange = (evt) => {\n                if (this.readyState === xhr.DONE && onRequestEnd) {\n                    // If the status is 0 the request did not complete so report this as an error\n                    const endContext = this.status > 0\n                        ? { endTime: clock.now(), status: this.status, state: 'success' }\n                        : { endTime: clock.now(), state: 'error' };\n                    onRequestEnd(endContext);\n                }\n            };\n            this.addEventListener('readystatechange', onReadyStateChange);\n            requestHandlers.set(this, onReadyStateChange);\n        }\n        originalSend.call(this, body);\n    };\n    return requestTracker;\n}\n\nexport { createXmlHttpRequestTracker as default };\n","import {\n  isBoolean,\n  isStringOrRegExpArray,\n  schema,\n  type ConfigOption,\n  type Configuration,\n  type CoreSchema\n} from '@bugsnag/core-performance'\nimport { type NetworkRequestCallback, defaultNetworkRequestCallback, isNetworkRequestCallback } from '@bugsnag/request-tracker-performance'\nimport { type BrowserNetworkRequestInfo } from './auto-instrumentation'\nimport { isRoutingProvider, type RoutingProvider } from './routing-provider'\nimport { defaultSendPageAttributes, isSendPageAttributes, type SendPageAttributes } from './send-page-attributes'\n\nexport interface BrowserSchema extends CoreSchema {\n  autoInstrumentFullPageLoads: ConfigOption<boolean>\n  autoInstrumentNetworkRequests: ConfigOption<boolean>\n  autoInstrumentRouteChanges: ConfigOption<boolean>\n  generateAnonymousId: ConfigOption<boolean>\n  routingProvider: ConfigOption<RoutingProvider>\n  settleIgnoreUrls: ConfigOption<Array<string | RegExp>>\n  networkRequestCallback: ConfigOption<NetworkRequestCallback<BrowserNetworkRequestInfo>>\n  sendPageAttributes: ConfigOption<SendPageAttributes>\n}\n\nexport interface BrowserConfiguration extends Configuration {\n  autoInstrumentFullPageLoads?: boolean\n  autoInstrumentNetworkRequests?: boolean\n  autoInstrumentRouteChanges?: boolean\n  generateAnonymousId?: boolean\n  routingProvider?: RoutingProvider\n  settleIgnoreUrls?: Array<string | RegExp>\n  networkRequestCallback?: NetworkRequestCallback<BrowserNetworkRequestInfo>\n  sendPageAttributes?: SendPageAttributes\n}\n\nexport function createSchema (hostname: string, defaultRoutingProvider: RoutingProvider): BrowserSchema {\n  return {\n    ...schema,\n    releaseStage: {\n      ...schema.releaseStage,\n      defaultValue: hostname === 'localhost' ? 'development' : 'production'\n    },\n    autoInstrumentFullPageLoads: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    autoInstrumentNetworkRequests: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    autoInstrumentRouteChanges: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    generateAnonymousId: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    routingProvider: {\n      defaultValue: defaultRoutingProvider,\n      message: 'should be a routing provider',\n      validate: isRoutingProvider\n    },\n    settleIgnoreUrls: {\n      defaultValue: [],\n      message: 'should be an array of string|RegExp',\n      validate: isStringOrRegExpArray\n    },\n    networkRequestCallback: {\n      defaultValue: defaultNetworkRequestCallback,\n      message: 'should be a function',\n      validate: isNetworkRequestCallback\n    },\n    sendPageAttributes: {\n      defaultValue: defaultSendPageAttributes,\n      message: 'should be an object',\n      validate: isSendPageAttributes\n    }\n  }\n}\n"],"names":["isBoolean","value","isObject","Array","isArray","isNumber","Number","isFinite","isNaN","isString","isStringWithLength","length","isStringOrRegExpArray","every","item","RegExp","isSpanContext","id","traceId","isValid","SpanAttributes","constructor","initialValues","this","attributes","set","name","remove","delete","toJson","from","map","key","attribute","isInteger","intValue","doubleValue","boolValue","stringValue","attributeToJson","ResourceAttributes","releaseStage","appVersion","sdkName","sdkVersion","Map","super","NANOSECONDS_IN_MILLISECONDS","schema","defaultValue","message","validate","endpoint","apiKey","test","logger","debug","console","info","warn","error","enabledReleaseStages","isStringArray","plugins","plugin","configure","isPlugin","BatchProcessor","delivery","configuration","retryQueue","sampler","probabilityManager","encoder","spans","timeout","flushQueue","Promise","resolve","flush","bind","stop","clearTimeout","start","setTimeout","batchInactivityTimeoutMs","add","span","includes","push","maximumBatchSize","then","async","fetchingInitialProbability","batch","prepareBatch","payload","encode","batchTime","Date","now","response","send","undefined","samplingProbability","setProbability","state","err","probability","spanProbability","raw","sample","SpanEvents","events","time","clock","timeUnixNano","toUnixTimestampNanoseconds","SpanInternal","startTime","parentSpanId","kind","samplingRate","i","position","parseInt","slice","traceIdToSamplingRate","addEvent","setAttribute","end","endTime","_samplingProbability","coreSpanOptionSchema","getDefaultValue","parentContext","makeCurrentContext","isFirstClass","TracePayloadEncoder","resourceAttributeSource","resourceAttributes","jsonSpans","spanId","startTimeUnixNano","endTimeUnixNano","body","resourceSpans","resource","scopeSpans","headers","generateSamplingHeader","spanCounts","Object","create","existingValue","rawProbabilities","keys","pairs","rawProbability","join","retryCodes","Set","ProbabilityFetcher","getNewProbability","timeBetweenRetries","PROBABILITY_REFRESH_MILLISECONDS","ProbabilityManager","persistence","probabilityFetcher","persistedProbability","load","initialProbabilityTime","initialTimeoutDuration","lastProbabilityTime","resolveInitialProbability","fetchNewProbabilityIn","newProbability","save","milliseconds","lastProbabilityTimeBeforeTimeout","BufferingProcessor","scaleProbabilityToMatchSamplingRate","Math","floor","Sampler","initialProbability","_probability","scaledProbability","scaled","shouldSample","DefaultSpanContextStorage","backgroundingListener","contextStack","isInForeground","onBackgroundStateChange","onStateChange","Symbol","iterator","context","pop","span1","span2","current","removeClosedContexts","first","timeToNumber","convert","SpanFactory","processor","idGenerator","spanAttributesSource","spanContextStorage","openSpans","WeakSet","startSpan","options","safeStartTime","generate","startNetworkSpan","spanName","method","toUpperCase","cleanOptions","validateSpanOptions","spanInternal","assign","url","endSpan","additionalAttributes","entries","requestAttributes","spanEnded","toPublicApi","safeEndTime","warnings","String","spanOptions","option","prototype","hasOwnProperty","call","getDefaultExportFromCjs","x","pad","num","size","s","substr","require$$0","env","window","self","globalCount","prop","clientId","navigator","mimeTypes","userAgent","toString","fingerprint","isCuid","require$$2","c","blockSize","base","discreteValues","pow","randomBlock","random","cuid","getTime","InMemoryPersistence","persistedItems","get","toPersistedPayload","json","JSON","parse","InMemoryQueue","retryQueueMaxSize","requestQueue","payloads","spanCount","reduce","count","countSpansInPayload","shift","j","samplingProbabilityFromHeaders","asNumber","parseFloat","defaultNetworkRequestCallback","networkRequestInfo","isNetworkRequestCallback","RequestTracker","callbacks","onStart","startCallback","results","result","onRequestEnd","endContext","extraRequestHeaders","filter","isDefined","argument","getAbsoluteUrl","baseUrl","indexOf","absoluteUrl","URL","href","endsWith","_a","isRequest","input","defaultSendPageAttributes","referrer","title","getPermittedAttributes","sendPageAttributes","isSendPageAttributes","obj","allowedTypes","defaultRouteResolver","pathname","createNoopRoutingProvider","resolveRoute","listenForRouteChanges","startRouteChangeSpan","createDefaultRoutingProvider","onSettle","location","addEventListener","ev","originalPushState","history","pushState","args","absoluteURL","document","baseURI","apply","FullPageLoadPlugin","spanFactory","webVitals","performance","wasBackgrounded","autoInstrumentFullPageLoads","permittedAttributes","route","routingProvider","createPageLoadPhaseSpan","phase","shouldOmitSpan","getEntriesByType","entry","unloadEventStart","unloadEventEnd","redirectStart","redirectEnd","fetchStart","domainLookupStart","domainLookupEnd","TCPHandshakeEnd","secureConnectionStart","connectEnd","connectStart","requestStart","responseStart","responseEnd","domContentLoadedEventStart","domContentLoadedEventEnd","loadEventStart","loadEventEnd","instrumentPageLoadPhaseSpans","attachTo","permittedPrefixes","NetworkRequestPlugin","fetchTracker","xhrTracker","configEndpoint","networkRequestCallback","trackRequest","startContext","shouldTrackRequest","defaultRequestInfo","type","propagateTraceContext","getExtraRequestHeaders","status","autoInstrumentNetworkRequests","some","prefix","startsWith","sampled","traceparent","buildTraceparentHeader","currentSpanContext","getHttpVersion","protocol","ResourceLoadPlugin","PerformanceObserverClass","supportedEntryTypes","observer","list","getEntries","initiatorType","search","httpFlavor","nextHopProtocol","encodedBodySize","decodedBodySize","responseStatus","observe","buffered","entryTypes","routeChangeSpanOptionSchema","trigger","RouteChangePlugin","autoInstrumentRouteChanges","previousUrl","previousRoute","stringUrl","routeChangeSpanOptions","endTimeOrOptions","urlObject","ensureUrl","MAX_CLOCK_DRIFT_MS","recalculateTimeOrigin","timeOrigin","abs","isRoutingProvider","toHex","hex","bits","bytes","Uint8Array","randomValues","crypto","getRandomValues","Settler","settled","subscribe","callback","isSettled","unsubscribe","settle","settledTime","DomMutationSettler","target","MutationObserver","restart","subtree","childList","characterData","LoadEventEndSettler","readyState","settleUsingPerformance","entryType","isPerformanceNavigationTiming","timing","navigationStart","RequestSettler","requestTracker","urlsToIgnore","outstandingRequests","onRequestStart","setUrlsToIgnore","shouldIgnoreUrl","regexp","SettlerAggregate","settlers","settler","settlersAreSettled","BrowserPersistence","localStorage","storage","getItem","setItem","stringify","WebVitals","observers","observeLargestContentfulPaint","observeLayoutShift","firstContentfulPaint","timeToFirstByte","firstInputDelay","cumulativeLayoutShift","largestContentfulPaint","disconnect","getEntriesByName","processingStart","session","hadRecentInput","previousStartTime","firstStartTime","DefaultRoutingProvider","BugsnagPerformance","noop","createNoopOnSettle","createNoopClient","visibilityState","backgroundingListenerCallback","backgroundStateChanged","newState","createBrowserBackgroundingListener","defaultAttributes","getValue","permitted","values","createSpanAttributesSource","calculatedTimeOrigin","date","millisecondsToNanoseconds","round","createClock","makeBrowserPersistence","resourceAttributesSource","getDeviceId","deviceId","config","userAgentData","platform","mobile","generateAnonymousId","maybeAnonymousId","anonymousId","createResourceAttributesSource","fetchRequestTracker","global","originalFetch","fetch","init","inputIsRequest","createStartContext","modifiedParams","extraHeaders","Headers","isHeadersInstance","has","mergeInitRequestHeaders","mergeInputRequestHeaders","mergeRequestHeaders","catch","createFetchRequestTracker","xhrRequestTracker","xhr","trackedRequests","WeakMap","requestHandlers","originalOpen","open","rest","originalSend","requestData","existingHandler","removeEventListener","setRequestHeader","onReadyStateChange","evt","DONE","createXmlHttpRequestTracker","XMLHttpRequest","PerformanceObserver","domMutationSettler","fetchRequestSettler","xhrRequestSettler","loadEventEndSettler","onSettlePlugin","cooldown","settleIgnoreUrls","concat","createOnSettle","bufferingProcessor","Error","cleanConfiguration","validateConfig","deliveryFactory","manager","retryQueueFactory","networkSpanOptions","endOptions","getPlugin","Constructor","platformExtensions","createClient","keepalive","toISOString","statusCode","createFetchDeliveryFactory","hostname","defaultRoutingProvider","BugsnagPerformance$1"],"mappings":"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","x_google_ignoreList":[17,18,19,20]}