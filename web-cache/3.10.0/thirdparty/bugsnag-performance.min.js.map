{"version":3,"file":"bugsnag-performance.min.js","sources":["../packages/core/dist/custom-attribute-limits.js","../packages/core/dist/validation.js","../packages/core/dist/attributes.js","../packages/core/dist/clock.js","../packages/core/dist/config.js","../packages/core/dist/events.js","../packages/core/dist/trace-id-to-sampling-rate.js","../packages/core/dist/span.js","../packages/core/dist/batch-processor.js","../packages/core/dist/delivery.js","../packages/core/dist/fixed-probability-manager.js","../packages/core/dist/probability-fetcher.js","../packages/core/dist/probability-manager.js","../packages/core/dist/processor.js","../packages/core/dist/sampler.js","../packages/core/dist/span-context.js","../packages/core/dist/time.js","../packages/core/dist/span-factory.js","../packages/core/dist/core.js","../node_modules/@bugsnag/cuid/lib/pad.js","../node_modules/@bugsnag/cuid/lib/fingerprint.browser.js","../node_modules/@bugsnag/cuid/index.js","../node_modules/@bugsnag/cuid/lib/is-cuid.js","../packages/core/dist/persistence.js","../packages/core/dist/retry-queue.js","../packages/delivery-fetch/dist/delivery.js","../packages/request-tracker/dist/network-request-callback.js","../packages/request-tracker/dist/request-tracker.js","../packages/request-tracker/dist/url-helpers.js","../packages/request-tracker/dist/request-tracker-fetch.js","../packages/platforms/browser/lib/send-page-attributes.ts","../packages/platforms/browser/lib/auto-instrumentation/page-load-phase-spans.ts","../packages/platforms/browser/lib/default-routing-provider.ts","../packages/platforms/browser/lib/auto-instrumentation/full-page-load-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/network-request-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/resource-load-plugin.ts","../packages/platforms/browser/lib/auto-instrumentation/route-change-plugin.ts","../packages/platforms/browser/lib/clock.ts","../packages/platforms/browser/lib/routing-provider.ts","../packages/platforms/browser/lib/id-generator.ts","../packages/platforms/browser/lib/on-settle/settler.ts","../packages/platforms/browser/lib/on-settle/dom-mutation-settler.ts","../packages/platforms/browser/lib/on-settle/load-event-end-settler.ts","../packages/platforms/browser/lib/on-settle/request-settler.ts","../packages/platforms/browser/lib/on-settle/settler-aggregate.ts","../packages/platforms/browser/lib/persistence.ts","../packages/platforms/browser/lib/web-vitals.ts","../packages/platforms/browser/lib/browser.ts","../packages/platforms/browser/lib/on-settle/index.ts","../packages/platforms/browser/lib/backgrounding-listener.ts","../packages/platforms/browser/lib/span-attributes-source.ts","../packages/platforms/browser/lib/resource-attributes-source.ts","../packages/request-tracker/dist/request-tracker-xhr.js","../packages/platforms/browser/lib/config.ts"],"sourcesContent":["const ATTRIBUTE_KEY_LENGTH_LIMIT = 128;\nconst ATTRIBUTE_STRING_VALUE_LIMIT_DEFAULT = 1024;\nconst ATTRIBUTE_STRING_VALUE_LIMIT_MAX = 10000;\nconst ATTRIBUTE_ARRAY_LENGTH_LIMIT_DEFAULT = 1000;\nconst ATTRIBUTE_ARRAY_LENGTH_LIMIT_MAX = 10000;\nconst ATTRIBUTE_COUNT_LIMIT_DEFAULT = 128;\nconst ATTRIBUTE_COUNT_LIMIT_MAX = 1000;\nconst defaultSpanAttributeLimits = {\n    attributeStringValueLimit: ATTRIBUTE_STRING_VALUE_LIMIT_DEFAULT,\n    attributeArrayLengthLimit: ATTRIBUTE_ARRAY_LENGTH_LIMIT_DEFAULT,\n    attributeCountLimit: ATTRIBUTE_COUNT_LIMIT_DEFAULT\n};\nconst defaultResourceAttributeLimits = {\n    attributeStringValueLimit: Infinity,\n    attributeArrayLengthLimit: Infinity,\n    attributeCountLimit: Infinity\n};\n\nexport { ATTRIBUTE_ARRAY_LENGTH_LIMIT_DEFAULT, ATTRIBUTE_ARRAY_LENGTH_LIMIT_MAX, ATTRIBUTE_COUNT_LIMIT_DEFAULT, ATTRIBUTE_COUNT_LIMIT_MAX, ATTRIBUTE_KEY_LENGTH_LIMIT, ATTRIBUTE_STRING_VALUE_LIMIT_DEFAULT, ATTRIBUTE_STRING_VALUE_LIMIT_MAX, defaultResourceAttributeLimits, defaultSpanAttributeLimits };\n","const isBoolean = (value) => value === true || value === false;\nconst isObject = (value) => !!value && typeof value === 'object' && !Array.isArray(value);\nconst isNumber = (value) => typeof value === 'number' && Number.isFinite(value) && !Number.isNaN(value);\nconst isString = (value) => typeof value === 'string';\nconst isStringWithLength = (value) => isString(value) && value.length > 0;\nconst isLogger = (value) => isObject(value) &&\n    typeof value.debug === 'function' &&\n    typeof value.info === 'function' &&\n    typeof value.warn === 'function' &&\n    typeof value.error === 'function';\nconst isStringArray = (value) => Array.isArray(value) && value.every(isStringWithLength);\nconst isStringOrRegExpArray = (value) => Array.isArray(value) && value.every(item => isStringWithLength(item) || item instanceof RegExp);\nfunction isPersistedProbability(value) {\n    return isObject(value) &&\n        isNumber(value.value) &&\n        isNumber(value.time);\n}\nconst isSpanContext = (value) => isObject(value) &&\n    typeof value.id === 'string' &&\n    typeof value.traceId === 'string' &&\n    typeof value.isValid === 'function';\nconst isParentContext = (value) => isObject(value) &&\n    typeof value.id === 'string' &&\n    typeof value.traceId === 'string';\nfunction isTime(value) {\n    return isNumber(value) || value instanceof Date;\n}\nfunction isPlugin(value) {\n    return isObject(value) && typeof value.configure === 'function';\n}\nfunction isPluginArray(value) {\n    return Array.isArray(value) && value.every(plugin => isPlugin(plugin));\n}\nfunction isOnSpanEndCallbacks(value) {\n    return Array.isArray(value) && value.every(method => typeof method === 'function');\n}\n\nexport { isBoolean, isLogger, isNumber, isObject, isOnSpanEndCallbacks, isParentContext, isPersistedProbability, isPlugin, isPluginArray, isSpanContext, isString, isStringArray, isStringOrRegExpArray, isStringWithLength, isTime };\n","import { ATTRIBUTE_KEY_LENGTH_LIMIT, defaultResourceAttributeLimits } from './custom-attribute-limits.js';\nimport { isNumber } from './validation.js';\n\nfunction truncateString(value, limit) {\n    const originalLength = value.length;\n    const newString = value.slice(0, limit);\n    const truncatedLength = newString.length;\n    return `${newString} *** ${originalLength - truncatedLength} CHARS TRUNCATED`;\n}\nclass SpanAttributes {\n    get droppedAttributesCount() {\n        return this._droppedAttributesCount;\n    }\n    constructor(initialValues, spanAttributeLimits, spanName, logger) {\n        this._droppedAttributesCount = 0;\n        this.attributes = initialValues;\n        this.spanAttributeLimits = spanAttributeLimits;\n        this.spanName = spanName;\n        this.logger = logger;\n    }\n    validateAttribute(name, value) {\n        if (typeof value === 'string' && value.length > this.spanAttributeLimits.attributeStringValueLimit) {\n            this.attributes.set(name, truncateString(value, this.spanAttributeLimits.attributeStringValueLimit));\n            this.logger.warn(`Span attribute ${name} in span ${this.spanName} was truncated as the string exceeds the ${this.spanAttributeLimits.attributeStringValueLimit} character limit set by attributeStringValueLimit.`);\n        }\n        if (Array.isArray(value) && value.length > this.spanAttributeLimits.attributeArrayLengthLimit) {\n            const truncatedValue = value.slice(0, this.spanAttributeLimits.attributeArrayLengthLimit);\n            this.attributes.set(name, truncatedValue);\n            this.logger.warn(`Span attribute ${name} in span ${this.spanName} was truncated as the array exceeds the ${this.spanAttributeLimits.attributeArrayLengthLimit} element limit set by attributeArrayLengthLimit.`);\n        }\n    }\n    set(name, value) {\n        if (typeof name === 'string' && (typeof value === 'string' || typeof value === 'boolean' || isNumber(value) || Array.isArray(value))) {\n            this.attributes.set(name, value);\n        }\n    }\n    // Used by the public API to set custom attributes\n    setCustom(name, value) {\n        if (typeof name === 'string' && (typeof value === 'string' || typeof value === 'boolean' || isNumber(value) || Array.isArray(value))) {\n            if (!this.attributes.has(name) && this.attributes.size >= this.spanAttributeLimits.attributeCountLimit) {\n                this._droppedAttributesCount++;\n                this.logger.warn(`Span attribute ${name} in span ${this.spanName} was dropped as the number of attributes exceeds the ${this.spanAttributeLimits.attributeCountLimit} attribute limit set by attributeCountLimit.`);\n                return;\n            }\n            if (name.length > ATTRIBUTE_KEY_LENGTH_LIMIT) {\n                this._droppedAttributesCount++;\n                this.logger.warn(`Span attribute ${name} in span ${this.spanName} was dropped as the key length exceeds the ${ATTRIBUTE_KEY_LENGTH_LIMIT} character fixed limit.`);\n                return;\n            }\n            this.attributes.set(name, value);\n        }\n    }\n    remove(name) {\n        this.attributes.delete(name);\n    }\n    toJson() {\n        Array.from(this.attributes).forEach(([key, value]) => { this.validateAttribute(key, value); });\n        return Array.from(this.attributes).map(([key, value]) => attributeToJson(key, value));\n    }\n}\nclass ResourceAttributes extends SpanAttributes {\n    constructor(releaseStage, appVersion, serviceName, sdkName, sdkVersion, logger) {\n        const initialValues = new Map([\n            ['deployment.environment', releaseStage],\n            ['telemetry.sdk.name', sdkName],\n            ['telemetry.sdk.version', sdkVersion],\n            ['service.name', serviceName]\n        ]);\n        if (appVersion.length > 0) {\n            initialValues.set('service.version', appVersion);\n        }\n        // TODO: this class should be refactored to use a common base class instead of SpanAttributes\n        // since we don't need a span name and logger for resource attributes - see PLAT-12820\n        super(initialValues, defaultResourceAttributeLimits, 'resource-attributes', logger);\n    }\n}\nfunction getJsonAttributeValue(value) {\n    switch (typeof value) {\n        case 'number':\n            if (Number.isNaN(value) || !Number.isFinite(value)) {\n                return undefined;\n            }\n            if (Number.isInteger(value)) {\n                return { intValue: `${value}` };\n            }\n            return { doubleValue: value };\n        case 'boolean':\n            return { boolValue: value };\n        case 'string':\n            return { stringValue: value };\n    }\n}\nfunction getJsonArrayAttributeValue(attributeArray) {\n    return attributeArray\n        .map((value) => getJsonAttributeValue(value))\n        .filter(value => typeof value !== 'undefined');\n}\n/**\n * Converts a span attribute into an OTEL compliant value i.e. { stringValue: 'value' }\n * @param key the name of the span attribute\n * @param attribute the value of the attribute. Can be of type string | number | boolean | string[] | number[] | boolean[]. Invalid types will be removed from array attributes.\n * @returns\n */\nfunction attributeToJson(key, attribute) {\n    switch (typeof attribute) {\n        case 'number':\n            if (Number.isNaN(attribute) || !Number.isFinite(attribute)) {\n                return undefined;\n            }\n            // 'bugsnag.sampling.p' must always be sent as a doubleValue\n            if (key !== 'bugsnag.sampling.p' && Number.isInteger(attribute)) {\n                return { key, value: { intValue: `${attribute}` } };\n            }\n            return { key, value: { doubleValue: attribute } };\n        case 'boolean':\n            return { key, value: { boolValue: attribute } };\n        case 'string':\n            return { key, value: { stringValue: attribute } };\n        case 'object':\n            if (Array.isArray(attribute)) {\n                const arrayValues = getJsonArrayAttributeValue(attribute);\n                return { key, value: { arrayValue: arrayValues.length > 0 ? { values: arrayValues } : {} } };\n            }\n            return undefined;\n        default:\n            return undefined;\n    }\n}\n\nexport { ResourceAttributes, SpanAttributes, attributeToJson };\n","const NANOSECONDS_IN_MILLISECONDS = 1000000;\nfunction millisecondsToNanoseconds(milliseconds) {\n    return Math.round(milliseconds * NANOSECONDS_IN_MILLISECONDS);\n}\n\nexport { millisecondsToNanoseconds };\n","import { ATTRIBUTE_STRING_VALUE_LIMIT_DEFAULT, ATTRIBUTE_STRING_VALUE_LIMIT_MAX, ATTRIBUTE_ARRAY_LENGTH_LIMIT_DEFAULT, ATTRIBUTE_ARRAY_LENGTH_LIMIT_MAX, ATTRIBUTE_COUNT_LIMIT_DEFAULT, ATTRIBUTE_COUNT_LIMIT_MAX } from './custom-attribute-limits.js';\nimport { isStringWithLength, isString, isLogger, isStringArray, isPluginArray, isObject, isNumber, isOnSpanEndCallbacks } from './validation.js';\n\nconst schema = {\n    appVersion: {\n        defaultValue: '',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    endpoint: {\n        defaultValue: 'https://otlp.bugsnag.com/v1/traces',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    apiKey: {\n        defaultValue: '',\n        message: 'should be a 32 character hexadecimal string',\n        validate: (value) => isString(value) && /^[a-f0-9]{32}$/.test(value)\n    },\n    logger: {\n        defaultValue: {\n            debug(message) { console.debug(message); },\n            info(message) { console.info(message); },\n            warn(message) { console.warn(message); },\n            error(message) { console.error(message); }\n        },\n        message: 'should be a Logger object',\n        validate: isLogger\n    },\n    releaseStage: {\n        defaultValue: 'production',\n        message: 'should be a string',\n        validate: isStringWithLength\n    },\n    enabledReleaseStages: {\n        defaultValue: null,\n        message: 'should be an array of strings',\n        validate: (value) => value === null || isStringArray(value)\n    },\n    plugins: {\n        defaultValue: [],\n        message: 'should be an array of plugin objects',\n        validate: isPluginArray\n    },\n    bugsnag: {\n        defaultValue: undefined,\n        message: 'should be an instance of Bugsnag',\n        validate: (value) => isObject(value) && typeof value.addOnError === 'function'\n    },\n    samplingProbability: {\n        defaultValue: undefined,\n        message: 'should be a number between 0 and 1',\n        validate: (value) => value === undefined || (isNumber(value) && value >= 0 && value <= 1)\n    },\n    onSpanEnd: {\n        defaultValue: undefined,\n        message: 'should be an array of functions',\n        validate: isOnSpanEndCallbacks\n    },\n    attributeStringValueLimit: {\n        defaultValue: ATTRIBUTE_STRING_VALUE_LIMIT_DEFAULT,\n        message: `should be a number between 1 and ${ATTRIBUTE_STRING_VALUE_LIMIT_MAX}`,\n        validate: (value) => isNumber(value) && value > 0 && value <= ATTRIBUTE_STRING_VALUE_LIMIT_MAX\n    },\n    attributeArrayLengthLimit: {\n        defaultValue: ATTRIBUTE_ARRAY_LENGTH_LIMIT_DEFAULT,\n        message: `should be a number between 1 and ${ATTRIBUTE_ARRAY_LENGTH_LIMIT_MAX}`,\n        validate: (value) => isNumber(value) && value > 0 && value <= ATTRIBUTE_ARRAY_LENGTH_LIMIT_MAX\n    },\n    attributeCountLimit: {\n        defaultValue: ATTRIBUTE_COUNT_LIMIT_DEFAULT,\n        message: `should be a number between 1 and ${ATTRIBUTE_COUNT_LIMIT_MAX}`,\n        validate: (value) => isNumber(value) && value > 0 && value <= ATTRIBUTE_COUNT_LIMIT_MAX\n    }\n};\nfunction validateConfig(config, schema) {\n    if (typeof config === 'string') {\n        config = { apiKey: config };\n    }\n    if (!isObject(config) || !isString(config.apiKey) || config.apiKey.length === 0) {\n        throw new Error('No Bugsnag API Key set');\n    }\n    let warnings = '';\n    const cleanConfiguration = {};\n    for (const option of Object.keys(schema)) {\n        if (Object.prototype.hasOwnProperty.call(config, option)) {\n            if (schema[option].validate(config[option])) {\n                cleanConfiguration[option] = config[option];\n            }\n            else {\n                warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof config[option]}`;\n                cleanConfiguration[option] = schema[option].defaultValue;\n            }\n        }\n        else {\n            cleanConfiguration[option] = schema[option].defaultValue;\n        }\n    }\n    // If apiKey is set but not valid we should still use it, despite the validation warning.\n    cleanConfiguration.apiKey = config.apiKey;\n    cleanConfiguration.maximumBatchSize = config.maximumBatchSize || 100;\n    cleanConfiguration.batchInactivityTimeoutMs = config.batchInactivityTimeoutMs || 30 * 1000;\n    if (warnings.length > 0) {\n        cleanConfiguration.logger.warn(`Invalid configuration${warnings}`);\n    }\n    return cleanConfiguration;\n}\n\nexport { schema, validateConfig };\n","class SpanEvents {\n    constructor() {\n        this.events = [];\n    }\n    add(name, time) {\n        this.events.push({ name, time });\n    }\n    toJson(clock) {\n        return this.events.map(({ name, time }) => ({ name, timeUnixNano: clock.toUnixTimestampNanoseconds(time) }));\n    }\n}\n\nexport { SpanEvents };\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// taken from OpenTelemetry's TraceIdRatioBasedSampler:\n// https://github.com/open-telemetry/opentelemetry-js/blob/ca700c4eef64c14bb5fef2be6f08ace7973a8881/packages/opentelemetry-sdk-trace-base/src/sampler/TraceIdRatioBasedSampler.ts#L47-L55\n// with some small modifications to match our naming conventions\nfunction traceIdToSamplingRate(traceId) {\n    let samplingRate = 0;\n    for (let i = 0; i < traceId.length / 8; i++) {\n        const position = i * 8;\n        const segment = Number.parseInt(traceId.slice(position, position + 8), 16);\n        samplingRate = (samplingRate ^ segment) >>> 0;\n    }\n    return samplingRate;\n}\n\nexport { traceIdToSamplingRate as default };\n","import { SpanEvents } from './events.js';\nimport traceIdToSamplingRate from './trace-id-to-sampling-rate.js';\nimport { isTime, isSpanContext, isBoolean } from './validation.js';\n\nconst HOUR_IN_MILLISECONDS = 60 * 60 * 1000;\nfunction spanToJson(span, clock) {\n    return {\n        name: span.name,\n        kind: span.kind,\n        spanId: span.id,\n        traceId: span.traceId,\n        parentSpanId: span.parentSpanId,\n        ...(span.attributes.droppedAttributesCount > 0 ? { droppedAttributesCount: span.attributes.droppedAttributesCount } : {}),\n        startTimeUnixNano: clock.toUnixTimestampNanoseconds(span.startTime),\n        endTimeUnixNano: clock.toUnixTimestampNanoseconds(span.endTime),\n        attributes: span.attributes.toJson(),\n        events: span.events.toJson(clock)\n    };\n}\nfunction spanEndedToSpan(span) {\n    return {\n        get id() {\n            return span.id;\n        },\n        get traceId() {\n            return span.traceId;\n        },\n        get samplingRate() {\n            return span.samplingRate;\n        },\n        get name() {\n            return span.name;\n        },\n        isValid: () => false,\n        end: () => { }, // no-op\n        setAttribute: (name, value) => { span.attributes.setCustom(name, value); }\n    };\n}\nclass SpanInternal {\n    constructor(id, traceId, name, startTime, attributes, clock, parentSpanId) {\n        this.kind = 3 /* Kind.Client */; // TODO: How do we define the initial Kind?\n        this.events = new SpanEvents();\n        this.id = id;\n        this.traceId = traceId;\n        this.parentSpanId = parentSpanId;\n        this.name = name;\n        this.startTime = startTime;\n        this.attributes = attributes;\n        this.samplingRate = traceIdToSamplingRate(this.traceId);\n        this.clock = clock;\n    }\n    addEvent(name, time) {\n        this.events.add(name, time);\n    }\n    setAttribute(name, value) {\n        this.attributes.set(name, value);\n    }\n    setCustomAttribute(name, value) {\n        this.attributes.setCustom(name, value);\n    }\n    end(endTime, samplingProbability) {\n        this.endTime = endTime;\n        let _samplingProbability = samplingProbability;\n        this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n        return {\n            id: this.id,\n            name: this.name,\n            kind: this.kind,\n            traceId: this.traceId,\n            startTime: this.startTime,\n            attributes: this.attributes,\n            events: this.events,\n            samplingRate: this.samplingRate,\n            endTime,\n            get samplingProbability() {\n                return _samplingProbability;\n            },\n            set samplingProbability(samplingProbability) {\n                _samplingProbability = samplingProbability;\n                this.attributes.set('bugsnag.sampling.p', _samplingProbability.raw);\n            },\n            parentSpanId: this.parentSpanId\n        };\n    }\n    isValid() {\n        return this.endTime === undefined && this.startTime > (this.clock.now() - HOUR_IN_MILLISECONDS);\n    }\n}\nconst coreSpanOptionSchema = {\n    startTime: {\n        message: 'should be a number or Date',\n        getDefaultValue: () => undefined,\n        validate: isTime\n    },\n    parentContext: {\n        message: 'should be a SpanContext',\n        getDefaultValue: () => undefined,\n        validate: (value) => value === null || isSpanContext(value)\n    },\n    makeCurrentContext: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    },\n    isFirstClass: {\n        message: 'should be true|false',\n        getDefaultValue: () => undefined,\n        validate: isBoolean\n    }\n};\n\nexport { SpanInternal, coreSpanOptionSchema, spanEndedToSpan, spanToJson };\n","import { millisecondsToNanoseconds } from './clock.js';\nimport { spanEndedToSpan } from './span.js';\n\nclass BatchProcessor {\n    constructor(delivery, configuration, retryQueue, sampler, probabilityManager, encoder) {\n        this.spans = [];\n        this.timeout = null;\n        this.flushQueue = Promise.resolve();\n        this.delivery = delivery;\n        this.configuration = configuration;\n        this.retryQueue = retryQueue;\n        this.sampler = sampler;\n        this.probabilityManager = probabilityManager;\n        this.encoder = encoder;\n        this.flush = this.flush.bind(this);\n    }\n    stop() {\n        if (this.timeout !== null) {\n            clearTimeout(this.timeout);\n            this.timeout = null;\n        }\n    }\n    start() {\n        this.stop();\n        this.timeout = setTimeout(this.flush, this.configuration.batchInactivityTimeoutMs);\n    }\n    add(span) {\n        if (this.configuration.enabledReleaseStages &&\n            !this.configuration.enabledReleaseStages.includes(this.configuration.releaseStage)) {\n            return;\n        }\n        this.spans.push(span);\n        if (this.spans.length >= this.configuration.maximumBatchSize) {\n            this.flush();\n        }\n        else {\n            this.start();\n        }\n    }\n    async flush() {\n        this.stop();\n        this.flushQueue = this.flushQueue.then(async () => {\n            const batch = await this.prepareBatch();\n            // we either had nothing in the batch originally or all spans were discarded\n            if (!batch) {\n                return;\n            }\n            const payload = await this.encoder.encode(batch);\n            const batchTime = Date.now();\n            try {\n                const response = await this.delivery.send(payload);\n                if (response.samplingProbability !== undefined) {\n                    this.probabilityManager.setProbability(response.samplingProbability);\n                }\n                switch (response.state) {\n                    case 'success':\n                        this.retryQueue.flush();\n                        break;\n                    case 'failure-discard':\n                        this.configuration.logger.warn('delivery failed');\n                        break;\n                    case 'failure-retryable':\n                        this.configuration.logger.info('delivery failed, adding to retry queue');\n                        this.retryQueue.add(payload, batchTime);\n                        break;\n                    default:\n                        response.state;\n                }\n            }\n            catch (err) {\n                this.configuration.logger.warn('delivery failed');\n            }\n        });\n        await this.flushQueue;\n    }\n    async runCallbacks(span) {\n        if (this.configuration.onSpanEnd) {\n            const callbackStartTime = performance.now();\n            let continueToBatch = true;\n            for (const callback of this.configuration.onSpanEnd) {\n                try {\n                    let result = callback(span);\n                    // @ts-expect-error result may or may not be a promise\n                    if (typeof result.then === 'function') {\n                        result = await result;\n                    }\n                    if (result === false) {\n                        continueToBatch = false;\n                        break;\n                    }\n                }\n                catch (err) {\n                    this.configuration.logger.error('Error in onSpanEnd callback: ' + err);\n                }\n            }\n            if (continueToBatch) {\n                const duration = millisecondsToNanoseconds(performance.now() - callbackStartTime);\n                span.setAttribute('bugsnag.span.callbacks_duration', duration);\n            }\n            return continueToBatch;\n        }\n        else {\n            return true;\n        }\n    }\n    async prepareBatch() {\n        if (this.spans.length === 0) {\n            return;\n        }\n        // ensure we have a fresh probability value before building the batch\n        await this.probabilityManager.ensureFreshProbability();\n        // update sampling values if necessary and re-sample\n        const batch = [];\n        const probability = this.sampler.spanProbability;\n        for (const span of this.spans) {\n            if (span.samplingProbability.raw > probability.raw) {\n                span.samplingProbability = probability;\n            }\n            if (this.sampler.sample(span)) {\n                // Run any callbacks that have been registered before batching\n                // as callbacks could cause the span to be discarded\n                const shouldAddToBatch = await this.runCallbacks(spanEndedToSpan(span));\n                if (shouldAddToBatch)\n                    batch.push(span);\n            }\n        }\n        // clear out the current batch so we're ready to start a new one\n        this.spans = [];\n        // if every span was discarded there's nothing to send\n        if (batch.length === 0) {\n            return;\n        }\n        return batch;\n    }\n}\n\nexport { BatchProcessor };\n","import { spanToJson } from './span.js';\n\nclass TracePayloadEncoder {\n    constructor(clock, configuration, resourceAttributeSource) {\n        this.clock = clock;\n        this.configuration = configuration;\n        this.resourceAttributeSource = resourceAttributeSource;\n    }\n    async encode(spans) {\n        const resourceAttributes = await this.resourceAttributeSource(this.configuration);\n        const jsonSpans = Array(spans.length);\n        for (let i = 0; i < spans.length; ++i) {\n            jsonSpans[i] = spanToJson(spans[i], this.clock);\n        }\n        const deliveryPayload = {\n            resourceSpans: [\n                {\n                    resource: { attributes: resourceAttributes.toJson() },\n                    scopeSpans: [{ spans: jsonSpans }]\n                }\n            ]\n        };\n        return {\n            body: deliveryPayload,\n            headers: {\n                'Bugsnag-Api-Key': this.configuration.apiKey,\n                'Content-Type': 'application/json',\n                // Do not set 'Bugsnag-Span-Sampling' if the SDK is configured with samplingProbability\n                ...(this.configuration.samplingProbability !== undefined ? {} : { 'Bugsnag-Span-Sampling': this.generateSamplingHeader(spans) })\n            }\n        };\n    }\n    generateSamplingHeader(spans) {\n        if (spans.length === 0) {\n            return '1:0';\n        }\n        const spanCounts = Object.create(null);\n        for (const span of spans) {\n            const existingValue = spanCounts[span.samplingProbability.raw] || 0;\n            spanCounts[span.samplingProbability.raw] = existingValue + 1;\n        }\n        const rawProbabilities = Object.keys(spanCounts);\n        const pairs = Array(rawProbabilities.length);\n        for (let i = 0; i < rawProbabilities.length; ++i) {\n            const rawProbability = rawProbabilities[i];\n            pairs[i] = `${rawProbability}:${spanCounts[rawProbability]}`;\n        }\n        return pairs.join(';');\n    }\n}\nconst retryCodes = new Set([402, 407, 408, 429]);\nfunction responseStateFromStatusCode(statusCode) {\n    if (statusCode >= 200 && statusCode < 300) {\n        return 'success';\n    }\n    if (statusCode >= 400 && statusCode < 500 && !retryCodes.has(statusCode)) {\n        return 'failure-discard';\n    }\n    return 'failure-retryable';\n}\n\nexport { TracePayloadEncoder, responseStateFromStatusCode };\n","class FixedProbabilityManager {\n    static async create(sampler, samplingProbability) {\n        sampler.probability = samplingProbability;\n        return new FixedProbabilityManager(sampler, samplingProbability);\n    }\n    constructor(sampler, samplingProbability) {\n        this.sampler = sampler;\n        this.samplingProbability = samplingProbability;\n    }\n    setProbability(newProbability) {\n        return Promise.resolve();\n    }\n    ensureFreshProbability() {\n        return Promise.resolve();\n    }\n}\n\nexport { FixedProbabilityManager as default };\n","// the time to wait before retrying a failed request\nconst RETRY_MILLISECONDS = 30 * 1000;\nclass ProbabilityFetcher {\n    constructor(delivery, apiKey) {\n        this.delivery = delivery;\n        this.payload = {\n            body: { resourceSpans: [] },\n            headers: {\n                'Bugsnag-Api-Key': apiKey,\n                'Content-Type': 'application/json',\n                'Bugsnag-Span-Sampling': '1.0:0'\n            }\n        };\n    }\n    async getNewProbability() {\n        // keep making requests until we get a new probability value from the server\n        while (true) {\n            const response = await this.delivery.send(this.payload);\n            // in theory this should always be present, but it's possible the request\n            // fails or there's a bug on the server side causing it not to be returned\n            if (response.samplingProbability !== undefined) {\n                return response.samplingProbability;\n            }\n            await this.timeBetweenRetries();\n        }\n    }\n    timeBetweenRetries() {\n        return new Promise(resolve => {\n            setTimeout(resolve, RETRY_MILLISECONDS);\n        });\n    }\n}\n\nexport { ProbabilityFetcher as default };\n","// the time between requests to fetch a new probability value from the server\nconst PROBABILITY_REFRESH_MILLISECONDS = 24 * 60 * 60 * 1000; // 24 hours\nclass ProbabilityManager {\n    static async create(persistence, sampler, probabilityFetcher) {\n        const persistedProbability = await persistence.load('bugsnag-sampling-probability');\n        let initialProbabilityTime;\n        if (persistedProbability === undefined) {\n            // If there is no stored probability:\n            // - Set the initial probability value to the default\n            // - Immediately fetch a new probability value\n            sampler.probability = 1.0;\n            initialProbabilityTime = 0;\n        }\n        else if (persistedProbability.time < Date.now() - PROBABILITY_REFRESH_MILLISECONDS) {\n            // If it is >= 24 hours old:\n            // - Set the initial probability value to the stored value\n            // - Immediately fetch a new probability value\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n        }\n        else {\n            // If it is < 24 hours old:\n            // - Use the stored probability\n            // - Fetch a new probability when this value would be 24 hours old\n            sampler.probability = persistedProbability.value;\n            initialProbabilityTime = persistedProbability.time;\n        }\n        return new ProbabilityManager(persistence, sampler, probabilityFetcher, initialProbabilityTime);\n    }\n    constructor(persistence, sampler, probabilityFetcher, initialProbabilityTime) {\n        this.outstandingFreshnessCheck = undefined;\n        this.persistence = persistence;\n        this.sampler = sampler;\n        this.probabilityFetcher = probabilityFetcher;\n        this.lastProbabilityTime = initialProbabilityTime;\n        this.ensureFreshProbability();\n    }\n    setProbability(newProbability) {\n        this.lastProbabilityTime = Date.now();\n        this.sampler.probability = newProbability;\n        // return this promise for convience in unit tests as it allows us to wait\n        // for persistence to finish; in real code we won't ever wait for this but\n        // there's no harm in returning it anyway\n        return this.persistence.save('bugsnag-sampling-probability', {\n            value: newProbability,\n            time: this.lastProbabilityTime\n        });\n    }\n    /**\n     * Ensure that the current probability value is fresh, i.e. it is less than 24\n     * hours old\n     *\n     * If the probability value is stale then this method will fetch a fresh one\n     *\n     * This method is idempotent; calling it while there is already an outstanding\n     * probability request will not create a second request\n     */\n    ensureFreshProbability() {\n        // we're already fetching a new probability\n        if (this.outstandingFreshnessCheck) {\n            return this.outstandingFreshnessCheck;\n        }\n        // if the probability value is >= 24 hours old, fetch a new one\n        if (Date.now() - this.lastProbabilityTime >= PROBABILITY_REFRESH_MILLISECONDS) {\n            this.outstandingFreshnessCheck = this.probabilityFetcher.getNewProbability()\n                .then(probability => {\n                this.setProbability(probability);\n                this.outstandingFreshnessCheck = undefined;\n            });\n            return this.outstandingFreshnessCheck;\n        }\n        return Promise.resolve();\n    }\n}\n\nexport { ProbabilityManager as default };\n","// a processor that buffers spans in memory until the client has started\n// not sure if this would need to be platform specific — will we ever care about\n// persisting spans if 'start' is never called?\nclass BufferingProcessor {\n    constructor() {\n        this.spans = [];\n    }\n    add(span) {\n        this.spans.push(span);\n    }\n}\n\nexport { BufferingProcessor };\n","// sampling rates are stored as a number between 0 and 2^32 - 1 (i.e. they are\n// u32s) so we need to scale the probability value to match this range as they\n// are stored as values between 0 and 1\nfunction scaleProbabilityToMatchSamplingRate(probability) {\n    return Math.floor(probability * 0xffffffff);\n}\nclass Sampler {\n    constructor(initialProbability) {\n        // we could just do 'this.probability = initialProbability' but TypeScript\n        // doesn't like that as it doesn't directly initialise these properties in\n        // the constructor\n        this._probability = initialProbability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(initialProbability);\n    }\n    /**\n     * The global probability value: a number between 0 & 1\n     */\n    get probability() {\n        return this._probability;\n    }\n    set probability(probability) {\n        this._probability = probability;\n        this.scaledProbability = scaleProbabilityToMatchSamplingRate(probability);\n    }\n    /**\n     * The probability value for spans: a number between 0 & 2^32 - 1\n     *\n     * This is necessary because span sampling rates are generated as unsigned 32\n     * bit integers. We scale the global probability value to match that range, so\n     * that we can use a simple calculation in 'sample'\n     *\n     * @see scaleProbabilityToMatchSamplingRate\n     */\n    get spanProbability() {\n        return {\n            raw: this._probability,\n            scaled: this.scaledProbability\n        };\n    }\n    sample(span) {\n        return span.samplingRate <= span.samplingProbability.scaled;\n    }\n    shouldSample(samplingRate) {\n        return samplingRate <= this.spanProbability.scaled;\n    }\n}\n\nexport { Sampler as default };\n","function spanContextEquals(span1, span2) {\n    if (span1 === span2)\n        return true;\n    if (span1 !== undefined && span2 !== undefined) {\n        return span1.id === span2.id && span1.traceId === span2.traceId;\n    }\n    return false;\n}\nclass DefaultSpanContextStorage {\n    constructor(backgroundingListener, contextStack = []) {\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear the context stack regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.contextStack.length = 0;\n        };\n        this.contextStack = contextStack;\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    *[Symbol.iterator]() {\n        for (let i = this.contextStack.length - 1; i >= 0; --i) {\n            yield this.contextStack[i];\n        }\n    }\n    push(context) {\n        if (context.isValid() && this.isInForeground) {\n            this.contextStack.push(context);\n        }\n    }\n    pop(context) {\n        if (spanContextEquals(context, this.current)) {\n            this.contextStack.pop();\n        }\n        this.removeClosedContexts();\n    }\n    get first() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[0]\n            : undefined;\n    }\n    get current() {\n        this.removeClosedContexts();\n        return this.contextStack.length > 0\n            ? this.contextStack[this.contextStack.length - 1]\n            : undefined;\n    }\n    removeClosedContexts() {\n        while (this.contextStack.length > 0 &&\n            this.contextStack[this.contextStack.length - 1].isValid() === false) {\n            this.contextStack.pop();\n        }\n    }\n}\n\nexport { DefaultSpanContextStorage, spanContextEquals };\n","import { isNumber } from './validation.js';\n\nfunction timeToNumber(clock, time) {\n    if (isNumber(time)) {\n        // no need to change anything - we want to store numbers anyway\n        // we assume this is nanosecond precision\n        return time;\n    }\n    if (time instanceof Date) {\n        return clock.convert(time);\n    }\n    return clock.now();\n}\n\nexport { timeToNumber };\n","import { SpanAttributes } from './attributes.js';\nimport { defaultSpanAttributeLimits } from './custom-attribute-limits.js';\nimport { SpanInternal, coreSpanOptionSchema } from './span.js';\nimport { timeToNumber } from './time.js';\nimport { isParentContext, isObject } from './validation.js';\n\nconst DISCARD_END_TIME = -1;\nclass SpanFactory {\n    constructor(processor, sampler, idGenerator, spanAttributesSource, clock, backgroundingListener, logger, spanContextStorage) {\n        this.spanAttributeLimits = defaultSpanAttributeLimits;\n        this.openSpans = new WeakSet();\n        this.isInForeground = true;\n        this.onBackgroundStateChange = (state) => {\n            this.isInForeground = state === 'in-foreground';\n            // clear all open spans regardless of the new background state\n            // since spans are only valid if they start and end while the app is in the foreground\n            this.openSpans = new WeakSet();\n        };\n        this.processor = processor;\n        this.sampler = sampler;\n        this.idGenerator = idGenerator;\n        this.spanAttributesSource = spanAttributesSource;\n        this.clock = clock;\n        this.logger = logger;\n        this.spanContextStorage = spanContextStorage;\n        // this will fire immediately if the app is already backgrounded\n        backgroundingListener.onStateChange(this.onBackgroundStateChange);\n    }\n    startSpan(name, options) {\n        const safeStartTime = timeToNumber(this.clock, options.startTime);\n        const spanId = this.idGenerator.generate(64);\n        // if the parentContext option is not set use the current context\n        // if parentContext is explicitly null, or there is no current context,\n        // we are starting a new root span\n        const parentContext = isParentContext(options.parentContext) || options.parentContext === null\n            ? options.parentContext\n            : this.spanContextStorage.current;\n        const parentSpanId = parentContext ? parentContext.id : undefined;\n        const traceId = parentContext ? parentContext.traceId : this.idGenerator.generate(128);\n        const attributes = new SpanAttributes(new Map(), this.spanAttributeLimits, name, this.logger);\n        if (typeof options.isFirstClass === 'boolean') {\n            attributes.set('bugsnag.span.first_class', options.isFirstClass);\n        }\n        const span = new SpanInternal(spanId, traceId, name, safeStartTime, attributes, this.clock, parentSpanId);\n        // don't track spans that are started while the app is backgrounded\n        if (this.isInForeground) {\n            this.openSpans.add(span);\n            if (options.makeCurrentContext !== false) {\n                this.spanContextStorage.push(span);\n            }\n        }\n        return span;\n    }\n    startNetworkSpan(options) {\n        const spanName = `[HTTP/${options.method.toUpperCase()}]`;\n        const cleanOptions = this.validateSpanOptions(spanName, options);\n        const spanInternal = this.startSpan(cleanOptions.name, { ...cleanOptions.options, makeCurrentContext: false });\n        spanInternal.setAttribute('bugsnag.span.category', 'network');\n        spanInternal.setAttribute('http.method', options.method);\n        spanInternal.setAttribute('http.url', options.url);\n        return spanInternal;\n    }\n    configure(processor, configuration) {\n        this.processor = processor;\n        this.logger = configuration.logger;\n        this.spanAttributeLimits = {\n            attributeArrayLengthLimit: configuration.attributeArrayLengthLimit,\n            attributeCountLimit: configuration.attributeCountLimit,\n            attributeStringValueLimit: configuration.attributeStringValueLimit\n        };\n    }\n    endSpan(span, endTime, additionalAttributes) {\n        // remove the span from the context stack (this will also remove any invalid spans)\n        this.spanContextStorage.pop(span);\n        const untracked = !this.openSpans.delete(span);\n        const isValidSpan = span.isValid();\n        // log a warning if the span is already invalid and is not being tracked\n        if (untracked && !isValidSpan) {\n            this.logger.warn('Attempted to end a Span which is no longer valid.');\n        }\n        // spans should be discarded if:\n        // - they are not tracked (i.e. discarded due to backgrounding)\n        // - they are already invalid\n        // - they have an explicit discard end time\n        if (untracked || !isValidSpan || endTime === DISCARD_END_TIME) {\n            // we still call end on the span so that it is no longer considered valid\n            span.end(endTime, this.sampler.spanProbability);\n            return;\n        }\n        // Set any additional attributes\n        for (const [key, value] of Object.entries(additionalAttributes || {})) {\n            span.setAttribute(key, value);\n        }\n        this.spanAttributesSource.requestAttributes(span);\n        const spanEnded = span.end(endTime, this.sampler.spanProbability);\n        if (this.sampler.sample(spanEnded)) {\n            this.processor.add(spanEnded);\n        }\n    }\n    toPublicApi(span) {\n        return {\n            get id() {\n                return span.id;\n            },\n            get traceId() {\n                return span.traceId;\n            },\n            get samplingRate() {\n                return span.samplingRate;\n            },\n            get name() {\n                return span.name;\n            },\n            isValid: () => span.isValid(),\n            setAttribute: (name, value) => {\n                span.setCustomAttribute(name, value);\n            },\n            end: (endTime) => {\n                const safeEndTime = timeToNumber(this.clock, endTime);\n                this.endSpan(span, safeEndTime);\n            }\n        };\n    }\n    validateSpanOptions(name, options, schema = coreSpanOptionSchema) {\n        let warnings = '';\n        const cleanOptions = {};\n        if (typeof name !== 'string') {\n            warnings += `\\n  - name should be a string, got ${typeof name}`;\n            name = String(name);\n        }\n        if (options !== undefined && !isObject(options)) {\n            warnings += '\\n  - options is not an object';\n        }\n        else {\n            const spanOptions = options || {};\n            for (const option of Object.keys(schema)) {\n                if (Object.prototype.hasOwnProperty.call(spanOptions, option) && spanOptions[option] !== undefined) {\n                    if (schema[option].validate(spanOptions[option])) {\n                        cleanOptions[option] = spanOptions[option];\n                    }\n                    else {\n                        warnings += `\\n  - ${option} ${schema[option].message}, got ${typeof spanOptions[option]}`;\n                        cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                    }\n                }\n                else {\n                    cleanOptions[option] = schema[option].getDefaultValue(spanOptions[option]);\n                }\n            }\n        }\n        if (warnings.length > 0) {\n            this.logger.warn(`Invalid span options${warnings}`);\n        }\n        return { name, options: cleanOptions };\n    }\n}\n\nexport { DISCARD_END_TIME, SpanFactory };\n","import { BatchProcessor } from './batch-processor.js';\nimport { validateConfig, schema } from './config.js';\nimport { TracePayloadEncoder } from './delivery.js';\nimport FixedProbabilityManager from './fixed-probability-manager.js';\nimport ProbabilityFetcher from './probability-fetcher.js';\nimport ProbabilityManager from './probability-manager.js';\nimport { BufferingProcessor } from './processor.js';\nimport Sampler from './sampler.js';\nimport { DefaultSpanContextStorage } from './span-context.js';\nimport { SpanFactory } from './span-factory.js';\nimport { timeToNumber } from './time.js';\n\nfunction createClient(options) {\n    const bufferingProcessor = new BufferingProcessor();\n    let processor = bufferingProcessor;\n    const spanContextStorage = options.spanContextStorage || new DefaultSpanContextStorage(options.backgroundingListener);\n    let logger = options.schema.logger.defaultValue;\n    const sampler = new Sampler(1.0);\n    const spanFactory = new SpanFactory(processor, sampler, options.idGenerator, options.spanAttributesSource, options.clock, options.backgroundingListener, logger, spanContextStorage);\n    const plugins = options.plugins(spanFactory, spanContextStorage);\n    return {\n        start: (config) => {\n            const configuration = validateConfig(config, options.schema);\n            // if using the default endpoint add the API key as a subdomain\n            // e.g. convert URL https://otlp.bugsnag.com/v1/traces to URL https://<project_api_key>.otlp.bugsnag.com/v1/traces\n            if (configuration.endpoint === schema.endpoint.defaultValue) {\n                configuration.endpoint = configuration.endpoint.replace('https://', `https://${configuration.apiKey}.`);\n            }\n            // Correlate errors with span by monkey patching _notify on the error client\n            // and utilizing the setTraceCorrelation method on the event\n            if (configuration.bugsnag && typeof configuration.bugsnag.Event.prototype.setTraceCorrelation === 'function' && configuration.bugsnag.Client) {\n                const originalNotify = configuration.bugsnag.Client.prototype._notify;\n                configuration.bugsnag.Client.prototype._notify = function (...args) {\n                    const currentSpanContext = spanContextStorage.current;\n                    if (currentSpanContext && typeof args[0].setTraceCorrelation === 'function') {\n                        args[0].setTraceCorrelation(currentSpanContext.traceId, currentSpanContext.id);\n                    }\n                    originalNotify.apply(this, args);\n                };\n            }\n            const delivery = options.deliveryFactory(configuration.endpoint);\n            options.spanAttributesSource.configure(configuration);\n            const probabilityManagerPromise = configuration.samplingProbability === undefined\n                ? ProbabilityManager.create(options.persistence, sampler, new ProbabilityFetcher(delivery, configuration.apiKey))\n                : FixedProbabilityManager.create(sampler, configuration.samplingProbability);\n            probabilityManagerPromise.then((manager) => {\n                processor = new BatchProcessor(delivery, configuration, options.retryQueueFactory(delivery, configuration.retryQueueMaxSize), sampler, manager, new TracePayloadEncoder(options.clock, configuration, options.resourceAttributesSource));\n                // ensure all spans started before .start() are added to the batch\n                for (const span of bufferingProcessor.spans) {\n                    processor.add(span);\n                }\n                // register with the backgrounding listener - we do this in 'start' as\n                // there's nothing to do if we're backgrounded before start is called\n                // e.g. we can't trigger delivery until we have the apiKey and endpoint\n                // from configuration\n                options.backgroundingListener.onStateChange(state => {\n                    processor.flush();\n                    // ensure we have a fresh probability value when returning to the\n                    // foreground\n                    if (state === 'in-foreground') {\n                        manager.ensureFreshProbability();\n                    }\n                });\n                logger = configuration.logger;\n                spanFactory.configure(processor, configuration);\n            });\n            for (const plugin of configuration.plugins) {\n                plugins.push(plugin);\n            }\n            for (const plugin of plugins) {\n                plugin.configure(configuration, spanFactory);\n            }\n        },\n        startSpan: (name, spanOptions) => {\n            const cleanOptions = spanFactory.validateSpanOptions(name, spanOptions);\n            const span = spanFactory.startSpan(cleanOptions.name, cleanOptions.options);\n            span.setAttribute('bugsnag.span.category', 'custom');\n            return spanFactory.toPublicApi(span);\n        },\n        startNetworkSpan: (networkSpanOptions) => {\n            const spanInternal = spanFactory.startNetworkSpan(networkSpanOptions);\n            const span = spanFactory.toPublicApi(spanInternal);\n            // Overwrite end method to set status code attribute\n            // once we release the setAttribute API we can simply return the span\n            const networkSpan = {\n                ...span,\n                end: (endOptions) => {\n                    spanFactory.endSpan(spanInternal, timeToNumber(options.clock, endOptions.endTime), { 'http.status_code': endOptions.status });\n                }\n            };\n            return networkSpan;\n        },\n        getPlugin: (Constructor) => {\n            for (const plugin of plugins) {\n                if (plugin instanceof Constructor) {\n                    return plugin;\n                }\n            }\n        },\n        get currentSpanContext() {\n            return spanContextStorage.current;\n        },\n        ...(options.platformExtensions && options.platformExtensions(spanFactory, spanContextStorage))\n    };\n}\nfunction createNoopClient() {\n    const noop = () => { };\n    return {\n        start: noop,\n        startSpan: () => ({ id: '', traceId: '', end: noop, isValid: () => false }),\n        currentSpanContext: undefined\n    };\n}\n\nexport { createClient, createNoopClient };\n","module.exports = function pad (num, size) {\n  var s = '000000000' + num;\n  return s.substr(s.length - size);\n};\n","var pad = require('./pad.js');\n\nvar env = typeof window === 'object' ? window : self;\nvar globalCount = 0;\nfor (var prop in env) {\n  if (Object.hasOwnProperty.call(env, prop)) globalCount++;\n}\nvar mimeTypesLength = navigator.mimeTypes ? navigator.mimeTypes.length : 0;\nvar clientId = pad((mimeTypesLength +\n  navigator.userAgent.length).toString(36) +\n  globalCount.toString(36), 4);\n\nmodule.exports = function fingerprint () {\n  return clientId;\n};\n","/**\n * cuid.js\n * Collision-resistant UID generator for browsers and node.\n * Sequential for fast db lookups and recency sorting.\n * Safe for element IDs and server-side lookups.\n *\n * Extracted from CLCTR\n *\n * Copyright (c) Eric Elliott 2012\n * MIT License\n */\n\nvar fingerprint = require('./lib/fingerprint.js');\nvar isCuid = require('./lib/is-cuid.js');\nvar pad = require('./lib/pad.js');\n\nvar c = 0,\n  blockSize = 4,\n  base = 36,\n  discreteValues = Math.pow(base, blockSize);\n\nfunction randomBlock () {\n  return pad((Math.random() *\n    discreteValues << 0)\n    .toString(base), blockSize);\n}\n\nfunction safeCounter () {\n  c = c < discreteValues ? c : 0;\n  c++; // this is not subliminal\n  return c - 1;\n}\n\nfunction cuid () {\n  // Starting with a lowercase letter makes\n  // it HTML element ID friendly.\n  var letter = 'c', // hard-coded allows for sequential access\n\n    // timestamp\n    // warning: this exposes the exact date and time\n    // that the uid was created.\n    timestamp = new Date().getTime().toString(base),\n\n    // Prevent same-machine collisions.\n    counter = pad(safeCounter().toString(base), blockSize),\n\n    // A few chars to generate distinct ids for different\n    // clients (so different computers are far less\n    // likely to generate the same id)\n    print = fingerprint(),\n\n    // Grab some more chars from Math.random()\n    random = randomBlock() + randomBlock();\n\n  return letter + timestamp + counter + print + random;\n}\n\ncuid.fingerprint = fingerprint;\ncuid.isCuid = isCuid;\n\nmodule.exports = cuid;\n","/**\n * Check the provided value is a valid device id\n * @param {unknown} value\n * @returns\n */\nmodule.exports = function isCuid (value) {\n    return typeof value === 'string' && (/^c[a-z0-9]{20,32}$/).test(value);\n};\n","import cuid from '@bugsnag/cuid';\nimport { isPersistedProbability } from './validation.js';\n\nconst { isCuid } = cuid;\nclass InMemoryPersistence {\n    constructor() {\n        this.persistedItems = new Map();\n    }\n    async load(key) {\n        return this.persistedItems.get(key);\n    }\n    async save(key, value) {\n        this.persistedItems.set(key, value);\n    }\n}\nfunction toPersistedPayload(key, raw) {\n    switch (key) {\n        case 'bugsnag-sampling-probability': {\n            const json = JSON.parse(raw);\n            return isPersistedProbability(json)\n                ? json\n                : undefined;\n        }\n        case 'bugsnag-anonymous-id':\n            return isCuid(raw)\n                ? raw\n                : undefined;\n    }\n}\n\nexport { InMemoryPersistence, toPersistedPayload };\n","const msInDay = 24 * 60 * 60000;\nclass InMemoryQueue {\n    constructor(delivery, retryQueueMaxSize) {\n        this.delivery = delivery;\n        this.retryQueueMaxSize = retryQueueMaxSize;\n        this.requestQueue = Promise.resolve();\n        this.payloads = [];\n    }\n    add(payload, time) {\n        this.payloads.push({ payload, time });\n        let spanCount = this.payloads.reduce((count, { payload }) => count + countSpansInPayload(payload), 0);\n        while (spanCount > this.retryQueueMaxSize) {\n            const payload = this.payloads.shift();\n            if (!payload) {\n                break;\n            }\n            spanCount -= countSpansInPayload(payload.payload);\n        }\n    }\n    async flush() {\n        if (this.payloads.length === 0)\n            return;\n        const payloads = this.payloads;\n        this.payloads = [];\n        this.requestQueue = this.requestQueue.then(async () => {\n            for (const { payload, time } of payloads) {\n                // discard payloads at least 24 hours old\n                if (Date.now() >= time + msInDay)\n                    continue;\n                try {\n                    const { state } = await this.delivery.send(payload);\n                    switch (state) {\n                        case 'success':\n                        case 'failure-discard':\n                            break;\n                        case 'failure-retryable':\n                            this.add(payload, time);\n                            break;\n                        default:\n                            state;\n                    }\n                }\n                catch (err) { }\n            }\n        });\n        await this.requestQueue;\n    }\n}\nfunction countSpansInPayload(payload) {\n    let count = 0;\n    for (let i = 0; i < payload.body.resourceSpans.length; ++i) {\n        const scopeSpans = payload.body.resourceSpans[i].scopeSpans;\n        for (let j = 0; j < scopeSpans.length; ++j) {\n            count += scopeSpans[j].spans.length;\n        }\n    }\n    return count;\n}\n\nexport { InMemoryQueue };\n","import { responseStateFromStatusCode } from '@bugsnag/core-performance';\n\nfunction samplingProbabilityFromHeaders(headers) {\n    const value = headers.get('Bugsnag-Sampling-Probability');\n    if (typeof value !== 'string') {\n        return undefined;\n    }\n    const asNumber = Number.parseFloat(value);\n    if (Number.isNaN(asNumber) || asNumber < 0 || asNumber > 1) {\n        return undefined;\n    }\n    return asNumber;\n}\nfunction createFetchDeliveryFactory(fetch, clock, backgroundingListener) {\n    // if a backgrounding listener is supplied, set fetch's 'keepalive' flag\n    // when the app is backgrounded/terminated so that we can flush the last batch\n    // this may be required on platforms such as browser where without 'keepalive'\n    // the request may be cancelled (or never start sending) when backgrounded\n    // we don't _always_ set the flag because it imposes a 64k payload limit\n    let keepalive = false;\n    if (backgroundingListener) {\n        backgroundingListener.onStateChange(state => {\n            keepalive = state === 'in-background';\n        });\n    }\n    return function fetchDeliveryFactory(endpoint) {\n        return {\n            async send(payload) {\n                const body = JSON.stringify(payload.body);\n                payload.headers['Bugsnag-Sent-At'] = clock.date().toISOString();\n                try {\n                    const response = await fetch(endpoint, {\n                        method: 'POST',\n                        keepalive,\n                        body,\n                        headers: payload.headers\n                    });\n                    return {\n                        state: responseStateFromStatusCode(response.status),\n                        samplingProbability: samplingProbabilityFromHeaders(response.headers)\n                    };\n                }\n                catch (err) {\n                    if (body.length > 10e5) {\n                        return { state: 'failure-discard' };\n                    }\n                    return { state: 'failure-retryable' };\n                }\n            }\n        };\n    };\n}\n\nexport { createFetchDeliveryFactory as default };\n","function defaultNetworkRequestCallback(networkRequestInfo) {\n    return networkRequestInfo;\n}\nfunction isNetworkRequestCallback(value) {\n    return typeof value === 'function';\n}\n\nexport { defaultNetworkRequestCallback, isNetworkRequestCallback };\n","class RequestTracker {\n    constructor() {\n        this.callbacks = [];\n    }\n    onStart(startCallback) {\n        this.callbacks.push(startCallback);\n    }\n    start(context) {\n        const results = [];\n        for (const startCallback of this.callbacks) {\n            const result = startCallback(context);\n            if (result)\n                results.push(result);\n        }\n        return {\n            onRequestEnd: (endContext) => {\n                for (const result of results) {\n                    if (result && result.onRequestEnd) {\n                        result.onRequestEnd(endContext);\n                    }\n                }\n            },\n            extraRequestHeaders: results.map((result) => {\n                if (result && result.extraRequestHeaders) {\n                    return result.extraRequestHeaders;\n                }\n                return undefined;\n            }).filter(isDefined)\n        };\n    }\n}\nfunction isDefined(argument) {\n    return argument !== undefined;\n}\n\nexport { RequestTracker };\n","function getAbsoluteUrl(url, baseUrl) {\n    // if it looks like an absolute url do nothing\n    if (url.indexOf('https://') === 0 || url.indexOf('http://') === 0)\n        return url;\n    try {\n        const absoluteUrl = new URL(url, baseUrl).href;\n        // if a trailing slash has been added inadvertently remove it\n        if (!url.endsWith('/') && absoluteUrl.endsWith('/')) {\n            return absoluteUrl.slice(0, -1);\n        }\n        return absoluteUrl;\n    }\n    catch (_a) {\n        // not a valid URL for some reason - simply return it\n        return url;\n    }\n}\n\nexport { getAbsoluteUrl as default };\n","import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createStartContext(startTime, input, init, baseUrl) {\n    const inputIsRequest = isRequest(input);\n    const url = inputIsRequest ? input.url : String(input);\n    const method = (!!init && init.method) || (inputIsRequest && input.method) || 'GET';\n    return { url: getAbsoluteUrl(url, baseUrl), method, startTime, type: 'fetch' };\n}\nfunction isRequest(input) {\n    return !!input && typeof input === 'object' && !(input instanceof URL);\n}\nfunction isHeadersInstance(input) {\n    return !!input && typeof input === 'object' && input instanceof Headers;\n}\nfunction createFetchRequestTracker(global, clock) {\n    const requestTracker = new RequestTracker();\n    const originalFetch = global.fetch;\n    global.fetch = function fetch(input, init) {\n        const startContext = createStartContext(clock.now(), input, init, global.document && global.document.baseURI);\n        const { onRequestEnd, extraRequestHeaders } = requestTracker.start(startContext);\n        // Add the headers to the `init` received from the caller\n        const modifiedParams = mergeRequestHeaders(input, init, extraRequestHeaders);\n        return originalFetch.call(this, modifiedParams[0], modifiedParams[1]).then(response => {\n            onRequestEnd({ status: response.status, endTime: clock.now(), state: 'success' });\n            return response;\n        }).catch(error => {\n            onRequestEnd({ error, endTime: clock.now(), state: 'error' });\n            throw error;\n        });\n    };\n    return requestTracker;\n}\nfunction mergeRequestHeaders(input, init, extraRequestHeaders) {\n    if (!extraRequestHeaders)\n        return [input, init];\n    const extraHeaders = extraRequestHeaders.reduce((headers, current) => ({ ...headers, ...current }), {});\n    if (isRequest(input) && (!init || !init.headers)) {\n        mergeInputRequestHeaders(extraHeaders, input);\n    }\n    else {\n        init = mergeInitRequestHeaders(extraHeaders, init);\n    }\n    return [input, init];\n}\nfunction mergeInputRequestHeaders(extraRequestHeaders, input) {\n    for (const [name, value] of Object.entries(extraRequestHeaders)) {\n        if (!input.headers.has(name)) {\n            input.headers.set(name, value);\n        }\n    }\n}\nfunction mergeInitRequestHeaders(extraRequestHeaders, init) {\n    if (!init)\n        init = {};\n    if (isHeadersInstance(init.headers)) {\n        for (const [name, value] of Object.entries(extraRequestHeaders)) {\n            if (!init.headers.has(name)) {\n                init.headers.set(name, value);\n            }\n        }\n        return init;\n    }\n    else {\n        return { ...init, headers: { ...extraRequestHeaders, ...init.headers } };\n    }\n}\n\nexport { createFetchRequestTracker as default };\n","import { isObject } from '@bugsnag/core-performance'\n\nexport interface SendPageAttributes {\n  referrer?: boolean\n  title?: boolean\n  url?: boolean\n}\n\nexport const defaultSendPageAttributes = {\n  referrer: true,\n  title: true,\n  url: true\n}\n\nexport function getPermittedAttributes (sendPageAttributes: SendPageAttributes) {\n  return {\n    ...defaultSendPageAttributes,\n    ...sendPageAttributes\n  }\n}\n\nexport function isSendPageAttributes (obj: unknown): obj is SendPageAttributes {\n  const allowedTypes = ['undefined', 'boolean']\n  const keys = Object.keys(defaultSendPageAttributes)\n\n  return isObject(obj) && keys.every(key => allowedTypes.includes(typeof obj[key]))\n}\n","import type { SpanContext, SpanFactory } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\nimport type { PerformanceWithTiming } from '../on-settle/load-event-end-settler'\n\ntype PageLoadPhase = 'Unload'\n| 'Redirect'\n| 'LoadFromCache'\n| 'DNSLookup'\n| 'TCPHandshake'\n| 'TLS'\n| 'HTTPRequest'\n| 'HTTPResponse'\n| 'DomContentLoadedEvent'\n| 'LoadEvent'\n\nfunction shouldOmitSpan (startTime?: number, endTime?: number): boolean {\n  return (startTime === undefined || endTime === undefined) ||\n  (startTime === 0 && endTime === 0)\n}\n\nexport const instrumentPageLoadPhaseSpans = (\n  spanFactory: SpanFactory<BrowserConfiguration>,\n  performance: PerformanceWithTiming,\n  route: string,\n  parentContext: SpanContext\n) => {\n  function createPageLoadPhaseSpan (phase: PageLoadPhase, startTime: number, endTime: number) {\n    if (shouldOmitSpan(startTime, endTime)) return\n    const span = spanFactory.startSpan(`[PageLoadPhase/${phase}]${route}`, {\n      startTime,\n      parentContext,\n      makeCurrentContext: false\n    })\n\n    span.setAttribute('bugsnag.span.category', 'page_load_phase')\n    span.setAttribute('bugsnag.phase', phase)\n    spanFactory.endSpan(span, endTime)\n  }\n\n  const entries = performance.getEntriesByType('navigation') as PerformanceNavigationTiming[]\n  const entry = Array.isArray(entries) && entries[0]\n\n  if (entry) {\n    createPageLoadPhaseSpan('Unload', entry.unloadEventStart, entry.unloadEventEnd)\n    createPageLoadPhaseSpan('Redirect', entry.redirectStart, entry.redirectEnd)\n    createPageLoadPhaseSpan('LoadFromCache', entry.fetchStart, entry.domainLookupStart)\n    createPageLoadPhaseSpan('DNSLookup', entry.domainLookupStart, entry.domainLookupEnd)\n\n    // secureConectionStart will be 0 if no secure connection is used so use connectEnd in that case\n    const TCPHandshakeEnd = entry.secureConnectionStart || entry.connectEnd\n    createPageLoadPhaseSpan('TCPHandshake', entry.connectStart, TCPHandshakeEnd)\n\n    createPageLoadPhaseSpan('TLS', entry.secureConnectionStart, entry.connectEnd)\n    createPageLoadPhaseSpan('HTTPRequest', entry.requestStart, entry.responseStart)\n    createPageLoadPhaseSpan('HTTPResponse', entry.responseStart, entry.responseEnd)\n    createPageLoadPhaseSpan('DomContentLoadedEvent', entry.domContentLoadedEventStart, entry.domContentLoadedEventEnd)\n    createPageLoadPhaseSpan('LoadEvent', entry.loadEventStart, entry.loadEventEnd)\n  }\n}\n","import type { OnSettle } from './on-settle'\nimport { getAbsoluteUrl } from '@bugsnag/request-tracker-performance'\nimport type { RouteResolver, RoutingProvider, StartRouteChangeCallback } from './routing-provider'\n\nexport const defaultRouteResolver: RouteResolver = (url: URL) => url.pathname || '/'\n\nexport const createNoopRoutingProvider = () => {\n  return class NoopRoutingProvider implements RoutingProvider {\n    resolveRoute: RouteResolver\n\n    constructor (resolveRoute = defaultRouteResolver) {\n      this.resolveRoute = resolveRoute\n    }\n\n    listenForRouteChanges (startRouteChangeSpan: StartRouteChangeCallback) {}\n  }\n}\n\nexport const createDefaultRoutingProvider = (onSettle: OnSettle, location: Location) => {\n  return class DefaultRoutingProvider implements RoutingProvider {\n    resolveRoute: RouteResolver\n\n    constructor (resolveRoute = defaultRouteResolver) {\n      this.resolveRoute = resolveRoute\n    }\n\n    listenForRouteChanges (startRouteChangeSpan: StartRouteChangeCallback) {\n      addEventListener('popstate', (ev) => {\n        const url = new URL(location.href)\n        const span = startRouteChangeSpan(url, 'popstate')\n\n        onSettle((endTime) => {\n          span.end(endTime)\n        })\n      })\n\n      const originalPushState = history.pushState\n      history.pushState = function (...args) {\n        const url = args[2]\n\n        if (url) {\n          const absoluteURL = new URL(getAbsoluteUrl(url.toString(), document.baseURI))\n          const span = startRouteChangeSpan(absoluteURL, 'pushState')\n\n          onSettle((endTime) => {\n            span.end(endTime)\n          })\n        }\n\n        originalPushState.apply(this, args)\n      }\n    }\n  }\n}\n","import type { ParentContext, BackgroundingListener, InternalConfiguration, Plugin, SpanFactory } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\nimport type { OnSettle } from '../on-settle'\nimport type { PerformanceWithTiming } from '../on-settle/load-event-end-settler'\nimport { getPermittedAttributes } from '../send-page-attributes'\nimport type { WebVitals } from '../web-vitals'\nimport { instrumentPageLoadPhaseSpans } from './page-load-phase-spans'\nimport { defaultRouteResolver } from '../default-routing-provider'\n\nexport class FullPageLoadPlugin implements Plugin<BrowserConfiguration> {\n  private readonly spanFactory: SpanFactory<BrowserConfiguration>\n  private readonly document: Document\n  private readonly location: Location\n  private readonly onSettle: OnSettle\n  private readonly webVitals: WebVitals\n  private readonly performance: PerformanceWithTiming\n\n  // if the page was backgrounded at any point in the loading process a page\n  // load span is invalidated as the browser will deprioritise the page\n  private wasBackgrounded: boolean = false\n\n  constructor (\n    document: Document,\n    location: Location,\n    spanFactory: SpanFactory<BrowserConfiguration>,\n    webVitals: WebVitals,\n    onSettle: OnSettle,\n    backgroundingListener: BackgroundingListener,\n    performance: PerformanceWithTiming\n  ) {\n    this.document = document\n    this.location = location\n    this.spanFactory = spanFactory\n    this.webVitals = webVitals\n    this.onSettle = onSettle\n    this.performance = performance\n\n    backgroundingListener.onStateChange(state => {\n      if (!this.wasBackgrounded && state === 'in-background') {\n        this.wasBackgrounded = true\n      }\n    })\n  }\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    // don't report a page load span if the option is turned off or the page was\n    // backgrounded at any point in the loading process\n    if (!configuration.autoInstrumentFullPageLoads || this.wasBackgrounded) {\n      return\n    }\n\n    let parentContext: ParentContext | null = null\n\n    const traceparentMetaTag = document.querySelector('meta[name=\"traceparent\"]')\n    if (traceparentMetaTag !== null && traceparentMetaTag.getAttribute('content')) {\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const traceparent = traceparentMetaTag.getAttribute('content')!\n      const [, traceId, parentSpanId] = traceparent.split('-')\n\n      parentContext = {\n        traceId,\n        id: parentSpanId\n      }\n    }\n\n    const span = this.spanFactory.startSpan('[FullPageLoad]', { startTime: 0, parentContext })\n    const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes)\n    const url = new URL(this.location.href)\n\n    this.onSettle((endTime: number) => {\n      if (this.wasBackgrounded) return\n\n      // ensure there's always a route on this span by falling back to the\n      // default route resolver - the pipeline will ignore page load spans that\n      // don't have a route\n      const route = configuration.routingProvider.resolveRoute(url) || defaultRouteResolver(url)\n      span.name += route\n\n      instrumentPageLoadPhaseSpans(this.spanFactory, this.performance, route, span)\n\n      // Browser attributes\n      span.setAttribute('bugsnag.span.category', 'full_page_load')\n      span.setAttribute('bugsnag.browser.page.route', route)\n      if (permittedAttributes.referrer) span.setAttribute('bugsnag.browser.page.referrer', this.document.referrer)\n      if (permittedAttributes.title) span.setAttribute('bugsnag.browser.page.title', this.document.title)\n      if (permittedAttributes.url) span.setAttribute('bugsnag.browser.page.url', url.toString())\n\n      this.webVitals.attachTo(span)\n      this.spanFactory.endSpan(span, endTime)\n    })\n  }\n}\n","import { traceIdToSamplingRate } from '@bugsnag/core-performance'\nimport type { InternalConfiguration, Logger, Plugin, SpanContextStorage, SpanFactory, SpanInternal } from '@bugsnag/core-performance'\nimport {\n  defaultNetworkRequestCallback\n\n} from '@bugsnag/request-tracker-performance'\nimport type { NetworkRequestCallback, NetworkRequestInfo, RequestEndContext, RequestStartCallback, RequestStartContext, RequestTracker } from '@bugsnag/request-tracker-performance'\nimport type { BrowserConfiguration } from '../config'\n\nexport interface BrowserNetworkRequestInfo extends NetworkRequestInfo {\n  readonly type: PerformanceResourceTiming['initiatorType']\n\n  /**\n   * Experimental. Whether to propagate trace context by adding a `traceparent` header to the request.\n   */\n  propagateTraceContext?: boolean\n}\n\nconst permittedPrefixes = ['http://', 'https://', '/', './', '../']\n\nexport class NetworkRequestPlugin implements Plugin<BrowserConfiguration> {\n  private configEndpoint: string = ''\n  private networkRequestCallback: NetworkRequestCallback<BrowserNetworkRequestInfo> = defaultNetworkRequestCallback\n  private logger: Logger = { debug: console.debug, warn: console.warn, info: console.info, error: console.error }\n\n  constructor (\n    private spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly spanContextStorage: SpanContextStorage,\n    private fetchTracker: RequestTracker,\n    private xhrTracker: RequestTracker\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    this.logger = configuration.logger\n\n    if (configuration.autoInstrumentNetworkRequests) {\n      this.configEndpoint = configuration.endpoint\n      this.xhrTracker.onStart(this.trackRequest)\n      this.fetchTracker.onStart(this.trackRequest)\n      this.networkRequestCallback = configuration.networkRequestCallback\n    }\n  }\n\n  private trackRequest: RequestStartCallback = (startContext) => {\n    if (!this.shouldTrackRequest(startContext)) return\n\n    const shouldPropagateTraceContextByDefault = false\n\n    const defaultRequestInfo: BrowserNetworkRequestInfo = {\n      url: startContext.url,\n      type: startContext.type,\n      propagateTraceContext: shouldPropagateTraceContextByDefault\n    }\n\n    const networkRequestInfo = this.networkRequestCallback(defaultRequestInfo)\n\n    // returning null neither creates a span nor propagates trace context\n    if (!networkRequestInfo) {\n      return {\n        onRequestEnd: undefined,\n        extraRequestHeaders: undefined\n      }\n    }\n\n    if (networkRequestInfo.propagateTraceContext === undefined) {\n      networkRequestInfo.propagateTraceContext = shouldPropagateTraceContextByDefault\n    }\n\n    // a span is not created if url is null\n    if (!networkRequestInfo.url) {\n      return {\n        onRequestEnd: undefined,\n        // propagate trace context if requested using span context\n        extraRequestHeaders: networkRequestInfo.propagateTraceContext ? this.getExtraRequestHeaders() : undefined\n      }\n    }\n\n    // otherwise, create a span and propagate trace context if requested\n    if (typeof networkRequestInfo.url !== 'string') {\n      this.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`)\n      return\n    }\n\n    const span = this.spanFactory.startNetworkSpan({\n      method: startContext.method,\n      startTime: startContext.startTime,\n      url: networkRequestInfo.url\n    })\n\n    return {\n      onRequestEnd: (endContext: RequestEndContext) => {\n        if (endContext.state === 'success') {\n          this.spanFactory.endSpan(span, endContext.endTime, { 'http.status_code': endContext.status })\n        }\n      },\n      // propagate trace context using network span\n      extraRequestHeaders: networkRequestInfo.propagateTraceContext\n        ? this.getExtraRequestHeaders(span)\n        : undefined\n    }\n  }\n\n  private shouldTrackRequest (startContext: RequestStartContext): boolean {\n    return startContext.url !== this.configEndpoint && permittedPrefixes.some((prefix) => startContext.url.startsWith(prefix))\n  }\n\n  private getExtraRequestHeaders (span?: SpanInternal): Record<string, string> {\n    const extraRequestHeaders: Record<string, string> = {}\n\n    if (span) {\n      const traceId = span.traceId\n      const parentSpanId = span.id\n      const sampled = this.spanFactory.sampler.shouldSample(span.samplingRate)\n\n      extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled)\n      extraRequestHeaders.tracestate = buildTracestateHeader(traceId)\n    } else if (this.spanContextStorage.current) {\n      const currentSpanContext = this.spanContextStorage.current\n\n      const traceId = currentSpanContext.traceId\n      const parentSpanId = currentSpanContext.id\n      const sampled = this.spanFactory.sampler.shouldSample(currentSpanContext.samplingRate)\n\n      extraRequestHeaders.traceparent = buildTraceparentHeader(traceId, parentSpanId, sampled)\n      extraRequestHeaders.tracestate = buildTracestateHeader(traceId)\n    }\n\n    return extraRequestHeaders\n  }\n}\n\nfunction buildTraceparentHeader (traceId: string, parentSpanId: string, sampled: boolean): string {\n  return `00-${traceId}-${parentSpanId}-${sampled ? '01' : '00'}`\n}\n\nfunction buildTracestateHeader (traceId: string): string {\n  return `sb=v:1;r32:${traceIdToSamplingRate(traceId)}`\n}\n","import type { SpanContextStorage, InternalConfiguration, Plugin, SpanFactory } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\n\ninterface ResourceTiming extends PerformanceResourceTiming {\n  responseStatus?: number // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStatus\n}\n\nexport function getHttpVersion (protocol: string) {\n  switch (protocol) {\n    case '':\n      return undefined\n    case 'http/1.0':\n      return '1.0'\n    case 'http/1.1':\n      return '1.1'\n    case 'h2':\n    case 'h2c':\n      return '2.0'\n    case 'h3':\n      return '3.0'\n    case 'spdy/1':\n    case 'spdy/2':\n    case 'spdy/3':\n      return 'SPDY'\n    default:\n      return protocol\n  }\n}\n\nfunction resourceLoadSupported (PerformanceObserverClass: typeof PerformanceObserver) {\n  return PerformanceObserverClass &&\n    Array.isArray(PerformanceObserverClass.supportedEntryTypes) &&\n    PerformanceObserverClass.supportedEntryTypes.includes('resource')\n}\n\nexport class ResourceLoadPlugin implements Plugin<BrowserConfiguration> {\n  constructor (\n    private readonly spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly spanContextStorage: SpanContextStorage,\n    private readonly PerformanceObserverClass: typeof PerformanceObserver\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    if (!resourceLoadSupported(this.PerformanceObserverClass)) return\n\n    const observer = new this.PerformanceObserverClass((list) => {\n      const entries = list.getEntries() as ResourceTiming[]\n\n      for (const entry of entries) {\n        if (entry.initiatorType === 'fetch' || entry.initiatorType === 'xmlhttprequest') {\n          continue\n        }\n\n        const parentContext = this.spanContextStorage.first\n\n        if (parentContext) {\n          const networkRequestInfo = configuration.networkRequestCallback({ url: entry.name, type: entry.initiatorType })\n\n          if (!networkRequestInfo) return\n\n          if (typeof networkRequestInfo.url !== 'string') {\n            configuration.logger.warn(`expected url to be a string following network request callback, got ${typeof networkRequestInfo.url}`)\n            return\n          }\n\n          let name = ''\n          try {\n            const url = new URL(networkRequestInfo.url)\n            url.search = ''\n            name = url.href\n          } catch (err) {\n            configuration.logger.warn(`Unable to parse URL returned from networkRequestCallback: ${networkRequestInfo.url}`)\n            return\n          }\n\n          const span = this.spanFactory.startSpan(`[ResourceLoad]${name}`, {\n            parentContext,\n            startTime: entry.startTime,\n            makeCurrentContext: false\n          })\n\n          span.setAttribute('bugsnag.span.category', 'resource_load')\n          span.setAttribute('http.url', networkRequestInfo.url)\n\n          const httpFlavor = getHttpVersion(entry.nextHopProtocol)\n          if (httpFlavor) {\n            span.setAttribute('http.flavor', httpFlavor)\n          }\n\n          if (entry.encodedBodySize && entry.decodedBodySize) {\n            span.setAttribute('http.response_content_length', entry.encodedBodySize)\n            span.setAttribute('http.response_content_length_uncompressed', entry.decodedBodySize)\n          }\n\n          if (entry.responseStatus) {\n            span.setAttribute('http.status_code', entry.responseStatus)\n          }\n\n          this.spanFactory.endSpan(span, entry.responseEnd)\n        }\n      }\n    })\n\n    try {\n      observer.observe({ type: 'resource', buffered: true })\n    } catch (err) {\n      configuration.logger.warn('Unable to get previous resource loads as buffered observer not supported, only showing resource loads from this point on')\n      observer.observe({ entryTypes: ['resource'] })\n    }\n  }\n}\n","import { coreSpanOptionSchema, isString, isObject } from '@bugsnag/core-performance'\nimport type { InternalConfiguration, Plugin, Span, SpanFactory, SpanOptionSchema, Time } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from '../config'\nimport type { RouteChangeSpanEndOptions, RouteChangeSpanOptions } from '../routing-provider'\nimport { getPermittedAttributes } from '../send-page-attributes'\nimport { defaultRouteResolver } from '../default-routing-provider'\n\n// exclude isFirstClass from the route change option schema\nconst { startTime, parentContext, makeCurrentContext } = coreSpanOptionSchema\nconst routeChangeSpanOptionSchema: SpanOptionSchema = {\n  startTime,\n  parentContext,\n  makeCurrentContext,\n  trigger: {\n    getDefaultValue: (value) => String(value),\n    message: 'should be a string',\n    validate: isString\n  }\n}\n\ninterface InternalRouteChangeSpanOptions extends RouteChangeSpanOptions {\n  url: URL\n  trigger: string\n}\n\nexport class RouteChangePlugin implements Plugin<BrowserConfiguration> {\n  constructor (\n    private readonly spanFactory: SpanFactory<BrowserConfiguration>,\n    private readonly location: Location,\n    private readonly document: Document\n  ) {}\n\n  configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n    if (!configuration.autoInstrumentRouteChanges) return\n\n    const previousUrl = new URL(this.location.href)\n    let previousRoute = configuration.routingProvider.resolveRoute(previousUrl) || defaultRouteResolver(previousUrl)\n\n    const permittedAttributes = getPermittedAttributes(configuration.sendPageAttributes)\n\n    configuration.routingProvider.listenForRouteChanges((url, trigger, options) => {\n      let absoluteUrl\n\n      if (url instanceof URL) {\n        absoluteUrl = url\n      } else {\n        try {\n          const stringUrl = String(url)\n          absoluteUrl = new URL(stringUrl)\n        } catch (err) {\n          configuration.logger.warn('Invalid span options\\n  - url should be a URL')\n\n          return {\n            id: '',\n            name: '',\n            traceId: '',\n            samplingRate: 0,\n            isValid: () => false,\n            setAttribute: () => {},\n            end: () => {}\n          } satisfies Span\n        }\n      }\n\n      // create internal options for validation\n      const routeChangeSpanOptions = {\n        ...options,\n        trigger\n      }\n\n      const cleanOptions = this.spanFactory.validateSpanOptions<InternalRouteChangeSpanOptions>(\n        '[RouteChange]',\n        routeChangeSpanOptions,\n        routeChangeSpanOptionSchema\n      )\n\n      const route = configuration.routingProvider.resolveRoute(absoluteUrl) || defaultRouteResolver(absoluteUrl)\n\n      // update the span name using the validated route\n      cleanOptions.name += route\n      const span = this.spanFactory.startSpan(cleanOptions.name, cleanOptions.options)\n\n      span.setAttribute('bugsnag.span.category', 'route_change')\n      span.setAttribute('bugsnag.browser.page.route', route)\n      span.setAttribute('bugsnag.browser.page.previous_route', previousRoute)\n      span.setAttribute('bugsnag.browser.page.route_change.trigger', cleanOptions.options.trigger)\n      if (permittedAttributes.url) span.setAttribute('bugsnag.browser.page.url', url.toString())\n\n      previousRoute = route\n\n      return {\n        get id () {\n          return span.id\n        },\n        get traceId () {\n          return span.traceId\n        },\n        get samplingRate () {\n          return span.samplingRate\n        },\n        get name () {\n          return span.name\n        },\n        isValid: span.isValid,\n        setAttribute: span.setAttribute,\n        end: (endTimeOrOptions?: Time | RouteChangeSpanEndOptions): void => {\n          const options: RouteChangeSpanEndOptions = isObject(endTimeOrOptions) ? endTimeOrOptions : { endTime: endTimeOrOptions }\n\n          if (permittedAttributes.title) {\n            span.setAttribute('bugsnag.browser.page.title', this.document.title)\n          }\n\n          if (options.url) {\n            const urlObject = ensureUrl(options.url) // convert strings to URL if necessary\n            const route = configuration.routingProvider.resolveRoute(urlObject) || defaultRouteResolver(urlObject)\n\n            span.name = `[RouteChange]${route}`\n            span.setAttribute('bugsnag.browser.page.route', route)\n            previousRoute = route\n\n            // update the URL attribute as well\n            if (permittedAttributes.url) {\n              span.setAttribute('bugsnag.browser.page.url', urlObject.toString())\n            }\n          }\n\n          this.spanFactory.toPublicApi(span).end(options.endTime)\n        }\n\n      } satisfies Span\n    })\n  }\n}\n\nfunction ensureUrl (url: string | URL): URL {\n  if (typeof url === 'string') {\n    return new URL(url)\n  }\n  return url\n}\n","import { millisecondsToNanoseconds } from '@bugsnag/core-performance'\nimport type { BackgroundingListener, Clock } from '@bugsnag/core-performance'\n\n// a cut-down PerformanceTiming interface, since we don't care about most of\n// its properties\ninterface PerformanceTiming {\n  navigationStart: number\n}\n\n// the 'Performance' type says 'timeOrigin' is always available, but that's not\n// true on Safari <15 so we mark it as possibly 'undefined'\ninterface PerformanceWithOptionalTimeOrigin {\n  now: () => number\n  timeOrigin?: number\n  timing: PerformanceTiming\n}\n\n// maximum allowed clock divergence in milliseconds\nconst MAX_CLOCK_DRIFT_MS = 300000\n\nfunction recalculateTimeOrigin (timeOrigin: number, performance: PerformanceWithOptionalTimeOrigin): number {\n  // if the machine has been sleeping the monatomic clock used by performance.now() may have been paused,\n  // so we need to check if this has drifted significantly from Date.now()\n  // if the drift is > 5 minutes re-set the clock's origin to bring it back in line with Date.now()\n  if (Math.abs(Date.now() - (timeOrigin + performance.now())) > MAX_CLOCK_DRIFT_MS) {\n    return Date.now() - performance.now()\n  }\n\n  return timeOrigin\n}\n\nfunction createClock (performance: PerformanceWithOptionalTimeOrigin, backgroundingListener: BackgroundingListener): Clock {\n  const initialTimeOrigin = performance.timeOrigin === undefined\n    ? performance.timing.navigationStart\n    : performance.timeOrigin\n\n  // the performance clock could be shared between different tabs running in the same process\n  // so may already have diverged - for this reason we calculate a time origin when we first create the clock\n  // as well as when the app returns to the foreground\n  let calculatedTimeOrigin = recalculateTimeOrigin(initialTimeOrigin, performance)\n  backgroundingListener.onStateChange(state => {\n    if (state === 'in-foreground') {\n      calculatedTimeOrigin = recalculateTimeOrigin(calculatedTimeOrigin, performance)\n    }\n  })\n\n  return {\n    now: () => performance.now(),\n    date: () => new Date(calculatedTimeOrigin + performance.now()),\n    convert: (date) => date.getTime() - calculatedTimeOrigin,\n    // convert milliseconds since timeOrigin to full timestamp\n    toUnixTimestampNanoseconds: (time: number) => millisecondsToNanoseconds(calculatedTimeOrigin + time).toString()\n  }\n}\n\nexport default createClock\n","import { isObject } from '@bugsnag/core-performance'\nimport type { Time, Span, SpanOptions } from '@bugsnag/core-performance'\n\nexport type RouteChangeSpanOptions = Omit<SpanOptions, 'isFirstClass'>\nexport type StartRouteChangeCallback = (url: URL | string, trigger: string, options?: RouteChangeSpanOptions) => RouteChangeSpan\n\nexport interface RouteChangeSpanEndOptions {\n  endTime?: number | Date\n  url?: URL | string\n}\n\nexport interface RouteChangeSpan extends Span {\n  end: ((endTime?: Time) => void) & ((routeChangeSpanEndOptions: RouteChangeSpanEndOptions) => void)\n}\n\nexport interface RoutingProvider {\n  resolveRoute: (url: URL) => string\n  listenForRouteChanges: (startRouteChangeSpan: StartRouteChangeCallback) => void\n}\n\nexport type RouteResolver = (url: URL) => string\n\nexport const isRoutingProvider = (value: unknown): value is RoutingProvider =>\n  isObject(value) &&\n    typeof value.resolveRoute === 'function' &&\n    typeof value.listenForRouteChanges === 'function'\n","import type { BitLength, IdGenerator } from '@bugsnag/core-performance'\n\nfunction toHex (value: number): string {\n  const hex = value.toString(16)\n\n  // pad hex with a leading 0 if it's not already 2 characters\n  if (hex.length === 1) {\n    return '0' + hex\n  }\n\n  return hex\n}\n\nconst idGenerator: IdGenerator = {\n  generate (bits: BitLength): string {\n    const bytes = new Uint8Array(bits / 8)\n\n    // TODO: do we just read window here?\n    //       how can we pass this in given it needs to be valid before 'start' is called?\n    const randomValues = window.crypto.getRandomValues(bytes)\n\n    return Array.from(randomValues, toHex).join('')\n  }\n}\n\nexport default idGenerator\n","import type { Clock } from '@bugsnag/core-performance'\nimport type { OnSettleCallback } from '.'\n\nexport abstract class Settler {\n  protected clock: Clock\n  protected settled: boolean = false\n\n  private readonly callbacks: Set<OnSettleCallback> = new Set<OnSettleCallback>()\n\n  constructor (clock: Clock) {\n    this.clock = clock\n  }\n\n  subscribe (callback: OnSettleCallback): void {\n    this.callbacks.add(callback)\n\n    // if we're already settled, call the callback immediately\n    if (this.isSettled()) {\n      callback(this.clock.now())\n    }\n  }\n\n  unsubscribe (callback: OnSettleCallback): void {\n    this.callbacks.delete(callback)\n  }\n\n  isSettled (): boolean {\n    return this.settled\n  }\n\n  protected settle (settledTime: number): void {\n    this.settled = true\n\n    for (const callback of this.callbacks) {\n      callback(settledTime)\n    }\n  }\n}\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\nclass DomMutationSettler extends Settler {\n  private timeout: ReturnType<typeof setTimeout> | undefined = undefined\n\n  constructor (clock: Clock, target: Node) {\n    super(clock)\n\n    const observer = new MutationObserver(() => { this.restart() })\n\n    observer.observe(target, {\n      subtree: true,\n      childList: true,\n      characterData: true\n      // we don't track attribute changes as they may or may not be user visible\n      // so we assume they won't affect the page appearing settled to the user\n    })\n\n    this.restart()\n  }\n\n  private restart (): void {\n    clearTimeout(this.timeout)\n    this.settled = false\n\n    // we wait 100ms to ensure that DOM mutations have actually stopped but\n    // don't want the settled time to reflect that wait, so we record the time\n    // here and use that when settling\n    const settledTime = this.clock.now()\n\n    this.timeout = setTimeout(() => { this.settle(settledTime) }, 100)\n  }\n}\n\nexport default DomMutationSettler\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\ntype AddEventListener = (event: string, callback: () => void) => void\n\nexport interface PerformanceWithTiming {\n  getEntriesByType: typeof performance.getEntriesByType\n  timing: {\n    loadEventEnd: number\n    navigationStart: number\n  }\n}\n\ninterface DocumentWithReadyState {\n  readyState: DocumentReadyState\n}\n\n// check if a PerformanceEntry is a PerformanceNavigationTiming\nfunction isPerformanceNavigationTiming (entry?: PerformanceEntry): entry is PerformanceNavigationTiming {\n  return !!entry && entry.entryType === 'navigation'\n}\n\nclass LoadEventEndSettler extends Settler {\n  constructor (\n    clock: Clock,\n    addEventListener: AddEventListener,\n    performance: PerformanceWithTiming,\n    document: DocumentWithReadyState\n  ) {\n    super(clock)\n\n    // we delay settling by a macrotask so that the load event has ended\n    // see: https://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context/25933985#25933985\n    //      https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/\n    if (document.readyState === 'complete') {\n      setTimeout(() => { this.settleUsingPerformance(performance) }, 0)\n    } else {\n      addEventListener('load', () => {\n        setTimeout(() => { this.settleUsingPerformance(performance) }, 0)\n      })\n    }\n  }\n\n  private settleUsingPerformance (performance: PerformanceWithTiming) {\n    const now = this.clock.now()\n\n    // there's only ever one navigation entry\n    // PLAT-10204 Prevent snags occuring due to DOM scanning bots like BuiltWith https://builtwith.com/biup\n    const entry = typeof performance.getEntriesByType === 'function' ? performance.getEntriesByType('navigation')[0] : undefined\n\n    let settledTime = 0\n\n    if (isPerformanceNavigationTiming(entry)) {\n      settledTime = entry.loadEventEnd\n    } else if (performance.timing) {\n      settledTime = performance.timing.loadEventEnd - performance.timing.navigationStart\n    }\n\n    // if the settled time is obviously wrong then use the current time instead\n    // this won't be a perfectly accurate value, but it should be close enough\n    // for this purpose\n    if (settledTime <= 0 || settledTime > now) {\n      settledTime = now\n    }\n\n    this.settle(settledTime)\n  }\n}\n\nexport default LoadEventEndSettler\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\nimport type { RequestStartContext, RequestEndContext, RequestTracker } from '@bugsnag/request-tracker-performance'\n\nclass RequestSettler extends Settler {\n  private timeout: ReturnType<typeof setTimeout> | undefined = undefined\n  private urlsToIgnore: RegExp[] = []\n  private outstandingRequests = 0\n\n  constructor (clock: Clock, requestTracker: RequestTracker) {\n    super(clock)\n\n    // unlike most other settlers we start settled as it's possible to not make\n    // any requests at all\n    // TODO: we actually should only be settled if there are no outstanding\n    //       requests when constructed\n    this.settled = true\n\n    requestTracker.onStart(this.onRequestStart.bind(this))\n  }\n\n  setUrlsToIgnore (urlsToIgnore: RegExp[]): void {\n    this.urlsToIgnore = urlsToIgnore\n  }\n\n  private onRequestStart (startContext: RequestStartContext) {\n    // if this is an excluded URL, ignore this request\n    if (this.shouldIgnoreUrl(startContext.url)) return\n\n    clearTimeout(this.timeout)\n    this.settled = false\n    ++this.outstandingRequests\n\n    return {\n      onRequestEnd: (endContext: RequestEndContext): void => {\n        if (--this.outstandingRequests === 0) {\n          // we wait 100ms to ensure that requests have actually stopped but don't\n          // want the settled time to reflect that wait, so we record the time\n          // here and use that when settling\n          const settledTime = this.clock.now()\n\n          this.timeout = setTimeout(() => { this.settle(settledTime) }, 100)\n        }\n      }\n    }\n  }\n\n  private shouldIgnoreUrl (url: string): boolean {\n    return this.urlsToIgnore.some(regexp => regexp.test(url))\n  }\n}\n\nexport default RequestSettler\n","import type { Clock } from '@bugsnag/core-performance'\nimport { Settler } from './settler'\n\n/**\n * SettlerAggregate is a Settler that is settled when ALL Settlers it is\n * constructed with are settled themselves\n */\nclass SettlerAggregate extends Settler {\n  private readonly settlers: Settler[]\n\n  constructor (clock: Clock, settlers: Settler[]) {\n    super(clock)\n    this.settlers = settlers\n\n    for (const settler of settlers) {\n      settler.subscribe((settledTime: number) => {\n        // we need to check if all of the settlers are settled here as a\n        // previously settled settler could have unsettled in the meantime\n        if (this.settlersAreSettled()) {\n          this.settle(settledTime)\n        } else {\n          this.settled = false\n        }\n      })\n    }\n  }\n\n  isSettled () {\n    // ensure all child settlers are settled as well; it's possible for all of\n    // them to have settled previously only for one to unsettle\n    return super.isSettled() && this.settlersAreSettled()\n  }\n\n  private settlersAreSettled (): boolean {\n    for (const settler of this.settlers) {\n      if (!settler.isSettled()) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nexport default SettlerAggregate\n","import {\n  InMemoryPersistence,\n  toPersistedPayload\n\n} from '@bugsnag/core-performance'\nimport type { Persistence, PersistenceKey, PersistencePayloadMap } from '@bugsnag/core-performance'\n\ninterface LocalStorage {\n  setItem: (key: string, value: string) => void\n  getItem: (key: string) => string | null\n}\n\ninterface WindowWithLocalStorage {\n  localStorage?: LocalStorage\n}\n\nfunction makeBrowserPersistence (window: WindowWithLocalStorage): Persistence {\n  // accessing localStorage can throw on some browsers, so we have to catch\n  // these errors and provide a fallback\n  try {\n    if (window.localStorage) {\n      return new BrowserPersistence(window.localStorage)\n    }\n  } catch {}\n\n  // store items in memory if localStorage isn't available\n  return new InMemoryPersistence()\n}\n\nfunction toString<K extends PersistenceKey> (key: K, value: PersistencePayloadMap[K]): string {\n  switch (key) {\n    case 'bugsnag-sampling-probability':\n      return JSON.stringify(value)\n\n    case 'bugsnag-anonymous-id':\n      return value as string\n\n    default:\n      key satisfies never\n      return key\n  }\n}\n\nclass BrowserPersistence implements Persistence {\n  private readonly storage: LocalStorage\n\n  constructor (localStorage: LocalStorage) {\n    this.storage = localStorage\n  }\n\n  async load<K extends PersistenceKey> (key: K): Promise<PersistencePayloadMap[K] | undefined> {\n    try {\n      const raw = this.storage.getItem(key)\n\n      if (raw) {\n        return toPersistedPayload(key, raw)\n      }\n    } catch {}\n  }\n\n  async save<K extends PersistenceKey> (key: K, value: PersistencePayloadMap[K]): Promise<void> {\n    try {\n      this.storage.setItem(key, toString(key, value))\n    } catch {}\n  }\n}\n\nexport default makeBrowserPersistence\n","import type { Clock, SpanInternal } from '@bugsnag/core-performance'\n\ninterface PerformanceWithNavigationTiming {\n  getEntriesByName: typeof performance.getEntriesByName\n  getEntriesByType: typeof performance.getEntriesByType\n  timing: {\n    responseStart: number\n    navigationStart: number\n  }\n}\n\n// layout shifts are grouped into \"session windows\", which is defined as a set\n// of layout shifts that occur with less than 1 second between each shift and a\n// maximum of 5 seconds total duration\n// see the web vitals definition:\n// https://web.dev/evolving-cls/#why-a-session-window\ninterface LayoutShiftSession {\n  value: number\n  readonly firstStartTime: number\n  previousStartTime: number\n}\n\n// https://wicg.github.io/layout-instability/#sec-layout-shift\ninterface LayoutShift extends PerformanceEntry {\n  entryType: 'layout-shift'\n  value: number\n  hadRecentInput: boolean\n  lastInputTime: number\n}\n\nexport class WebVitals {\n  private readonly performance: PerformanceWithNavigationTiming\n  private readonly clock: Clock\n  private readonly observers: PerformanceObserver[]\n\n  private largestContentfulPaint: number | undefined\n  private cumulativeLayoutShift: number | undefined\n\n  constructor (\n    performance: PerformanceWithNavigationTiming,\n    clock: Clock,\n    PerformanceObserverClass?: typeof PerformanceObserver\n  ) {\n    this.performance = performance\n    this.clock = clock\n    this.observers = []\n\n    if (PerformanceObserverClass && Array.isArray(PerformanceObserverClass.supportedEntryTypes)) {\n      const supportedEntryTypes = PerformanceObserverClass.supportedEntryTypes\n\n      if (supportedEntryTypes.includes('largest-contentful-paint')) {\n        this.observeLargestContentfulPaint(PerformanceObserverClass)\n      }\n\n      if (supportedEntryTypes.includes('layout-shift')) {\n        this.observeLayoutShift(PerformanceObserverClass)\n      }\n    }\n  }\n\n  attachTo (span: SpanInternal) {\n    const firstContentfulPaint = this.firstContentfulPaint()\n\n    if (firstContentfulPaint) {\n      span.addEvent('fcp', firstContentfulPaint)\n    }\n\n    const timeToFirstByte = this.timeToFirstByte()\n\n    if (timeToFirstByte) {\n      span.addEvent('ttfb', timeToFirstByte)\n    }\n\n    const firstInputDelay = this.firstInputDelay()\n\n    if (firstInputDelay) {\n      span.addEvent('fid_start', firstInputDelay.start)\n      span.addEvent('fid_end', firstInputDelay.end)\n    }\n\n    if (this.cumulativeLayoutShift) {\n      span.setAttribute('bugsnag.metrics.cls', this.cumulativeLayoutShift)\n    }\n\n    if (this.largestContentfulPaint) {\n      span.addEvent('lcp', this.largestContentfulPaint)\n    }\n\n    // as there is only 1 page load span, we don't need to keep observing\n    // performance events, so can disconnect from any observers we've registered\n    for (const observer of this.observers) {\n      observer.disconnect()\n    }\n  }\n\n  private firstContentfulPaint () {\n    const entries = this.performance.getEntriesByName('first-contentful-paint', 'paint')\n    const entry = Array.isArray(entries) && entries[0]\n\n    if (entry) {\n      return entry.startTime\n    }\n  }\n\n  private timeToFirstByte () {\n    const entries = this.performance.getEntriesByType('navigation') as PerformanceNavigationTiming[]\n    const entry = Array.isArray(entries) && entries[0]\n\n    let responseStart: number\n\n    if (entry) {\n      responseStart = entry.responseStart\n    } else {\n      responseStart = this.performance.timing.responseStart - this.performance.timing.navigationStart\n    }\n\n    // only use responseStart if it's valid (between 0 and the current time)\n    // any other value cannot be valid because it would mean the response\n    // started immediately or hasn't happened yet!\n    if (responseStart > 0 && responseStart <= this.clock.now()) {\n      return responseStart\n    }\n  }\n\n  private firstInputDelay () {\n    const entries = this.performance.getEntriesByType('first-input') as PerformanceEventTiming[]\n    const entry = Array.isArray(entries) && entries[0]\n\n    if (entry) {\n      return {\n        start: entry.startTime,\n        end: entry.processingStart\n      }\n    }\n  }\n\n  private observeLargestContentfulPaint (\n    PerformanceObserverClass: typeof PerformanceObserver\n  ): void {\n    const observer = new PerformanceObserverClass((list) => {\n      const entries = list.getEntries()\n\n      if (entries.length > 0) {\n        // Use the latest LCP candidate\n        this.largestContentfulPaint = entries[entries.length - 1].startTime\n      }\n    })\n\n    observer.observe({ type: 'largest-contentful-paint', buffered: true })\n\n    this.observers.push(observer)\n  }\n\n  private observeLayoutShift (\n    PerformanceObserverClass: typeof PerformanceObserver\n  ): void {\n    let session: LayoutShiftSession | undefined\n\n    const observer = new PerformanceObserverClass((list) => {\n      for (const entry of list.getEntries() as LayoutShift[]) {\n        // ignore entries with recent input as it's likely the layout shifted due\n        // to user input and this metric only cares about unexpected layout\n        // shifts\n        if (entry.hadRecentInput) {\n          continue\n        }\n\n        // include this entry in the current session if we have a current session\n        // and this entry fits into the session window (it occurred less than 1\n        // second after the previous entry and the session duration is less than\n        // 5 seconds), otherwise start a new session\n        if (\n          session &&\n          entry.startTime - session.previousStartTime < 1000 &&\n          entry.startTime - session.firstStartTime < 5000\n        ) {\n          session.value += entry.value\n          session.previousStartTime = entry.startTime\n        } else {\n          session = {\n            value: entry.value,\n            firstStartTime: entry.startTime,\n            previousStartTime: entry.startTime\n          }\n        }\n      }\n\n      if (session &&\n        (this.cumulativeLayoutShift === undefined || session.value > this.cumulativeLayoutShift)\n      ) {\n        this.cumulativeLayoutShift = session.value\n      }\n    })\n\n    observer.observe({ type: 'layout-shift', buffered: true })\n\n    this.observers.push(observer)\n  }\n}\n","import { createClient, createNoopClient, InMemoryQueue } from '@bugsnag/core-performance'\nimport type { Client } from '@bugsnag/core-performance'\nimport createFetchDeliveryFactory from '@bugsnag/delivery-fetch-performance'\nimport { createFetchRequestTracker, createXmlHttpRequestTracker } from '@bugsnag/request-tracker-performance'\nimport { FullPageLoadPlugin, NetworkRequestPlugin, ResourceLoadPlugin, RouteChangePlugin } from './auto-instrumentation'\nimport createBrowserBackgroundingListener from './backgrounding-listener'\nimport createClock from './clock'\nimport { createSchema } from './config'\nimport type { BrowserConfiguration } from './config'\nimport { createDefaultRoutingProvider, createNoopRoutingProvider } from './default-routing-provider'\nimport idGenerator from './id-generator'\nimport createOnSettle, { createNoopOnSettle } from './on-settle'\nimport type { OnSettlePlugin } from './on-settle'\nimport makeBrowserPersistence from './persistence'\nimport createResourceAttributesSource from './resource-attributes-source'\nimport createSpanAttributesSource from './span-attributes-source'\nimport { WebVitals } from './web-vitals'\n\nexport let onSettle: OnSettlePlugin\nexport let DefaultRoutingProvider: ReturnType<typeof createDefaultRoutingProvider>\nlet BugsnagPerformance: Client<BrowserConfiguration>\n\nif (typeof window === 'undefined' || typeof document === 'undefined') {\n  onSettle = createNoopOnSettle()\n  DefaultRoutingProvider = createNoopRoutingProvider()\n  BugsnagPerformance = createNoopClient()\n} else {\n  const backgroundingListener = createBrowserBackgroundingListener(window)\n  const spanAttributesSource = createSpanAttributesSource(document)\n  const clock = createClock(performance, backgroundingListener)\n  const persistence = makeBrowserPersistence(window)\n  const resourceAttributesSource = createResourceAttributesSource(navigator, persistence)\n  const fetchRequestTracker = createFetchRequestTracker(window, clock)\n  const xhrRequestTracker = createXmlHttpRequestTracker(XMLHttpRequest, clock, document)\n  const webVitals = new WebVitals(performance, clock, window.PerformanceObserver)\n  onSettle = createOnSettle(\n    clock,\n    window,\n    fetchRequestTracker,\n    xhrRequestTracker,\n    performance\n  )\n  DefaultRoutingProvider = createDefaultRoutingProvider(onSettle, window.location)\n\n  BugsnagPerformance = createClient({\n    backgroundingListener,\n    clock,\n    resourceAttributesSource,\n    spanAttributesSource,\n    deliveryFactory: createFetchDeliveryFactory(window.fetch, clock, backgroundingListener),\n    idGenerator,\n    schema: createSchema(window.location.hostname, new DefaultRoutingProvider()),\n    plugins: (spanFactory, spanContextStorage) => [\n      onSettle,\n      new FullPageLoadPlugin(\n        document,\n        window.location,\n        spanFactory,\n        webVitals,\n        onSettle,\n        backgroundingListener,\n        performance\n      ),\n      // ResourceLoadPlugin should always come after FullPageLoad plugin, as it should use that\n      // span context as the parent of it's spans\n      new ResourceLoadPlugin(spanFactory, spanContextStorage, window.PerformanceObserver),\n      new NetworkRequestPlugin(spanFactory, spanContextStorage, fetchRequestTracker, xhrRequestTracker),\n      new RouteChangePlugin(spanFactory, window.location, document)\n    ],\n    persistence,\n    retryQueueFactory: (delivery, retryQueueMaxSize) => new InMemoryQueue(delivery, retryQueueMaxSize)\n  })\n}\n\nexport default BugsnagPerformance\n","import DomMutationSettler from './dom-mutation-settler'\nimport LoadEventEndSettler from './load-event-end-settler'\nimport type { PerformanceWithTiming } from './load-event-end-settler'\nimport RequestSettler from './request-settler'\nimport SettlerAggregate from './settler-aggregate'\nimport type { BrowserConfiguration } from '../config'\nimport type { RequestTracker } from '@bugsnag/request-tracker-performance'\nimport type { Clock, InternalConfiguration, Plugin } from '@bugsnag/core-performance'\n\nexport type OnSettle = (callback: OnSettleCallback) => void\nexport type OnSettleCallback = (settledTime: number) => void\nexport type OnSettlePlugin = Plugin<BrowserConfiguration> & OnSettle\n\nconst TIMEOUT_MILLISECONDS = 60 * 1000\n\nexport function createNoopOnSettle (): OnSettlePlugin {\n  const noop = () => {}\n  noop.configure = () => {}\n  return noop as OnSettlePlugin\n}\n\nexport default function createOnSettle (\n  clock: Clock,\n  window: Window,\n  fetchRequestTracker: RequestTracker,\n  xhrRequestTracker: RequestTracker,\n  performance: PerformanceWithTiming\n): OnSettlePlugin {\n  const domMutationSettler = new DomMutationSettler(clock, window.document)\n  const fetchRequestSettler = new RequestSettler(clock, fetchRequestTracker)\n  const xhrRequestSettler = new RequestSettler(clock, xhrRequestTracker)\n  const loadEventEndSettler = new LoadEventEndSettler(\n    clock,\n    window.addEventListener,\n    performance,\n    window.document\n  )\n\n  const settler = new SettlerAggregate(clock, [\n    domMutationSettler,\n    loadEventEndSettler,\n    fetchRequestSettler,\n    xhrRequestSettler\n  ])\n\n  function onSettlePlugin (callback: OnSettleCallback): void {\n    const onSettle: OnSettleCallback = (settledTime: number) => {\n      clearTimeout(timeout)\n\n      // unsubscribe from the settler so we don't call the callback more than\n      // once\n      settler.unsubscribe(onSettle)\n\n      callback(settledTime)\n    }\n\n    const timeout = setTimeout(() => {\n      const settledTime = clock.now()\n\n      settler.unsubscribe(onSettle)\n\n      callback(settledTime)\n    }, TIMEOUT_MILLISECONDS)\n\n    // if we're already settled apply a 100ms \"cooldown\" period in case we\n    // unsettle immediately after this call\n    // if we're not settled then this cooldown is irrelevant - we can just\n    // subscribe to the settler to be notified of when the page settles\n    const cooldown = settler.isSettled() ? 100 : 0\n    const settledTime = clock.now()\n\n    setTimeout(() => {\n      if (settler.isSettled()) {\n        // if we're still settled call the callback via \"onSettle\"\n        onSettle(settledTime)\n      } else {\n        // otherwise wait for the page to settle\n        settler.subscribe(onSettle)\n      }\n    }, cooldown)\n  }\n\n  onSettlePlugin.configure = function (configuration: InternalConfiguration<BrowserConfiguration>): void {\n    const settleIgnoreUrls = configuration.settleIgnoreUrls.map(\n      (url: string | RegExp): RegExp => typeof url === 'string' ? RegExp(url) : url\n    ).concat(RegExp(configuration.endpoint))\n\n    fetchRequestSettler.setUrlsToIgnore(settleIgnoreUrls)\n    xhrRequestSettler.setUrlsToIgnore(settleIgnoreUrls)\n  }\n\n  return onSettlePlugin\n}\n","import type { BackgroundingListener, BackgroundingListenerCallback, BackgroundingListenerState } from '@bugsnag/core-performance'\n\ninterface DocumentForVisibilityState {\n  addEventListener: (event: string, callback: () => void) => void\n  visibilityState: string\n}\n\ninterface WindowWithDocumentForVisibilityState {\n  document: DocumentForVisibilityState\n  addEventListener: (event: string, callback: () => void) => void\n}\n\nexport default function createBrowserBackgroundingListener (window: WindowWithDocumentForVisibilityState) {\n  const callbacks: BackgroundingListenerCallback[] = []\n  let state: BackgroundingListenerState = window.document.visibilityState === 'hidden'\n    ? 'in-background'\n    : 'in-foreground'\n\n  const backgroundingListener: BackgroundingListener = {\n    onStateChange (backgroundingListenerCallback: BackgroundingListenerCallback): void {\n      callbacks.push(backgroundingListenerCallback)\n\n      // trigger the callback immediately if the document is already 'hidden'\n      if (state === 'in-background') {\n        backgroundingListenerCallback(state)\n      }\n    }\n  }\n\n  const backgroundStateChanged = (newState: BackgroundingListenerState) => {\n    if (state === newState) return\n\n    state = newState\n    for (const callback of callbacks) {\n      callback(state)\n    }\n  }\n\n  window.document.addEventListener('visibilitychange', function () {\n    const newState = window.document.visibilityState === 'hidden'\n      ? 'in-background'\n      : 'in-foreground'\n\n    backgroundStateChanged(newState)\n  })\n\n  // some browsers don't fire the visibilitychange event when the page is suspended,\n  // so we also listen for pagehide and pageshow events\n  window.addEventListener('pagehide', function () {\n    backgroundStateChanged('in-background')\n  })\n\n  window.addEventListener('pageshow', function () {\n    backgroundStateChanged('in-foreground')\n  })\n\n  return backgroundingListener\n}\n","import type { InternalConfiguration, SpanAttributesSource, SpanInternal } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from './config'\n\nexport const createSpanAttributesSource = (document: Document): SpanAttributesSource<BrowserConfiguration> => {\n  const defaultAttributes = {\n    url: {\n      name: 'bugsnag.browser.page.url',\n      getValue: () => document.location.href,\n      permitted: false\n    },\n    title: {\n      name: 'bugsnag.browser.page.title',\n      getValue: () => document.title,\n      permitted: false\n    }\n  }\n\n  return {\n    configure (configuration: InternalConfiguration<BrowserConfiguration>) {\n      defaultAttributes.title.permitted = configuration.sendPageAttributes.title || false\n      defaultAttributes.url.permitted = configuration.sendPageAttributes.url || false\n    },\n    requestAttributes (span: SpanInternal) {\n      for (const attribute of Object.values(defaultAttributes)) {\n        if (attribute.permitted) {\n          span.setAttribute(attribute.name, attribute.getValue())\n        }\n      }\n    }\n  }\n}\n\nexport default createSpanAttributesSource\n","import cuid from '@bugsnag/cuid'\nimport { ResourceAttributes } from '@bugsnag/core-performance'\nimport type { Persistence, ResourceAttributeSource } from '@bugsnag/core-performance'\nimport type { BrowserConfiguration } from './config'\n\nfunction createResourceAttributesSource (\n  navigator: Navigator,\n  persistence: Persistence\n): ResourceAttributeSource<BrowserConfiguration> {\n  let getDeviceId: Promise<string> | undefined\n  let deviceId: string | undefined\n\n  return function resourceAttributesSource (config) {\n    const attributes = new ResourceAttributes(\n      config.releaseStage,\n      config.appVersion,\n      config.serviceName,\n      'bugsnag.performance.browser',\n      '__VERSION__',\n      config.logger\n    )\n\n    attributes.set('browser.user_agent', navigator.userAgent)\n\n    // chromium only\n    if (navigator.userAgentData) {\n      attributes.set('browser.platform', navigator.userAgentData.platform)\n      attributes.set('browser.mobile', navigator.userAgentData.mobile)\n    }\n\n    if (config.generateAnonymousId) {\n      // ensure we only load/generate the anonymous ID once no matter how many\n      // times we're called, otherwise we could generate different IDs on\n      // different calls as cuids are partly time based\n      if (!getDeviceId) {\n        getDeviceId = persistence.load('bugsnag-anonymous-id')\n          .then(maybeAnonymousId => {\n            // use the persisted value or generate a new ID\n            const anonymousId = maybeAnonymousId || cuid()\n\n            // if there was no persisted value, save the newly generated ID\n            if (!maybeAnonymousId) {\n              persistence.save('bugsnag-anonymous-id', anonymousId)\n            }\n\n            // store the device ID so we can set it synchronously in future\n            deviceId = anonymousId\n\n            return deviceId\n          })\n      }\n\n      if (deviceId) {\n        // set device ID synchronously if it's already available\n        attributes.set('device.id', deviceId)\n      } else {\n        // otherwise add it when the promise resolves\n        return getDeviceId\n          .then(deviceId => {\n            attributes.set('device.id', deviceId)\n\n            return attributes\n          })\n      }\n    }\n\n    return Promise.resolve(attributes)\n  }\n}\n\nexport default createResourceAttributesSource\n","import { RequestTracker } from './request-tracker.js';\nimport getAbsoluteUrl from './url-helpers.js';\n\nfunction createXmlHttpRequestTracker(xhr, clock, document) {\n    const requestTracker = new RequestTracker();\n    const trackedRequests = new WeakMap();\n    const requestHandlers = new WeakMap();\n    const originalOpen = xhr.prototype.open;\n    xhr.prototype.open = function open(method, url, ...rest) {\n        trackedRequests.set(this, { method, url: getAbsoluteUrl(String(url), document && document.baseURI) });\n        // @ts-expect-error rest\n        originalOpen.call(this, method, url, ...rest);\n    };\n    const originalSend = xhr.prototype.send;\n    xhr.prototype.send = function send(body) {\n        const requestData = trackedRequests.get(this);\n        if (requestData) {\n            // if there is an existing event listener this request instance is being reused,\n            // so we need to remove the listener from the previous send\n            const existingHandler = requestHandlers.get(this);\n            if (existingHandler)\n                this.removeEventListener('readystatechange', existingHandler);\n            const { onRequestEnd, extraRequestHeaders } = requestTracker.start({\n                type: 'xmlhttprequest',\n                method: requestData.method,\n                url: requestData.url,\n                startTime: clock.now()\n            });\n            if (extraRequestHeaders) {\n                for (const extraHeaders of extraRequestHeaders) {\n                    for (const [name, value] of Object.entries(extraHeaders)) {\n                        this.setRequestHeader(name, value);\n                    }\n                }\n            }\n            const onReadyStateChange = (evt) => {\n                if (this.readyState === xhr.DONE && onRequestEnd) {\n                    // If the status is 0 the request did not complete so report this as an error\n                    const endContext = this.status > 0\n                        ? { endTime: clock.now(), status: this.status, state: 'success' }\n                        : { endTime: clock.now(), state: 'error' };\n                    onRequestEnd(endContext);\n                }\n            };\n            this.addEventListener('readystatechange', onReadyStateChange);\n            requestHandlers.set(this, onReadyStateChange);\n        }\n        originalSend.call(this, body);\n    };\n    return requestTracker;\n}\n\nexport { createXmlHttpRequestTracker as default };\n","import {\n  isBoolean,\n  isStringWithLength,\n  isStringOrRegExpArray,\n  schema\n} from '@bugsnag/core-performance'\nimport type { ConfigOption, Configuration, CoreSchema } from '@bugsnag/core-performance'\nimport { defaultNetworkRequestCallback, isNetworkRequestCallback } from '@bugsnag/request-tracker-performance'\nimport type { NetworkRequestCallback } from '@bugsnag/request-tracker-performance'\nimport type { BrowserNetworkRequestInfo } from './auto-instrumentation'\nimport { isRoutingProvider } from './routing-provider'\nimport type { RoutingProvider } from './routing-provider'\nimport { defaultSendPageAttributes, isSendPageAttributes } from './send-page-attributes'\nimport type { SendPageAttributes } from './send-page-attributes'\n\nexport interface BrowserSchema extends CoreSchema {\n  autoInstrumentFullPageLoads: ConfigOption<boolean>\n  autoInstrumentNetworkRequests: ConfigOption<boolean>\n  autoInstrumentRouteChanges: ConfigOption<boolean>\n  generateAnonymousId: ConfigOption<boolean>\n  routingProvider: ConfigOption<RoutingProvider>\n  settleIgnoreUrls: ConfigOption<Array<string | RegExp>>\n  networkRequestCallback: ConfigOption<NetworkRequestCallback<BrowserNetworkRequestInfo>>\n  sendPageAttributes: ConfigOption<SendPageAttributes>\n  serviceName: ConfigOption<string>\n}\n\nexport interface BrowserConfiguration extends Configuration {\n  autoInstrumentFullPageLoads?: boolean\n  autoInstrumentNetworkRequests?: boolean\n  autoInstrumentRouteChanges?: boolean\n  generateAnonymousId?: boolean\n  routingProvider?: RoutingProvider\n  settleIgnoreUrls?: Array<string | RegExp>\n  networkRequestCallback?: NetworkRequestCallback<BrowserNetworkRequestInfo>\n  sendPageAttributes?: SendPageAttributes\n  serviceName?: string\n}\n\nexport function createSchema (hostname: string, defaultRoutingProvider: RoutingProvider): BrowserSchema {\n  return {\n    ...schema,\n    releaseStage: {\n      ...schema.releaseStage,\n      defaultValue: hostname === 'localhost' ? 'development' : 'production'\n    },\n    autoInstrumentFullPageLoads: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    autoInstrumentNetworkRequests: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    autoInstrumentRouteChanges: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    generateAnonymousId: {\n      defaultValue: true,\n      message: 'should be true|false',\n      validate: isBoolean\n    },\n    routingProvider: {\n      defaultValue: defaultRoutingProvider,\n      message: 'should be a routing provider',\n      validate: isRoutingProvider\n    },\n    settleIgnoreUrls: {\n      defaultValue: [],\n      message: 'should be an array of string|RegExp',\n      validate: isStringOrRegExpArray\n    },\n    networkRequestCallback: {\n      defaultValue: defaultNetworkRequestCallback,\n      message: 'should be a function',\n      validate: isNetworkRequestCallback\n    },\n    sendPageAttributes: {\n      defaultValue: defaultSendPageAttributes,\n      message: 'should be an object',\n      validate: isSendPageAttributes\n    },\n    serviceName: {\n      defaultValue: 'unknown_service',\n      message: 'should be a string',\n      validate: isStringWithLength\n    }\n  }\n}\n"],"names":["defaultSpanAttributeLimits","attributeStringValueLimit","attributeArrayLengthLimit","attributeCountLimit","defaultResourceAttributeLimits","Infinity","isBoolean","value","isObject","Array","isArray","isNumber","Number","isFinite","isNaN","isString","isStringWithLength","length","isStringOrRegExpArray","every","item","RegExp","SpanAttributes","droppedAttributesCount","this","_droppedAttributesCount","constructor","initialValues","spanAttributeLimits","spanName","logger","attributes","validateAttribute","name","set","limit","originalLength","newString","slice","truncateString","warn","truncatedValue","setCustom","has","size","remove","delete","toJson","from","forEach","key","map","attribute","isInteger","intValue","doubleValue","boolValue","stringValue","arrayValues","getJsonAttributeValue","filter","arrayValue","values","attributeToJson","ResourceAttributes","releaseStage","appVersion","serviceName","sdkName","sdkVersion","Map","super","NANOSECONDS_IN_MILLISECONDS","millisecondsToNanoseconds","milliseconds","Math","round","schema","defaultValue","message","validate","endpoint","apiKey","test","debug","console","info","error","enabledReleaseStages","isStringArray","plugins","plugin","configure","isPlugin","bugsnag","undefined","addOnError","samplingProbability","onSpanEnd","method","SpanEvents","events","add","time","push","clock","timeUnixNano","toUnixTimestampNanoseconds","traceIdToSamplingRate","traceId","samplingRate","i","position","parseInt","spanEndedToSpan","span","id","isValid","end","setAttribute","SpanInternal","startTime","parentSpanId","kind","addEvent","setCustomAttribute","endTime","_samplingProbability","raw","now","coreSpanOptionSchema","getDefaultValue","Date","parentContext","isSpanContext","makeCurrentContext","isFirstClass","BatchProcessor","delivery","configuration","retryQueue","sampler","probabilityManager","encoder","spans","timeout","flushQueue","Promise","resolve","flush","bind","stop","clearTimeout","start","setTimeout","batchInactivityTimeoutMs","includes","maximumBatchSize","then","async","batch","prepareBatch","payload","encode","batchTime","response","send","setProbability","state","err","runCallbacks","callbackStartTime","performance","continueToBatch","callback","result","duration","ensureFreshProbability","probability","spanProbability","sample","TracePayloadEncoder","resourceAttributeSource","resourceAttributes","jsonSpans","spanId","startTimeUnixNano","endTimeUnixNano","body","resourceSpans","resource","scopeSpans","headers","generateSamplingHeader","spanCounts","Object","create","existingValue","rawProbabilities","keys","pairs","rawProbability","join","retryCodes","Set","FixedProbabilityManager","newProbability","ProbabilityFetcher","getNewProbability","timeBetweenRetries","PROBABILITY_REFRESH_MILLISECONDS","ProbabilityManager","persistence","probabilityFetcher","persistedProbability","load","initialProbabilityTime","outstandingFreshnessCheck","lastProbabilityTime","save","BufferingProcessor","scaleProbabilityToMatchSamplingRate","floor","Sampler","initialProbability","_probability","scaledProbability","scaled","shouldSample","DefaultSpanContextStorage","backgroundingListener","contextStack","isInForeground","onBackgroundStateChange","onStateChange","Symbol","iterator","context","pop","span1","span2","current","removeClosedContexts","first","timeToNumber","convert","SpanFactory","processor","idGenerator","spanAttributesSource","spanContextStorage","openSpans","WeakSet","startSpan","options","safeStartTime","generate","startNetworkSpan","toUpperCase","cleanOptions","validateSpanOptions","spanInternal","url","endSpan","additionalAttributes","untracked","isValidSpan","entries","requestAttributes","spanEnded","toPublicApi","safeEndTime","warnings","String","spanOptions","option","prototype","hasOwnProperty","call","getDefaultExportFromCjs","x","pad","num","s","substr","require$$0","env","window","self","globalCount","prop","clientId","navigator","mimeTypes","userAgent","toString","fingerprint","isCuid","require$$2","c","blockSize","base","discreteValues","pow","randomBlock","random","cuid","getTime","InMemoryPersistence","persistedItems","get","toPersistedPayload","json","JSON","parse","InMemoryQueue","retryQueueMaxSize","requestQueue","payloads","spanCount","reduce","count","countSpansInPayload","shift","j","samplingProbabilityFromHeaders","asNumber","parseFloat","defaultNetworkRequestCallback","networkRequestInfo","isNetworkRequestCallback","RequestTracker","callbacks","onStart","startCallback","results","onRequestEnd","endContext","extraRequestHeaders","isDefined","argument","getAbsoluteUrl","baseUrl","indexOf","absoluteUrl","URL","href","endsWith","_a","isRequest","input","defaultSendPageAttributes","referrer","title","getPermittedAttributes","sendPageAttributes","isSendPageAttributes","obj","allowedTypes","defaultRouteResolver","pathname","createNoopRoutingProvider","resolveRoute","listenForRouteChanges","startRouteChangeSpan","createDefaultRoutingProvider","onSettle","location","addEventListener","ev","originalPushState","history","pushState","args","absoluteURL","document","baseURI","apply","FullPageLoadPlugin","spanFactory","webVitals","wasBackgrounded","autoInstrumentFullPageLoads","traceparentMetaTag","querySelector","getAttribute","traceparent","split","permittedAttributes","route","routingProvider","createPageLoadPhaseSpan","phase","shouldOmitSpan","getEntriesByType","entry","unloadEventStart","unloadEventEnd","redirectStart","redirectEnd","fetchStart","domainLookupStart","domainLookupEnd","TCPHandshakeEnd","secureConnectionStart","connectEnd","connectStart","requestStart","responseStart","responseEnd","domContentLoadedEventStart","domContentLoadedEventEnd","loadEventStart","loadEventEnd","instrumentPageLoadPhaseSpans","attachTo","permittedPrefixes","NetworkRequestPlugin","fetchTracker","xhrTracker","configEndpoint","networkRequestCallback","trackRequest","startContext","shouldTrackRequest","shouldPropagateTraceContextByDefault","defaultRequestInfo","type","propagateTraceContext","getExtraRequestHeaders","status","autoInstrumentNetworkRequests","some","prefix","startsWith","sampled","buildTraceparentHeader","tracestate","buildTracestateHeader","currentSpanContext","getHttpVersion","protocol","ResourceLoadPlugin","PerformanceObserverClass","supportedEntryTypes","observer","list","getEntries","initiatorType","search","httpFlavor","nextHopProtocol","encodedBodySize","decodedBodySize","responseStatus","observe","buffered","entryTypes","routeChangeSpanOptionSchema","trigger","RouteChangePlugin","autoInstrumentRouteChanges","previousUrl","previousRoute","stringUrl","routeChangeSpanOptions","endTimeOrOptions","urlObject","ensureUrl","MAX_CLOCK_DRIFT_MS","recalculateTimeOrigin","timeOrigin","abs","isRoutingProvider","toHex","hex","bits","bytes","Uint8Array","randomValues","crypto","getRandomValues","Settler","settled","subscribe","isSettled","unsubscribe","settle","settledTime","DomMutationSettler","target","MutationObserver","restart","subtree","childList","characterData","LoadEventEndSettler","readyState","settleUsingPerformance","entryType","isPerformanceNavigationTiming","timing","navigationStart","RequestSettler","requestTracker","urlsToIgnore","outstandingRequests","onRequestStart","setUrlsToIgnore","shouldIgnoreUrl","regexp","SettlerAggregate","settlers","settler","settlersAreSettled","BrowserPersistence","localStorage","storage","getItem","setItem","stringify","WebVitals","observers","observeLargestContentfulPaint","observeLayoutShift","firstContentfulPaint","timeToFirstByte","firstInputDelay","cumulativeLayoutShift","largestContentfulPaint","disconnect","getEntriesByName","processingStart","session","hadRecentInput","previousStartTime","firstStartTime","DefaultRoutingProvider","BugsnagPerformance","noop","createNoopOnSettle","createNoopClient","visibilityState","backgroundingListenerCallback","backgroundStateChanged","newState","createBrowserBackgroundingListener","defaultAttributes","getValue","permitted","createSpanAttributesSource","calculatedTimeOrigin","date","createClock","makeBrowserPersistence","resourceAttributesSource","getDeviceId","deviceId","config","userAgentData","platform","mobile","generateAnonymousId","maybeAnonymousId","anonymousId","createResourceAttributesSource","fetchRequestTracker","global","originalFetch","fetch","init","inputIsRequest","createStartContext","modifiedParams","extraHeaders","Headers","isHeadersInstance","mergeInitRequestHeaders","mergeInputRequestHeaders","mergeRequestHeaders","catch","createFetchRequestTracker","xhrRequestTracker","xhr","trackedRequests","WeakMap","requestHandlers","originalOpen","open","rest","originalSend","requestData","existingHandler","removeEventListener","setRequestHeader","onReadyStateChange","evt","DONE","createXmlHttpRequestTracker","XMLHttpRequest","PerformanceObserver","domMutationSettler","fetchRequestSettler","xhrRequestSettler","loadEventEndSettler","onSettlePlugin","cooldown","settleIgnoreUrls","concat","createOnSettle","bufferingProcessor","Error","cleanConfiguration","validateConfig","replace","Event","setTraceCorrelation","Client","originalNotify","_notify","deliveryFactory","manager","retryQueueFactory","networkSpanOptions","endOptions","getPlugin","Constructor","platformExtensions","createClient","keepalive","toISOString","statusCode","createFetchDeliveryFactory","hostname","defaultRoutingProvider","BugsnagPerformance$1"],"mappings":"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","x_google_ignoreList":[19,20,21,22]}